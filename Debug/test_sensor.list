
test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800a0a8  0800a0a8  0001a0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a800  0800a800  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a808  0800a808  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000210  0800aa20  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800aa20  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023993  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417a  00000000  00000000  00043c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011531  00000000  00000000  00047d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016b8  00000000  00000000  000592c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012ae  00000000  00000000  0005a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b12d  00000000  00000000  0005bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028a1a  00000000  00000000  00086d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100415  00000000  00000000  000af775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005544  00000000  00000000  001afb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001b50d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a090 	.word	0x0800a090

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800a090 	.word	0x0800a090

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000ff0:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ff2:	b2c4      	uxtb	r4, r0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f001 f950 	bl	800229c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000ffc:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001000:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001004:	2120      	movs	r1, #32
 8001006:	4620      	mov	r0, r4
 8001008:	f001 f92a 	bl	8002260 <SENSOR_IO_Write>
}
 800100c:	bd10      	pop	{r4, pc}

0800100e <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800100e:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001010:	b2c4      	uxtb	r4, r0
 8001012:	2120      	movs	r1, #32
 8001014:	4620      	mov	r0, r4
 8001016:	f001 f941 	bl	800229c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800101a:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800101e:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001022:	2120      	movs	r1, #32
 8001024:	4620      	mov	r0, r4
 8001026:	f001 f91b 	bl	8002260 <SENSOR_IO_Write>
}
 800102a:	bd10      	pop	{r4, pc}

0800102c <HTS221_H_ReadID>:
{  
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001030:	f001 f90e 	bl	8002250 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001034:	210f      	movs	r1, #15
 8001036:	b2e0      	uxtb	r0, r4
 8001038:	f001 f930 	bl	800229c <SENSOR_IO_Read>
}
 800103c:	bd10      	pop	{r4, pc}
	...

08001040 <HTS221_H_ReadHumidity>:
{
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b082      	sub	sp, #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001046:	fa5f f880 	uxtb.w	r8, r0
 800104a:	2302      	movs	r3, #2
 800104c:	aa01      	add	r2, sp, #4
 800104e:	21b0      	movs	r1, #176	; 0xb0
 8001050:	4640      	mov	r0, r8
 8001052:	f001 f945 	bl	80022e0 <SENSOR_IO_ReadMultiple>
  H0_rh = buffer[0] >> 1;
 8001056:	f89d 5004 	ldrb.w	r5, [sp, #4]
 800105a:	086d      	lsrs	r5, r5, #1
  H1_rh = buffer[1] >> 1;
 800105c:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8001060:	0876      	lsrs	r6, r6, #1
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001062:	2302      	movs	r3, #2
 8001064:	aa01      	add	r2, sp, #4
 8001066:	21b6      	movs	r1, #182	; 0xb6
 8001068:	4640      	mov	r0, r8
 800106a:	f001 f939 	bl	80022e0 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800106e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001072:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8001076:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800107a:	b23f      	sxth	r7, r7
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800107c:	2302      	movs	r3, #2
 800107e:	aa01      	add	r2, sp, #4
 8001080:	21ba      	movs	r1, #186	; 0xba
 8001082:	4640      	mov	r0, r8
 8001084:	f001 f92c 	bl	80022e0 <SENSOR_IO_ReadMultiple>
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001088:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800108c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8001090:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001094:	b224      	sxth	r4, r4
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001096:	2302      	movs	r3, #2
 8001098:	aa01      	add	r2, sp, #4
 800109a:	21a8      	movs	r1, #168	; 0xa8
 800109c:	4640      	mov	r0, r8
 800109e:	f001 f91f 	bl	80022e0 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80010a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	1bdb      	subs	r3, r3, r7
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	1b76      	subs	r6, r6, r5
 80010bc:	ee07 6a10 	vmov	s14, r6
 80010c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	1be4      	subs	r4, r4, r7
 80010ca:	ee07 4a10 	vmov	s14, r4
 80010ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010d2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80010d6:	b22d      	sxth	r5, r5
 80010d8:	ee07 5a90 	vmov	s15, r5
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 80010e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        : ( tmp_f <    0.0f ) ?    0.0f
 80010ec:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800111c <HTS221_H_ReadHumidity+0xdc>
 80010f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	dc07      	bgt.n	800110a <HTS221_H_ReadHumidity+0xca>
        : tmp_f;
 80010fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d504      	bpl.n	800110e <HTS221_H_ReadHumidity+0xce>
 8001104:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001120 <HTS221_H_ReadHumidity+0xe0>
 8001108:	e001      	b.n	800110e <HTS221_H_ReadHumidity+0xce>
        : ( tmp_f <    0.0f ) ?    0.0f
 800110a:	eddf 7a04 	vldr	s15, [pc, #16]	; 800111c <HTS221_H_ReadHumidity+0xdc>
}
 800110e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001112:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001116:	b002      	add	sp, #8
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800111c:	447a0000 	.word	0x447a0000
 8001120:	00000000 	.word	0x00000000

08001124 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001128:	b082      	sub	sp, #8
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800112a:	fa5f f880 	uxtb.w	r8, r0
 800112e:	2302      	movs	r3, #2
 8001130:	aa01      	add	r2, sp, #4
 8001132:	21b2      	movs	r1, #178	; 0xb2
 8001134:	4640      	mov	r0, r8
 8001136:	f001 f8d3 	bl	80022e0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800113a:	2135      	movs	r1, #53	; 0x35
 800113c:	4640      	mov	r0, r8
 800113e:	f001 f8ad 	bl	800229c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001142:	0203      	lsls	r3, r0, #8
 8001144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001148:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
  T0_degC = T0_degC_x8_u16 >> 3;
 800114c:	431e      	orrs	r6, r3
 800114e:	08f6      	lsrs	r6, r6, #3
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001150:	0180      	lsls	r0, r0, #6
 8001152:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8001156:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T1_degC = T1_degC_x8_u16 >> 3;
 800115a:	4305      	orrs	r5, r0
 800115c:	08ed      	lsrs	r5, r5, #3

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800115e:	2304      	movs	r3, #4
 8001160:	eb0d 0203 	add.w	r2, sp, r3
 8001164:	21bc      	movs	r1, #188	; 0xbc
 8001166:	4640      	mov	r0, r8
 8001168:	f001 f8ba 	bl	80022e0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800116c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001170:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8001174:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8001178:	b23f      	sxth	r7, r7
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800117a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800117e:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8001182:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001186:	b224      	sxth	r4, r4

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001188:	2302      	movs	r3, #2
 800118a:	aa01      	add	r2, sp, #4
 800118c:	21aa      	movs	r1, #170	; 0xaa
 800118e:	4640      	mov	r0, r8
 8001190:	f001 f8a6 	bl	80022e0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001194:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001198:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800119c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	1bdb      	subs	r3, r3, r7
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	1bad      	subs	r5, r5, r6
 80011ae:	ee07 5a10 	vmov	s14, r5
 80011b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	1be4      	subs	r4, r4, r7
 80011bc:	ee07 4a10 	vmov	s14, r4
 80011c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011c8:	ee07 6a90 	vmov	s15, r6
 80011cc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 80011d0:	ee36 0a80 	vadd.f32	s0, s13, s0
 80011d4:	b002      	add	sp, #8
 80011d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080011dc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80011de:	b2c5      	uxtb	r5, r0
 80011e0:	2128      	movs	r1, #40	; 0x28
 80011e2:	4628      	mov	r0, r5
 80011e4:	f001 f85a 	bl	800229c <SENSOR_IO_Read>
 80011e8:	4604      	mov	r4, r0
 80011ea:	2129      	movs	r1, #41	; 0x29
 80011ec:	4628      	mov	r0, r5
 80011ee:	f001 f855 	bl	800229c <SENSOR_IO_Read>
 80011f2:	4606      	mov	r6, r0
 80011f4:	212a      	movs	r1, #42	; 0x2a
 80011f6:	4628      	mov	r0, r5
 80011f8:	f001 f850 	bl	800229c <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80011fc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8001200:	ea44 4000 	orr.w	r0, r4, r0, lsl #16

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    tmp |= 0xFF000000;
 8001208:	bf18      	it	ne
 800120a:	f040 407f 	orrne.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800120e:	2364      	movs	r3, #100	; 0x64
 8001210:	fb03 f000 	mul.w	r0, r3, r0
 8001214:	2800      	cmp	r0, #0
 8001216:	bfb8      	it	lt
 8001218:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800121c:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 800121e:	ee07 0a90 	vmov	s15, r0
 8001222:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001226:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001230 <LPS22HB_P_ReadPressure+0x54>
 800122a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800122e:	bd70      	pop	{r4, r5, r6, pc}
 8001230:	42c80000 	.word	0x42c80000

08001234 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001234:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001236:	b2c4      	uxtb	r4, r0
 8001238:	211a      	movs	r1, #26
 800123a:	4620      	mov	r0, r4
 800123c:	f001 f82e 	bl	800229c <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001240:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	211a      	movs	r1, #26
 800124a:	4620      	mov	r0, r4
 800124c:	f001 f808 	bl	8002260 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001250:	2110      	movs	r1, #16
 8001252:	4620      	mov	r0, r4
 8001254:	f001 f822 	bl	800229c <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001258:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800125c:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8001260:	2110      	movs	r1, #16
 8001262:	4620      	mov	r0, r4
 8001264:	f000 fffc 	bl	8002260 <SENSOR_IO_Write>
}  
 8001268:	bd10      	pop	{r4, pc}

0800126a <LPS22HB_P_Init>:
{
 800126a:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 800126c:	f7ff ffe2 	bl	8001234 <LPS22HB_Init>
}
 8001270:	bd08      	pop	{r3, pc}

08001272 <LPS22HB_P_ReadID>:
{  
 8001272:	b510      	push	{r4, lr}
 8001274:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8001276:	f000 ffeb 	bl	8002250 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800127a:	210f      	movs	r1, #15
 800127c:	b2e0      	uxtb	r0, r4
 800127e:	f001 f80d 	bl	800229c <SENSOR_IO_Read>
}
 8001282:	bd10      	pop	{r4, pc}

08001284 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001288:	b087      	sub	sp, #28
 800128a:	469b      	mov	fp, r3
 800128c:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
		
    if (function_char < ' ') {
 8001290:	281f      	cmp	r0, #31
        Character = 0;
    } else {
        function_char -= 32;
 8001292:	bf84      	itt	hi
 8001294:	3820      	subhi	r0, #32
 8001296:	b2c0      	uxtbhi	r0, r0
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001298:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800129c:	4829      	ldr	r0, [pc, #164]	; (8001344 <ILI9341_Draw_Char+0xc0>)
 800129e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80012a2:	3801      	subs	r0, #1
 80012a4:	f10d 0810 	add.w	r8, sp, #16
{
 80012a8:	4643      	mov	r3, r8
		{
		temp[k] = font[function_char][k];
 80012aa:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80012ae:	f803 4b01 	strb.w	r4, [r3], #1
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80012b2:	f10d 0416 	add.w	r4, sp, #22
 80012b6:	42a3      	cmp	r3, r4
 80012b8:	d1f7      	bne.n	80012aa <ILI9341_Draw_Char+0x26>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80012ba:	fa1f fa81 	uxth.w	sl, r1
 80012be:	b290      	uxth	r0, r2
 80012c0:	9003      	str	r0, [sp, #12]
 80012c2:	00fb      	lsls	r3, r7, #3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80012ca:	0052      	lsls	r2, r2, #1
 80012cc:	b292      	uxth	r2, r2
 80012ce:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80012d2:	9100      	str	r1, [sp, #0]
 80012d4:	4601      	mov	r1, r0
 80012d6:	4650      	mov	r0, sl
 80012d8:	f000 fb84 	bl	80019e4 <ILI9341_Draw_Rectangle>
 80012dc:	46d1      	mov	r9, sl
 80012de:	e029      	b.n	8001334 <ILI9341_Draw_Char+0xb0>
    for (j=0; j<CHAR_WIDTH; j++) {
        for (i=0; i<CHAR_HEIGHT; i++) {
            if (temp[j] & (1<<i)) {			
							if(Size == 1)
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80012e0:	465a      	mov	r2, fp
 80012e2:	4629      	mov	r1, r5
 80012e4:	4650      	mov	r0, sl
 80012e6:	f000 fab5 	bl	8001854 <ILI9341_Draw_Pixel>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80012ea:	3601      	adds	r6, #1
 80012ec:	3501      	adds	r5, #1
 80012ee:	b2ad      	uxth	r5, r5
 80012f0:	443c      	add	r4, r7
 80012f2:	b2a4      	uxth	r4, r4
 80012f4:	2e08      	cmp	r6, #8
 80012f6:	d010      	beq.n	800131a <ILI9341_Draw_Char+0x96>
            if (temp[j] & (1<<i)) {			
 80012f8:	f898 3000 	ldrb.w	r3, [r8]
 80012fc:	4133      	asrs	r3, r6
 80012fe:	f013 0f01 	tst.w	r3, #1
 8001302:	d0f2      	beq.n	80012ea <ILI9341_Draw_Char+0x66>
							if(Size == 1)
 8001304:	2f01      	cmp	r7, #1
 8001306:	d0eb      	beq.n	80012e0 <ILI9341_Draw_Char+0x5c>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001308:	f8cd b000 	str.w	fp, [sp]
 800130c:	463b      	mov	r3, r7
 800130e:	463a      	mov	r2, r7
 8001310:	4621      	mov	r1, r4
 8001312:	4648      	mov	r0, r9
 8001314:	f000 fb66 	bl	80019e4 <ILI9341_Draw_Rectangle>
 8001318:	e7e7      	b.n	80012ea <ILI9341_Draw_Char+0x66>
    for (j=0; j<CHAR_WIDTH; j++) {
 800131a:	f10a 0a01 	add.w	sl, sl, #1
 800131e:	fa1f fa8a 	uxth.w	sl, sl
 8001322:	44b9      	add	r9, r7
 8001324:	fa1f f989 	uxth.w	r9, r9
 8001328:	f108 0801 	add.w	r8, r8, #1
 800132c:	f10d 0316 	add.w	r3, sp, #22
 8001330:	4598      	cmp	r8, r3
 8001332:	d003      	beq.n	800133c <ILI9341_Draw_Char+0xb8>
{
 8001334:	9d03      	ldr	r5, [sp, #12]
 8001336:	462c      	mov	r4, r5
 8001338:	2600      	movs	r6, #0
 800133a:	e7dd      	b.n	80012f8 <ILI9341_Draw_Char+0x74>
							}
            }						
        }
    }
}
 800133c:	b007      	add	sp, #28
 800133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001342:	bf00      	nop
 8001344:	0800a0a8 	.word	0x0800a0a8

08001348 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	4605      	mov	r5, r0
 8001350:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8001354:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    while (*Text) {
 8001358:	7800      	ldrb	r0, [r0, #0]
 800135a:	b1a8      	cbz	r0, 8001388 <ILI9341_Draw_Text+0x40>
 800135c:	460c      	mov	r4, r1
 800135e:	4617      	mov	r7, r2
 8001360:	4698      	mov	r8, r3
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
        X += CHAR_WIDTH*Size;
 8001362:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 8001366:	0076      	lsls	r6, r6, #1
 8001368:	b2f6      	uxtb	r6, r6
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800136a:	f8cd a004 	str.w	sl, [sp, #4]
 800136e:	f8cd 9000 	str.w	r9, [sp]
 8001372:	4643      	mov	r3, r8
 8001374:	463a      	mov	r2, r7
 8001376:	4621      	mov	r1, r4
 8001378:	f7ff ff84 	bl	8001284 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800137c:	4434      	add	r4, r6
 800137e:	b2e4      	uxtb	r4, r4
    while (*Text) {
 8001380:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001384:	2800      	cmp	r0, #0
 8001386:	d1f0      	bne.n	800136a <ILI9341_Draw_Text+0x22>
    }
}
 8001388:	b002      	add	sp, #8
 800138a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800138e <ILI9341_SPI_Init>:
volatile uint16_t LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
extern SPI_HandleTypeDef hspi1;
/* Initialize SPI */

void ILI9341_SPI_Init(void)
{
 800138e:	b508      	push	{r3, lr}
  //MX_SPI1_Init();                                             //SPI INIT
//MX_GPIO_Init();                                             //GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET); //CS OFF
 8001390:	2200      	movs	r2, #0
 8001392:	2104      	movs	r1, #4
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f001 fd30 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800139c:	bd08      	pop	{r3, pc}
	...

080013a0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80013a0:	b500      	push	{lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	f88d 0007 	strb.w	r0, [sp, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80013a8:	2301      	movs	r3, #1
 80013aa:	461a      	mov	r2, r3
 80013ac:	f10d 0107 	add.w	r1, sp, #7
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <ILI9341_SPI_Send+0x1c>)
 80013b2:	f003 fb4d 	bl	8004a50 <HAL_SPI_Transmit>
}
 80013b6:	b003      	add	sp, #12
 80013b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013bc:	20000284 	.word	0x20000284

080013c0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4604      	mov	r4, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2104      	movs	r1, #4
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f001 fd16 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f001 fd0f 	bl	8002dfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ffde 	bl	80013a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2104      	movs	r1, #4
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f001 fd06 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80013f0:	bd10      	pop	{r4, pc}

080013f2 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f001 fcfc 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2104      	movs	r1, #4
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f001 fcf6 	bl	8002dfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ffc5 	bl	80013a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2104      	movs	r1, #4
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f001 fced 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8001422:	bd10      	pop	{r4, pc}

08001424 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	4607      	mov	r7, r0
 8001428:	460d      	mov	r5, r1
 800142a:	4616      	mov	r6, r2
 800142c:	461c      	mov	r4, r3
ILI9341_Write_Command(0x2A);
 800142e:	202a      	movs	r0, #42	; 0x2a
 8001430:	f7ff ffc6 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001434:	0a38      	lsrs	r0, r7, #8
 8001436:	f7ff ffdc 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800143a:	b2f8      	uxtb	r0, r7
 800143c:	f7ff ffd9 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001440:	0a30      	lsrs	r0, r6, #8
 8001442:	f7ff ffd6 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001446:	b2f0      	uxtb	r0, r6
 8001448:	f7ff ffd3 	bl	80013f2 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800144c:	202b      	movs	r0, #43	; 0x2b
 800144e:	f7ff ffb7 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001452:	0a28      	lsrs	r0, r5, #8
 8001454:	f7ff ffcd 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001458:	b2e8      	uxtb	r0, r5
 800145a:	f7ff ffca 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800145e:	0a20      	lsrs	r0, r4, #8
 8001460:	f7ff ffc7 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001464:	b2e0      	uxtb	r0, r4
 8001466:	f7ff ffc4 	bl	80013f2 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800146a:	202c      	movs	r0, #44	; 0x2c
 800146c:	f7ff ffa8 	bl	80013c0 <ILI9341_Write_Command>
}
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001472 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001472:	b508      	push	{r3, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f001 fcbe 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001480:	20c8      	movs	r0, #200	; 0xc8
 8001482:	f001 fa99 	bl	80029b8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2104      	movs	r1, #4
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f001 fcb5 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001492:	20c8      	movs	r0, #200	; 0xc8
 8001494:	f001 fa90 	bl	80029b8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2110      	movs	r1, #16
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 fcac 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80014a4:	bd08      	pop	{r3, pc}
	...

080014a8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4604      	mov	r4, r0

uint8_t screen_rotation = Rotation;

ILI9341_Write_Command(0x36);
 80014ac:	2036      	movs	r0, #54	; 0x36
 80014ae:	f7ff ff87 	bl	80013c0 <ILI9341_Write_Command>
HAL_Delay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f001 fa80 	bl	80029b8 <HAL_Delay>

switch(screen_rotation) 
 80014b8:	2c03      	cmp	r4, #3
 80014ba:	d80d      	bhi.n	80014d8 <ILI9341_Set_Rotation+0x30>
 80014bc:	e8df f004 	tbb	[pc, r4]
 80014c0:	23180d02 	.word	0x23180d02
  {
    case SCREEN_VERTICAL_1:
      ILI9341_Write_Data(0x40|0x08);
 80014c4:	2048      	movs	r0, #72	; 0x48
 80014c6:	f7ff ff94 	bl	80013f2 <ILI9341_Write_Data>
      LCD_WIDTH = 240;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <ILI9341_Set_Rotation+0x74>)
 80014cc:	22f0      	movs	r2, #240	; 0xf0
 80014ce:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <ILI9341_Set_Rotation+0x78>)
 80014d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014d6:	801a      	strh	r2, [r3, #0]
      break;
    default:
      //EXIT IF SCREEN ROTATION NOT VALID!
      break;
  }
}
 80014d8:	bd10      	pop	{r4, pc}
      ILI9341_Write_Data(0x20|0x08);
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f7ff ff89 	bl	80013f2 <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <ILI9341_Set_Rotation+0x74>)
 80014e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014e6:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <ILI9341_Set_Rotation+0x78>)
 80014ea:	22f0      	movs	r2, #240	; 0xf0
 80014ec:	801a      	strh	r2, [r3, #0]
      break;
 80014ee:	e7f3      	b.n	80014d8 <ILI9341_Set_Rotation+0x30>
      ILI9341_Write_Data(0x80|0x08);
 80014f0:	2088      	movs	r0, #136	; 0x88
 80014f2:	f7ff ff7e 	bl	80013f2 <ILI9341_Write_Data>
      LCD_WIDTH  = 240;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <ILI9341_Set_Rotation+0x74>)
 80014f8:	22f0      	movs	r2, #240	; 0xf0
 80014fa:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 320;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <ILI9341_Set_Rotation+0x78>)
 80014fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001502:	801a      	strh	r2, [r3, #0]
      break;
 8001504:	e7e8      	b.n	80014d8 <ILI9341_Set_Rotation+0x30>
      ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001506:	20e8      	movs	r0, #232	; 0xe8
 8001508:	f7ff ff73 	bl	80013f2 <ILI9341_Write_Data>
      LCD_WIDTH  = 320;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <ILI9341_Set_Rotation+0x74>)
 800150e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001512:	801a      	strh	r2, [r3, #0]
      LCD_HEIGHT = 240;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <ILI9341_Set_Rotation+0x78>)
 8001516:	22f0      	movs	r2, #240	; 0xf0
 8001518:	801a      	strh	r2, [r3, #0]
}
 800151a:	e7dd      	b.n	80014d8 <ILI9341_Set_Rotation+0x30>
 800151c:	2000002a 	.word	0x2000002a
 8001520:	20000028 	.word	0x20000028

08001524 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001524:	b508      	push	{r3, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2110      	movs	r1, #16
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 fc65 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8001532:	bd08      	pop	{r3, pc}

08001534 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001534:	b508      	push	{r3, lr}

ILI9341_Enable();
 8001536:	f7ff fff5 	bl	8001524 <ILI9341_Enable>
ILI9341_SPI_Init();
 800153a:	f7ff ff28 	bl	800138e <ILI9341_SPI_Init>
ILI9341_Reset();
 800153e:	f7ff ff98 	bl	8001472 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff ff3c 	bl	80013c0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f001 fa34 	bl	80029b8 <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001550:	20cb      	movs	r0, #203	; 0xcb
 8001552:	f7ff ff35 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001556:	2039      	movs	r0, #57	; 0x39
 8001558:	f7ff ff4b 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800155c:	202c      	movs	r0, #44	; 0x2c
 800155e:	f7ff ff48 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ff45 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001568:	2034      	movs	r0, #52	; 0x34
 800156a:	f7ff ff42 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff ff3f 	bl	80013f2 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001574:	20cf      	movs	r0, #207	; 0xcf
 8001576:	f7ff ff23 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff ff39 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001580:	20c1      	movs	r0, #193	; 0xc1
 8001582:	f7ff ff36 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001586:	2030      	movs	r0, #48	; 0x30
 8001588:	f7ff ff33 	bl	80013f2 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800158c:	20e8      	movs	r0, #232	; 0xe8
 800158e:	f7ff ff17 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001592:	2085      	movs	r0, #133	; 0x85
 8001594:	f7ff ff2d 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff ff2a 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f7ff ff27 	bl	80013f2 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80015a4:	20ea      	movs	r0, #234	; 0xea
 80015a6:	f7ff ff0b 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff ff21 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff1e 	bl	80013f2 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80015b6:	20ed      	movs	r0, #237	; 0xed
 80015b8:	f7ff ff02 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80015bc:	2064      	movs	r0, #100	; 0x64
 80015be:	f7ff ff18 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f7ff ff15 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80015c8:	2012      	movs	r0, #18
 80015ca:	f7ff ff12 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80015ce:	2081      	movs	r0, #129	; 0x81
 80015d0:	f7ff ff0f 	bl	80013f2 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80015d4:	20f7      	movs	r0, #247	; 0xf7
 80015d6:	f7ff fef3 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80015da:	2020      	movs	r0, #32
 80015dc:	f7ff ff09 	bl	80013f2 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80015e0:	20c0      	movs	r0, #192	; 0xc0
 80015e2:	f7ff feed 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80015e6:	2023      	movs	r0, #35	; 0x23
 80015e8:	f7ff ff03 	bl	80013f2 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80015ec:	20c1      	movs	r0, #193	; 0xc1
 80015ee:	f7ff fee7 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80015f2:	2010      	movs	r0, #16
 80015f4:	f7ff fefd 	bl	80013f2 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80015f8:	20c5      	movs	r0, #197	; 0xc5
 80015fa:	f7ff fee1 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80015fe:	203e      	movs	r0, #62	; 0x3e
 8001600:	f7ff fef7 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001604:	2028      	movs	r0, #40	; 0x28
 8001606:	f7ff fef4 	bl	80013f2 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800160a:	20c7      	movs	r0, #199	; 0xc7
 800160c:	f7ff fed8 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001610:	2086      	movs	r0, #134	; 0x86
 8001612:	f7ff feee 	bl	80013f2 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001616:	2036      	movs	r0, #54	; 0x36
 8001618:	f7ff fed2 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800161c:	2048      	movs	r0, #72	; 0x48
 800161e:	f7ff fee8 	bl	80013f2 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001622:	203a      	movs	r0, #58	; 0x3a
 8001624:	f7ff fecc 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001628:	2055      	movs	r0, #85	; 0x55
 800162a:	f7ff fee2 	bl	80013f2 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800162e:	20b1      	movs	r0, #177	; 0xb1
 8001630:	f7ff fec6 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fedc 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800163a:	2018      	movs	r0, #24
 800163c:	f7ff fed9 	bl	80013f2 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001640:	20b6      	movs	r0, #182	; 0xb6
 8001642:	f7ff febd 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001646:	2008      	movs	r0, #8
 8001648:	f7ff fed3 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800164c:	2082      	movs	r0, #130	; 0x82
 800164e:	f7ff fed0 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001652:	2027      	movs	r0, #39	; 0x27
 8001654:	f7ff fecd 	bl	80013f2 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001658:	20f2      	movs	r0, #242	; 0xf2
 800165a:	f7ff feb1 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fec7 	bl	80013f2 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f7ff feab 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fec1 	bl	80013f2 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001670:	20e0      	movs	r0, #224	; 0xe0
 8001672:	f7ff fea5 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001676:	200f      	movs	r0, #15
 8001678:	f7ff febb 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800167c:	2031      	movs	r0, #49	; 0x31
 800167e:	f7ff feb8 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001682:	202b      	movs	r0, #43	; 0x2b
 8001684:	f7ff feb5 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001688:	200c      	movs	r0, #12
 800168a:	f7ff feb2 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800168e:	200e      	movs	r0, #14
 8001690:	f7ff feaf 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001694:	2008      	movs	r0, #8
 8001696:	f7ff feac 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800169a:	204e      	movs	r0, #78	; 0x4e
 800169c:	f7ff fea9 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80016a0:	20f1      	movs	r0, #241	; 0xf1
 80016a2:	f7ff fea6 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80016a6:	2037      	movs	r0, #55	; 0x37
 80016a8:	f7ff fea3 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016ac:	2007      	movs	r0, #7
 80016ae:	f7ff fea0 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80016b2:	2010      	movs	r0, #16
 80016b4:	f7ff fe9d 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff fe9a 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016be:	200e      	movs	r0, #14
 80016c0:	f7ff fe97 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80016c4:	2009      	movs	r0, #9
 80016c6:	f7ff fe94 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fe91 	bl	80013f2 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80016d0:	20e1      	movs	r0, #225	; 0xe1
 80016d2:	f7ff fe75 	bl	80013c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fe8b 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016dc:	200e      	movs	r0, #14
 80016de:	f7ff fe88 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80016e2:	2014      	movs	r0, #20
 80016e4:	f7ff fe85 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f7ff fe82 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80016ee:	2011      	movs	r0, #17
 80016f0:	f7ff fe7f 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016f4:	2007      	movs	r0, #7
 80016f6:	f7ff fe7c 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80016fa:	2031      	movs	r0, #49	; 0x31
 80016fc:	f7ff fe79 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001700:	20c1      	movs	r0, #193	; 0xc1
 8001702:	f7ff fe76 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001706:	2048      	movs	r0, #72	; 0x48
 8001708:	f7ff fe73 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800170c:	2008      	movs	r0, #8
 800170e:	f7ff fe70 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001712:	200f      	movs	r0, #15
 8001714:	f7ff fe6d 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001718:	200c      	movs	r0, #12
 800171a:	f7ff fe6a 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800171e:	2031      	movs	r0, #49	; 0x31
 8001720:	f7ff fe67 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001724:	2036      	movs	r0, #54	; 0x36
 8001726:	f7ff fe64 	bl	80013f2 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800172a:	200f      	movs	r0, #15
 800172c:	f7ff fe61 	bl	80013f2 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001730:	2011      	movs	r0, #17
 8001732:	f7ff fe45 	bl	80013c0 <ILI9341_Write_Command>
HAL_Delay(120);
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f001 f93e 	bl	80029b8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800173c:	2029      	movs	r0, #41	; 0x29
 800173e:	f7ff fe3f 	bl	80013c0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff feb0 	bl	80014a8 <ILI9341_Set_Rotation>
}
 8001748:	bd08      	pop	{r3, pc}
	...

0800174c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800174c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001750:	af00      	add	r7, sp, #0
 8001752:	4606      	mov	r6, r0
//SENDS COLOUR
uint32_t Buffer_Size = 0;
if((Size*2) < BURST_MAX_SIZE)
 8001754:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8001758:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 800175c:	d22e      	bcs.n	80017bc <ILI9341_Draw_Colour_Burst+0x70>
 800175e:	460c      	mov	r4, r1
else
{
  Buffer_Size = BURST_MAX_SIZE;
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f001 fb47 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2104      	movs	r1, #4
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f001 fb41 	bl	8002dfc <HAL_GPIO_WritePin>

unsigned char chifted =   Colour>>8;;
 800177a:	0a32      	lsrs	r2, r6, #8
unsigned char burst_buffer[Buffer_Size];
 800177c:	1de3      	adds	r3, r4, #7
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	ebad 0d03 	sub.w	sp, sp, r3
 8001786:	466d      	mov	r5, sp
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001788:	bb54      	cbnz	r4, 80017e0 <ILI9341_Draw_Colour_Burst+0x94>
    burst_buffer[j] =   chifted;
    burst_buffer[j+1] = Colour;
  }

uint32_t Sending_Size = Size*2;
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800178a:	f04f 0900 	mov.w	r9, #0
 800178e:	46c8      	mov	r8, r9
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;

if(Sending_in_Block != 0)
 8001790:	e001      	b.n	8001796 <ILI9341_Draw_Colour_Burst+0x4a>
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001792:	fbb8 f8f4 	udiv	r8, r8, r4
{
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001796:	f1b8 0f00 	cmp.w	r8, #0
 800179a:	d02e      	beq.n	80017fa <ILI9341_Draw_Colour_Burst+0xae>
 800179c:	2600      	movs	r6, #0
    {
    HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 800179e:	fa1f fb84 	uxth.w	fp, r4
 80017a2:	f8df a078 	ldr.w	sl, [pc, #120]	; 800181c <ILI9341_Draw_Colour_Burst+0xd0>
 80017a6:	240a      	movs	r4, #10
 80017a8:	4623      	mov	r3, r4
 80017aa:	465a      	mov	r2, fp
 80017ac:	4629      	mov	r1, r5
 80017ae:	4650      	mov	r0, sl
 80017b0:	f003 f94e 	bl	8004a50 <HAL_SPI_Transmit>
  for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80017b4:	3601      	adds	r6, #1
 80017b6:	4546      	cmp	r6, r8
 80017b8:	d1f6      	bne.n	80017a8 <ILI9341_Draw_Colour_Burst+0x5c>
 80017ba:	e01e      	b.n	80017fa <ILI9341_Draw_Colour_Burst+0xae>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f001 fb19 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2104      	movs	r1, #4
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f001 fb13 	bl	8002dfc <HAL_GPIO_WritePin>
unsigned char chifted =   Colour>>8;;
 80017d6:	0a32      	lsrs	r2, r6, #8
unsigned char burst_buffer[Buffer_Size];
 80017d8:	b0fe      	sub	sp, #504	; 0x1f8
 80017da:	466d      	mov	r5, sp
  Buffer_Size = BURST_MAX_SIZE;
 80017dc:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80017e0:	2300      	movs	r3, #0
    burst_buffer[j+1] = Colour;
 80017e2:	1c69      	adds	r1, r5, #1
    burst_buffer[j] =   chifted;
 80017e4:	54ea      	strb	r2, [r5, r3]
    burst_buffer[j+1] = Colour;
 80017e6:	54ce      	strb	r6, [r1, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80017e8:	3302      	adds	r3, #2
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	d3fa      	bcc.n	80017e4 <ILI9341_Draw_Colour_Burst+0x98>
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80017ee:	fbb8 f9f4 	udiv	r9, r8, r4
 80017f2:	fb04 8919 	mls	r9, r4, r9, r8
if(Sending_in_Block != 0)
 80017f6:	45a0      	cmp	r8, r4
 80017f8:	d2cb      	bcs.n	8001792 <ILI9341_Draw_Colour_Burst+0x46>
    }
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80017fa:	230a      	movs	r3, #10
 80017fc:	fa1f f289 	uxth.w	r2, r9
 8001800:	4629      	mov	r1, r5
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <ILI9341_Draw_Colour_Burst+0xd0>)
 8001804:	f003 f924 	bl	8004a50 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2104      	movs	r1, #4
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f001 faf4 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800181a:	bf00      	nop
 800181c:	20000284 	.word	0x20000284

08001820 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	4604      	mov	r4, r0
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8001824:	4e09      	ldr	r6, [pc, #36]	; (800184c <ILI9341_Fill_Screen+0x2c>)
 8001826:	8832      	ldrh	r2, [r6, #0]
 8001828:	4d09      	ldr	r5, [pc, #36]	; (8001850 <ILI9341_Fill_Screen+0x30>)
 800182a:	882b      	ldrh	r3, [r5, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	b292      	uxth	r2, r2
 8001830:	2100      	movs	r1, #0
 8001832:	4608      	mov	r0, r1
 8001834:	f7ff fdf6 	bl	8001424 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8001838:	8833      	ldrh	r3, [r6, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	8829      	ldrh	r1, [r5, #0]
 800183e:	b289      	uxth	r1, r1
 8001840:	fb03 f101 	mul.w	r1, r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff ff81 	bl	800174c <ILI9341_Draw_Colour_Burst>
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	2000002a 	.word	0x2000002a
 8001850:	20000028 	.word	0x20000028

08001854 <ILI9341_Draw_Pixel>:
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 8001854:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <ILI9341_Draw_Pixel+0x184>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4283      	cmp	r3, r0
 800185c:	f240 80ba 	bls.w	80019d4 <ILI9341_Draw_Pixel+0x180>
{
 8001860:	b570      	push	{r4, r5, r6, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	4616      	mov	r6, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return; //OUT OF BOUNDS!
 800186a:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <ILI9341_Draw_Pixel+0x188>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	428b      	cmp	r3, r1
 8001872:	d801      	bhi.n	8001878 <ILI9341_Draw_Pixel+0x24>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);

}
 8001874:	b004      	add	sp, #16
 8001876:	bd70      	pop	{r4, r5, r6, pc}
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f001 fabb 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f001 fab5 	bl	8002dfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001892:	202a      	movs	r0, #42	; 0x2a
 8001894:	f7ff fd84 	bl	80013a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f001 faab 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2104      	movs	r1, #4
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f001 faa5 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2104      	movs	r1, #4
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f001 fa9f 	bl	8002dfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80018be:	0a23      	lsrs	r3, r4, #8
 80018c0:	f88d 300c 	strb.w	r3, [sp, #12]
 80018c4:	b2e3      	uxtb	r3, r4
 80018c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80018ca:	3401      	adds	r4, #1
 80018cc:	1224      	asrs	r4, r4, #8
 80018ce:	f88d 400e 	strb.w	r4, [sp, #14]
 80018d2:	3301      	adds	r3, #1
 80018d4:	f88d 300f 	strb.w	r3, [sp, #15]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80018d8:	4c41      	ldr	r4, [pc, #260]	; (80019e0 <ILI9341_Draw_Pixel+0x18c>)
 80018da:	2301      	movs	r3, #1
 80018dc:	2204      	movs	r2, #4
 80018de:	a903      	add	r1, sp, #12
 80018e0:	4620      	mov	r0, r4
 80018e2:	f003 f8b5 	bl	8004a50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2104      	movs	r1, #4
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f001 fa85 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f001 fa7e 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2104      	movs	r1, #4
 8001904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001908:	f001 fa78 	bl	8002dfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800190c:	202b      	movs	r0, #43	; 0x2b
 800190e:	f7ff fd47 	bl	80013a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191c:	f001 fa6e 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2104      	movs	r1, #4
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f001 fa68 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2104      	movs	r1, #4
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f001 fa62 	bl	8002dfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001938:	0a2b      	lsrs	r3, r5, #8
 800193a:	f88d 3008 	strb.w	r3, [sp, #8]
 800193e:	b2eb      	uxtb	r3, r5
 8001940:	f88d 3009 	strb.w	r3, [sp, #9]
 8001944:	3501      	adds	r5, #1
 8001946:	122d      	asrs	r5, r5, #8
 8001948:	f88d 500a 	strb.w	r5, [sp, #10]
 800194c:	3301      	adds	r3, #1
 800194e:	f88d 300b 	strb.w	r3, [sp, #11]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001952:	2301      	movs	r3, #1
 8001954:	2204      	movs	r2, #4
 8001956:	a902      	add	r1, sp, #8
 8001958:	4620      	mov	r0, r4
 800195a:	f003 f879 	bl	8004a50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2104      	movs	r1, #4
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f001 fa49 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f001 fa42 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2104      	movs	r1, #4
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f001 fa3c 	bl	8002dfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001984:	202c      	movs	r0, #44	; 0x2c
 8001986:	f7ff fd0b 	bl	80013a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 fa32 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2104      	movs	r1, #4
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f001 fa2c 	bl	8002dfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2104      	movs	r1, #4
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f001 fa26 	bl	8002dfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80019b0:	0a33      	lsrs	r3, r6, #8
 80019b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80019b6:	f88d 6005 	strb.w	r6, [sp, #5]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80019ba:	2301      	movs	r3, #1
 80019bc:	2202      	movs	r2, #2
 80019be:	a901      	add	r1, sp, #4
 80019c0:	4620      	mov	r0, r4
 80019c2:	f003 f845 	bl	8004a50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2104      	movs	r1, #4
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f001 fa15 	bl	8002dfc <HAL_GPIO_WritePin>
 80019d2:	e74f      	b.n	8001874 <ILI9341_Draw_Pixel+0x20>
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000002a 	.word	0x2000002a
 80019dc:	20000028 	.word	0x20000028
 80019e0:	20000284 	.word	0x20000284

080019e4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	461c      	mov	r4, r3
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <ILI9341_Draw_Rectangle+0x60>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4283      	cmp	r3, r0
 80019f0:	d927      	bls.n	8001a42 <ILI9341_Draw_Rectangle+0x5e>
 80019f2:	4615      	mov	r5, r2
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <ILI9341_Draw_Rectangle+0x64>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	428b      	cmp	r3, r1
 80019fc:	d921      	bls.n	8001a42 <ILI9341_Draw_Rectangle+0x5e>
if((X+Width-1)>=LCD_WIDTH)
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <ILI9341_Draw_Rectangle+0x60>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1882      	adds	r2, r0, r2
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dd03      	ble.n	8001a12 <ILI9341_Draw_Rectangle+0x2e>
  {
    Width=LCD_WIDTH-X;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <ILI9341_Draw_Rectangle+0x60>)
 8001a0c:	881d      	ldrh	r5, [r3, #0]
 8001a0e:	1a2d      	subs	r5, r5, r0
 8001a10:	b2ad      	uxth	r5, r5
  }
if((Y+Height-1)>=LCD_HEIGHT)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <ILI9341_Draw_Rectangle+0x64>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	190a      	adds	r2, r1, r4
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dd03      	ble.n	8001a26 <ILI9341_Draw_Rectangle+0x42>
  {
    Height=LCD_HEIGHT-Y;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <ILI9341_Draw_Rectangle+0x64>)
 8001a20:	881c      	ldrh	r4, [r3, #0]
 8001a22:	1a64      	subs	r4, r4, r1
 8001a24:	b2a4      	uxth	r4, r4
  }
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001a26:	1e4b      	subs	r3, r1, #1
 8001a28:	4423      	add	r3, r4
 8001a2a:	1e42      	subs	r2, r0, #1
 8001a2c:	442a      	add	r2, r5
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f7ff fcf7 	bl	8001424 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001a36:	fb05 f104 	mul.w	r1, r5, r4
 8001a3a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001a3e:	f7ff fe85 	bl	800174c <ILI9341_Draw_Colour_Burst>
}
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	2000002a 	.word	0x2000002a
 8001a48:	20000028 	.word	0x20000028

08001a4c <Key_init>:
uint8_t Btn_read(GPIO_TypeDef* gpio, uint16_t pin) {
  return (gpio->IDR & (1 << pin)) != 0;
}

void Key_init(Key* keys, const Key_PinConfig* configs, uint32_t len) {
  while (len-- > 0) {
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	b15a      	cbz	r2, 8001a68 <Key_init+0x1c>
 8001a50:	3018      	adds	r0, #24
    keys->Config = configs;
    keys->State = Key_State_None;
 8001a52:	2203      	movs	r2, #3
    keys->Config = configs;
 8001a54:	f840 1c18 	str.w	r1, [r0, #-24]
    keys->State = Key_State_None;
 8001a58:	f800 2c04 	strb.w	r2, [r0, #-4]
    keys++;
    configs++;
 8001a5c:	3108      	adds	r1, #8
  while (len-- > 0) {
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	3018      	adds	r0, #24
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d1f5      	bne.n	8001a54 <Key_init+0x8>
  }
}
 8001a68:	4770      	bx	lr

08001a6a <Key_handle>:

void Key_handle(Key* keys, uint32_t len) {
  while (len-- > 0) {
 8001a6a:	b329      	cbz	r1, 8001ab8 <Key_handle+0x4e>
void Key_handle(Key* keys, uint32_t len) {
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6e:	4604      	mov	r4, r0
 8001a70:	1e4e      	subs	r6, r1, #1

    if (!keys->Handled && keys->Callbacks.fn[keys->State] != NULL) {
      keys->Handled = keys->Callbacks.fn[keys->State](keys, keys->State);
    }
    else if (keys->State == Key_State_None) {
      keys->Handled = 0;
 8001a72:	2700      	movs	r7, #0
 8001a74:	e007      	b.n	8001a86 <Key_handle+0x1c>
    else if (keys->State == Key_State_None) {
 8001a76:	2903      	cmp	r1, #3
      keys->Handled = 0;
 8001a78:	bf08      	it	eq
 8001a7a:	7567      	strbeq	r7, [r4, #21]
    }

    keys++;
 8001a7c:	3418      	adds	r4, #24
  while (len-- > 0) {
 8001a7e:	3e01      	subs	r6, #1
 8001a80:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001a84:	d017      	beq.n	8001ab6 <Key_handle+0x4c>
    keys->State = ((keys->State << 1) | HAL_GPIO_ReadPin(keys->Config->GPIO, keys->Config->Pin)) & 3;
 8001a86:	7d25      	ldrb	r5, [r4, #20]
 8001a88:	006d      	lsls	r5, r5, #1
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	8899      	ldrh	r1, [r3, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	f001 f9ae 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001a94:	ea40 0105 	orr.w	r1, r0, r5
 8001a98:	f001 0103 	and.w	r1, r1, #3
 8001a9c:	7521      	strb	r1, [r4, #20]
    if (!keys->Handled && keys->Callbacks.fn[keys->State] != NULL) {
 8001a9e:	7d63      	ldrb	r3, [r4, #21]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e8      	bne.n	8001a76 <Key_handle+0xc>
 8001aa4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0e3      	beq.n	8001a76 <Key_handle+0xc>
      keys->Handled = keys->Callbacks.fn[keys->State](keys, keys->State);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4798      	blx	r3
 8001ab2:	7560      	strb	r0, [r4, #21]
 8001ab4:	e7e2      	b.n	8001a7c <Key_handle+0x12>
  }
}
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab8:	4770      	bx	lr

08001aba <Led_init>:
 *  Created on: Dec 11, 2023
 *      Author: negar
 */
#include "led.h"

void Led_init(GPIO_TypeDef* gpio, uint16_t pin) {
 8001aba:	b410      	push	{r4}
  // Mode: Output
  gpio->MODER &= ~(0x3 << (pin * 2));
 8001abc:	6804      	ldr	r4, [r0, #0]
 8001abe:	004a      	lsls	r2, r1, #1
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	ea24 0403 	bic.w	r4, r4, r3
 8001ac8:	6004      	str	r4, [r0, #0]
  gpio->MODER |= 0x1 << (pin * 2);
 8001aca:	6804      	ldr	r4, [r0, #0]
 8001acc:	f04f 0c01 	mov.w	ip, #1
 8001ad0:	fa0c f202 	lsl.w	r2, ip, r2
 8001ad4:	4322      	orrs	r2, r4
 8001ad6:	6002      	str	r2, [r0, #0]
  // Output Type: Push-Pull
  gpio->OTYPER &= ~(0x1 << pin);
 8001ad8:	6842      	ldr	r2, [r0, #4]
 8001ada:	fa0c fc01 	lsl.w	ip, ip, r1
 8001ade:	ea22 020c 	bic.w	r2, r2, ip
 8001ae2:	6042      	str	r2, [r0, #4]
  // Speed: Very High
  gpio->OSPEEDR |= 0x3 << (pin * 2);
 8001ae4:	6882      	ldr	r2, [r0, #8]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	6083      	str	r3, [r0, #8]
}
 8001aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <Led_toggle>:
void Led_toggle(GPIO_TypeDef* gpio, uint16_t pin) {
  gpio->ODR ^= 1 << pin;
 8001af0:	6942      	ldr	r2, [r0, #20]
 8001af2:	2301      	movs	r3, #1
 8001af4:	408b      	lsls	r3, r1
 8001af6:	4053      	eors	r3, r2
 8001af8:	6143      	str	r3, [r0, #20]
}
 8001afa:	4770      	bx	lr

08001afc <Btn0_onPressed>:
  // check key state
  Key_handle(keys, KEY_LEN);

}

uint8_t Btn0_onPressed(Key* key, Key_State state) {
 8001afc:	b508      	push	{r3, lr}
  //HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
  sensor_flag = 1;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <Btn0_onPressed+0x2c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  Led_toggle(LED2_GPIO_Port, LED2_Pin);
 8001b04:	210e      	movs	r1, #14
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <Btn0_onPressed+0x30>)
 8001b08:	f7ff fff2 	bl	8001af0 <Led_toggle>
  counter++;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <Btn0_onPressed+0x34>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2db      	uxtb	r3, r3
  if(counter >= 3){
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d802      	bhi.n	8001b1e <Btn0_onPressed+0x22>
  counter++;
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <Btn0_onPressed+0x34>)
 8001b1a:	7013      	strb	r3, [r2, #0]
 8001b1c:	e002      	b.n	8001b24 <Btn0_onPressed+0x28>
    counter = 0;
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <Btn0_onPressed+0x34>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  }

  return 0;
}
 8001b24:	2000      	movs	r0, #0
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	2000002c 	.word	0x2000002c
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	2000022c 	.word	0x2000022c

08001b34 <SystemClock_Config>:
{
 8001b34:	b500      	push	{lr}
 8001b36:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b38:	2244      	movs	r2, #68	; 0x44
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	a805      	add	r0, sp, #20
 8001b3e:	f004 fe6a 	bl	8006816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	9303      	str	r3, [sp, #12]
 8001b4c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b52:	f001 fd89 	bl	8003668 <HAL_PWREx_ControlVoltageScaling>
 8001b56:	bb28      	cbnz	r0, 8001ba4 <SystemClock_Config+0x70>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b58:	2310      	movs	r3, #16
 8001b5a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b6c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b6e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b70:	2228      	movs	r2, #40	; 0x28
 8001b72:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b74:	2207      	movs	r2, #7
 8001b76:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b78:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b7a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	a805      	add	r0, sp, #20
 8001b7e:	f001 fe55 	bl	800382c <HAL_RCC_OscConfig>
 8001b82:	b988      	cbnz	r0, 8001ba8 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b90:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b92:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b94:	2104      	movs	r1, #4
 8001b96:	4668      	mov	r0, sp
 8001b98:	f002 f95e 	bl	8003e58 <HAL_RCC_ClockConfig>
 8001b9c:	b930      	cbnz	r0, 8001bac <SystemClock_Config+0x78>
}
 8001b9e:	b017      	add	sp, #92	; 0x5c
 8001ba0:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <SystemClock_Config+0x72>
 8001ba8:	b672      	cpsid	i
 8001baa:	e7fe      	b.n	8001baa <SystemClock_Config+0x76>
 8001bac:	b672      	cpsid	i
 8001bae:	e7fe      	b.n	8001bae <SystemClock_Config+0x7a>

08001bb0 <main>:
{
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001bb6:	f000 fedd 	bl	8002974 <HAL_Init>
  SystemClock_Config();
 8001bba:	f7ff ffbb 	bl	8001b34 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	9405      	str	r4, [sp, #20]
 8001bc2:	9406      	str	r4, [sp, #24]
 8001bc4:	9407      	str	r4, [sp, #28]
 8001bc6:	9408      	str	r4, [sp, #32]
 8001bc8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bca:	4bbb      	ldr	r3, [pc, #748]	; (8001eb8 <main+0x308>)
 8001bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd6:	f002 0210 	and.w	r2, r2, #16
 8001bda:	9200      	str	r2, [sp, #0]
 8001bdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be0:	f042 0204 	orr.w	r2, r2, #4
 8001be4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be8:	f002 0204 	and.w	r2, r2, #4
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfa:	f002 0201 	and.w	r2, r2, #1
 8001bfe:	9202      	str	r2, [sp, #8]
 8001c00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c04:	f042 0202 	orr.w	r2, r2, #2
 8001c08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c0c:	f002 0202 	and.w	r2, r2, #2
 8001c10:	9203      	str	r2, [sp, #12]
 8001c12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	9304      	str	r3, [sp, #16]
 8001c24:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001c26:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8001ec4 <main+0x314>
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c30:	4650      	mov	r0, sl
 8001c32:	f001 f8e3 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001c36:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8001ec8 <main+0x318>
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f24b 011e 	movw	r1, #45086	; 0xb01e
 8001c40:	4648      	mov	r0, r9
 8001c42:	f001 f8db 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001c46:	4f9d      	ldr	r7, [pc, #628]	; (8001ebc <main+0x30c>)
 8001c48:	4622      	mov	r2, r4
 8001c4a:	f241 0181 	movw	r1, #4225	; 0x1081
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f001 f8d4 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f001 f8ce 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001c60:	4622      	mov	r2, r4
 8001c62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c66:	4896      	ldr	r0, [pc, #600]	; (8001ec0 <main+0x310>)
 8001c68:	f001 f8c8 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2120      	movs	r1, #32
 8001c70:	4648      	mov	r0, r9
 8001c72:	f001 f8c3 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4650      	mov	r0, sl
 8001c7c:	f001 f8be 	bl	8002dfc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001c80:	f240 1315 	movw	r3, #277	; 0x115
 8001c84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2501      	movs	r5, #1
 8001c88:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	a905      	add	r1, sp, #20
 8001c90:	4650      	mov	r0, sl
 8001c92:	f000 ff0f 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_1;
 8001c96:	236a      	movs	r3, #106	; 0x6a
 8001c98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9e:	a905      	add	r1, sp, #20
 8001ca0:	4650      	mov	r0, sl
 8001ca2:	f000 ff07 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_8;
 8001ca6:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001caa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	a905      	add	r1, sp, #20
 8001cb2:	4883      	ldr	r0, [pc, #524]	; (8001ec0 <main+0x310>)
 8001cb4:	f000 fefe 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001cb8:	f04f 0803 	mov.w	r8, #3
 8001cbc:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2602      	movs	r6, #2
 8001cc2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cca:	f04f 0b08 	mov.w	fp, #8
 8001cce:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	a905      	add	r1, sp, #20
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f000 feec 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001cdc:	f248 1304 	movw	r3, #33028	; 0x8104
 8001ce0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	a905      	add	r1, sp, #20
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f000 fee1 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001cf2:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	a905      	add	r1, sp, #20
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f000 fed6 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001d08:	f04f 0b10 	mov.w	fp, #16
 8001d0c:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d10:	230b      	movs	r3, #11
 8001d12:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001d16:	a905      	add	r1, sp, #20
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1c:	f000 feca 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d20:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	a905      	add	r1, sp, #20
 8001d28:	4648      	mov	r0, r9
 8001d2a:	f000 fec3 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001d2e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d30:	230b      	movs	r3, #11
 8001d32:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001d36:	a905      	add	r1, sp, #20
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f000 febb 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001d3e:	f24b 033e 	movw	r3, #45118	; 0xb03e
 8001d42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	a905      	add	r1, sp, #20
 8001d4c:	4648      	mov	r0, r9
 8001d4e:	f000 feb1 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d52:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d62:	a905      	add	r1, sp, #20
 8001d64:	4650      	mov	r0, sl
 8001d66:	f000 fea5 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	a905      	add	r1, sp, #20
 8001d80:	4648      	mov	r0, r9
 8001d82:	f000 fe97 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d94:	f04f 0a07 	mov.w	sl, #7
 8001d98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9c:	a905      	add	r1, sp, #20
 8001d9e:	4638      	mov	r0, r7
 8001da0:	f000 fe88 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001da4:	f243 0381 	movw	r3, #12417	; 0x3081
 8001da8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db0:	a905      	add	r1, sp, #20
 8001db2:	4638      	mov	r0, r7
 8001db4:	f000 fe7e 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001db8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dbc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc4:	a905      	add	r1, sp, #20
 8001dc6:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <main+0x310>)
 8001dc8:	f000 fe74 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	a905      	add	r1, sp, #20
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f000 fe6a 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001de0:	f44f 59e0 	mov.w	r9, #7168	; 0x1c00
 8001de4:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001df0:	230a      	movs	r3, #10
 8001df2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	a905      	add	r1, sp, #20
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f000 fe5b 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001dfe:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	a905      	add	r1, sp, #20
 8001e10:	482b      	ldr	r0, [pc, #172]	; (8001ec0 <main+0x310>)
 8001e12:	f000 fe4f 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001e16:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e20:	2305      	movs	r3, #5
 8001e22:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e24:	a905      	add	r1, sp, #20
 8001e26:	4638      	mov	r0, r7
 8001e28:	f000 fe44 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e2c:	2378      	movs	r3, #120	; 0x78
 8001e2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e38:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3c:	a905      	add	r1, sp, #20
 8001e3e:	4638      	mov	r0, r7
 8001e40:	f000 fe38 	bl	8002ab4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, ILI9341_CS_Pin|ILI9341_DC_Pin, GPIO_PIN_SET);
 8001e44:	462a      	mov	r2, r5
 8001e46:	f248 0104 	movw	r1, #32772	; 0x8004
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4e:	f000 ffd5 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e52:	4622      	mov	r2, r4
 8001e54:	4659      	mov	r1, fp
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f000 ffcf 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_SET);
 8001e5e:	462a      	mov	r2, r5
 8001e60:	4659      	mov	r1, fp
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f000 ffc9 	bl	8002dfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e70:	4638      	mov	r0, r7
 8001e72:	f000 ffc3 	bl	8002dfc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ILI9341_CS_Pin|GPIO_PIN_4|ILI9341_DC_Pin;
 8001e76:	f248 0314 	movw	r3, #32788	; 0x8014
 8001e7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	a905      	add	r1, sp, #20
 8001e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e88:	f000 fe14 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ILI9341_RST_Pin;
 8001e8c:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ILI9341_RST_GPIO_Port, &GPIO_InitStruct);
 8001e96:	a905      	add	r1, sp, #20
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f000 fe0a 	bl	8002ab4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eac:	a905      	add	r1, sp, #20
 8001eae:	4638      	mov	r0, r7
 8001eb0:	f000 fe00 	bl	8002ab4 <HAL_GPIO_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	9405      	str	r4, [sp, #20]
 8001eb6:	e009      	b.n	8001ecc <main+0x31c>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	9406      	str	r4, [sp, #24]
 8001ece:	9407      	str	r4, [sp, #28]
  htim6.Instance = TIM6;
 8001ed0:	485f      	ldr	r0, [pc, #380]	; (8002050 <main+0x4a0>)
 8001ed2:	4b60      	ldr	r3, [pc, #384]	; (8002054 <main+0x4a4>)
 8001ed4:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 8000-1;
 8001ed6:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001eda:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 500-1;
 8001ede:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001ee2:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ee6:	f003 f865 	bl	8004fb4 <HAL_TIM_Base_Init>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	f040 8084 	bne.w	8001ff8 <main+0x448>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ef6:	a905      	add	r1, sp, #20
 8001ef8:	4855      	ldr	r0, [pc, #340]	; (8002050 <main+0x4a0>)
 8001efa:	f003 f88b 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d17c      	bne.n	8001ffc <main+0x44c>
  hi2c1.Instance = I2C1;
 8001f02:	4855      	ldr	r0, [pc, #340]	; (8002058 <main+0x4a8>)
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <main+0x4ac>)
 8001f06:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001f08:	4b55      	ldr	r3, [pc, #340]	; (8002060 <main+0x4b0>)
 8001f0a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f10:	2201      	movs	r2, #1
 8001f12:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f18:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f1e:	f001 f8cb 	bl	80030b8 <HAL_I2C_Init>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d16c      	bne.n	8002000 <main+0x450>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f26:	2100      	movs	r1, #0
 8001f28:	484b      	ldr	r0, [pc, #300]	; (8002058 <main+0x4a8>)
 8001f2a:	f001 fb3b 	bl	80035a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d168      	bne.n	8002004 <main+0x454>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4848      	ldr	r0, [pc, #288]	; (8002058 <main+0x4a8>)
 8001f36:	f001 fb63 	bl	8003600 <HAL_I2CEx_ConfigDigitalFilter>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d164      	bne.n	8002008 <main+0x458>
  hspi1.Instance = SPI1;
 8001f3e:	4849      	ldr	r0, [pc, #292]	; (8002064 <main+0x4b4>)
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <main+0x4b8>)
 8001f42:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f48:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f52:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f54:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f56:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f5e:	2210      	movs	r2, #16
 8001f60:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f62:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f64:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f66:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f68:	2207      	movs	r2, #7
 8001f6a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f6c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f72:	f002 fd00 	bl	8004976 <HAL_SPI_Init>
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d148      	bne.n	800200c <main+0x45c>
  huart1.Instance = USART1;
 8001f7a:	483c      	ldr	r0, [pc, #240]	; (800206c <main+0x4bc>)
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <main+0x4c0>)
 8001f7e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001f80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f84:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	2300      	movs	r3, #0
 8001f88:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f8e:	220c      	movs	r2, #12
 8001f90:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f96:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f98:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9a:	f003 fc5e 	bl	800585a <HAL_UART_Init>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d136      	bne.n	8002010 <main+0x460>
  ILI9341_Init();
 8001fa2:	f7ff fac7 	bl	8001534 <ILI9341_Init>
   hDiscoUart.Instance = DISCOVERY_COM1;
 8001fa6:	4933      	ldr	r1, [pc, #204]	; (8002074 <main+0x4c4>)
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <main+0x4c0>)
 8001faa:	600b      	str	r3, [r1, #0]
   hDiscoUart.Init.BaudRate = 115200;
 8001fac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fb0:	604b      	str	r3, [r1, #4]
   hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	6088      	str	r0, [r1, #8]
   hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001fb6:	60c8      	str	r0, [r1, #12]
   hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001fb8:	6108      	str	r0, [r1, #16]
   hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	614b      	str	r3, [r1, #20]
   hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	6188      	str	r0, [r1, #24]
   hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	61c8      	str	r0, [r1, #28]
   hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	6208      	str	r0, [r1, #32]
   hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	6248      	str	r0, [r1, #36]	; 0x24
   BSP_COM_Init(COM1, &hDiscoUart);
 8001fc6:	f000 f8f7 	bl	80021b8 <BSP_COM_Init>
   Led_init(LED2_GPIO_Port, LED2_Pin);
 8001fca:	210e      	movs	r1, #14
 8001fcc:	482a      	ldr	r0, [pc, #168]	; (8002078 <main+0x4c8>)
 8001fce:	f7ff fd74 	bl	8001aba <Led_init>
   Key_init(keys, KEY_PIN_CONFIGS, KEY_LEN);
 8001fd2:	4c2a      	ldr	r4, [pc, #168]	; (800207c <main+0x4cc>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	492a      	ldr	r1, [pc, #168]	; (8002080 <main+0x4d0>)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fd37 	bl	8001a4c <Key_init>
   keys[0].Callbacks.onPressed = Btn0_onPressed;
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <main+0x4d4>)
 8001fe0:	60e3      	str	r3, [r4, #12]
   HAL_TIM_Base_Start_IT(&htim6);
 8001fe2:	481b      	ldr	r0, [pc, #108]	; (8002050 <main+0x4a0>)
 8001fe4:	f002 fe38 	bl	8004c58 <HAL_TIM_Base_Start_IT>
   ILI9341_Fill_Screen(GREEN);
 8001fe8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001fec:	f7ff fc18 	bl	8001820 <ILI9341_Fill_Screen>
    if(sensor_flag != 0  ){
 8001ff0:	4c25      	ldr	r4, [pc, #148]	; (8002088 <main+0x4d8>)
      switch(counter){
 8001ff2:	4d26      	ldr	r5, [pc, #152]	; (800208c <main+0x4dc>)
          HAL_Delay(50);
 8001ff4:	2632      	movs	r6, #50	; 0x32
 8001ff6:	e014      	b.n	8002022 <main+0x472>
 8001ff8:	b672      	cpsid	i
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <main+0x44a>
 8001ffc:	b672      	cpsid	i
 8001ffe:	e7fe      	b.n	8001ffe <main+0x44e>
 8002000:	b672      	cpsid	i
 8002002:	e7fe      	b.n	8002002 <main+0x452>
 8002004:	b672      	cpsid	i
 8002006:	e7fe      	b.n	8002006 <main+0x456>
 8002008:	b672      	cpsid	i
 800200a:	e7fe      	b.n	800200a <main+0x45a>
 800200c:	b672      	cpsid	i
 800200e:	e7fe      	b.n	800200e <main+0x45e>
 8002010:	b672      	cpsid	i
 8002012:	e7fe      	b.n	8002012 <main+0x462>
          Humidity_Test();
 8002014:	f000 fbca 	bl	80027ac <Humidity_Test>
          HAL_Delay(50);
 8002018:	4630      	mov	r0, r6
 800201a:	f000 fccd 	bl	80029b8 <HAL_Delay>
      sensor_flag = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	6023      	str	r3, [r4, #0]
    if(sensor_flag != 0  ){
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0fc      	beq.n	8002022 <main+0x472>
      switch(counter){
 8002028:	782b      	ldrb	r3, [r5, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d0f2      	beq.n	8002014 <main+0x464>
 800202e:	2b02      	cmp	r3, #2
 8002030:	d007      	beq.n	8002042 <main+0x492>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f3      	bne.n	800201e <main+0x46e>
          Temperature_Test();
 8002036:	f000 fc03 	bl	8002840 <Temperature_Test>
          HAL_Delay(50);
 800203a:	4630      	mov	r0, r6
 800203c:	f000 fcbc 	bl	80029b8 <HAL_Delay>
          break;
 8002040:	e7ed      	b.n	800201e <main+0x46e>
          Pressure_Test();
 8002042:	f000 fb6b 	bl	800271c <Pressure_Test>
          HAL_Delay(50);
 8002046:	4630      	mov	r0, r6
 8002048:	f000 fcb6 	bl	80029b8 <HAL_Delay>
          break;
 800204c:	e7e7      	b.n	800201e <main+0x46e>
 800204e:	bf00      	nop
 8002050:	200002e8 	.word	0x200002e8
 8002054:	40001000 	.word	0x40001000
 8002058:	20000230 	.word	0x20000230
 800205c:	40005400 	.word	0x40005400
 8002060:	10909cec 	.word	0x10909cec
 8002064:	20000284 	.word	0x20000284
 8002068:	40013000 	.word	0x40013000
 800206c:	20000334 	.word	0x20000334
 8002070:	40013800 	.word	0x40013800
 8002074:	200003d4 	.word	0x200003d4
 8002078:	48000400 	.word	0x48000400
 800207c:	200003bc 	.word	0x200003bc
 8002080:	0800a2e8 	.word	0x0800a2e8
 8002084:	08001afd 	.word	0x08001afd
 8002088:	2000002c 	.word	0x2000002c
 800208c:	2000022c 	.word	0x2000022c

08002090 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002090:	b508      	push	{r3, lr}
  Key_handle(keys, KEY_LEN);
 8002092:	2101      	movs	r1, #1
 8002094:	4801      	ldr	r0, [pc, #4]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002096:	f7ff fce8 	bl	8001a6a <Key_handle>
}
 800209a:	bd08      	pop	{r3, pc}
 800209c:	200003bc 	.word	0x200003bc

080020a0 <__io_putchar>:
{
 80020a0:	b530      	push	{r4, r5, lr}
 80020a2:	b083      	sub	sp, #12
 80020a4:	9001      	str	r0, [sp, #4]
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 80020a6:	4d07      	ldr	r5, [pc, #28]	; (80020c4 <__io_putchar+0x24>)
 80020a8:	f247 5430 	movw	r4, #30000	; 0x7530
 80020ac:	4623      	mov	r3, r4
 80020ae:	2201      	movs	r2, #1
 80020b0:	a901      	add	r1, sp, #4
 80020b2:	4628      	mov	r0, r5
 80020b4:	f003 fa7f 	bl	80055b6 <HAL_UART_Transmit>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d1f7      	bne.n	80020ac <__io_putchar+0xc>
}
 80020bc:	9801      	ldr	r0, [sp, #4]
 80020be:	b003      	add	sp, #12
 80020c0:	bd30      	pop	{r4, r5, pc}
 80020c2:	bf00      	nop
 80020c4:	200003d4 	.word	0x200003d4

080020c8 <__io_getchar>:
{
 80020c8:	b530      	push	{r4, r5, lr}
 80020ca:	b083      	sub	sp, #12
  uint8_t ch = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f88d 3007 	strb.w	r3, [sp, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 80020d2:	4d08      	ldr	r5, [pc, #32]	; (80020f4 <__io_getchar+0x2c>)
 80020d4:	f247 5430 	movw	r4, #30000	; 0x7530
 80020d8:	4623      	mov	r3, r4
 80020da:	2201      	movs	r2, #1
 80020dc:	f10d 0107 	add.w	r1, sp, #7
 80020e0:	4628      	mov	r0, r5
 80020e2:	f003 fad3 	bl	800568c <HAL_UART_Receive>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d1f6      	bne.n	80020d8 <__io_getchar+0x10>
}
 80020ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80020ee:	b003      	add	sp, #12
 80020f0:	bd30      	pop	{r4, r5, pc}
 80020f2:	bf00      	nop
 80020f4:	200003d4 	.word	0x200003d4

080020f8 <Error_Handler>:
 80020f8:	b672      	cpsid	i
  while (1)
 80020fa:	e7fe      	b.n	80020fa <Error_Handler+0x2>

080020fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <I2Cx_Init+0xac>)
 8002104:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <I2Cx_Init+0xb0>)
 8002108:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800210a:	2600      	movs	r6, #0
 800210c:	6086      	str	r6, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800210e:	2201      	movs	r2, #1
 8002110:	60c2      	str	r2, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002112:	6106      	str	r6, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002114:	6146      	str	r6, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002116:	61c6      	str	r6, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002118:	6206      	str	r6, [r0, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800211a:	4d25      	ldr	r5, [pc, #148]	; (80021b0 <I2Cx_Init+0xb4>)
 800211c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002124:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800212e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002132:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002134:	2312      	movs	r3, #18
 8002136:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002138:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800213e:	2304      	movs	r3, #4
 8002140:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002142:	4f1c      	ldr	r7, [pc, #112]	; (80021b4 <I2Cx_Init+0xb8>)
 8002144:	a903      	add	r1, sp, #12
 8002146:	4638      	mov	r0, r7
 8002148:	f000 fcb4 	bl	8002ab4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800214c:	a903      	add	r1, sp, #12
 800214e:	4638      	mov	r0, r7
 8002150:	f000 fcb0 	bl	8002ab4 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002154:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215a:	65ab      	str	r3, [r5, #88]	; 0x58
 800215c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8002166:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800216c:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 800216e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002170:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002174:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002176:	4632      	mov	r2, r6
 8002178:	210f      	movs	r1, #15
 800217a:	2021      	movs	r0, #33	; 0x21
 800217c:	f000 fc42 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002180:	2021      	movs	r0, #33	; 0x21
 8002182:	f000 fc75 	bl	8002a70 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002186:	4632      	mov	r2, r6
 8002188:	210f      	movs	r1, #15
 800218a:	2022      	movs	r0, #34	; 0x22
 800218c:	f000 fc3a 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002190:	2022      	movs	r0, #34	; 0x22
 8002192:	f000 fc6d 	bl	8002a70 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8002196:	4620      	mov	r0, r4
 8002198:	f000 ff8e 	bl	80030b8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800219c:	4631      	mov	r1, r6
 800219e:	4620      	mov	r0, r4
 80021a0:	f001 fa00 	bl	80035a4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80021a4:	b009      	add	sp, #36	; 0x24
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	40005800 	.word	0x40005800
 80021ac:	00702681 	.word	0x00702681
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000400 	.word	0x48000400

080021b8 <BSP_COM_Init>:
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	460c      	mov	r4, r1
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80021be:	4605      	mov	r5, r0
 80021c0:	b9d8      	cbnz	r0, 80021fa <BSP_COM_Init+0x42>
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <BSP_COM_Init+0x88>)
 80021c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c6:	f042 0202 	orr.w	r2, r2, #2
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80021cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ce:	f002 0202 	and.w	r2, r2, #2
 80021d2:	9200      	str	r2, [sp, #0]
 80021d4:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80021d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d8:	f042 0202 	orr.w	r2, r2, #2
 80021dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80021de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e0:	f002 0202 	and.w	r2, r2, #2
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80021e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021fe:	2602      	movs	r6, #2
 8002200:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002202:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002208:	2707      	movs	r7, #7
 800220a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800220c:	a903      	add	r1, sp, #12
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <BSP_COM_Init+0x8c>)
 8002210:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002214:	f000 fc4e 	bl	8002ab4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800221c:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800221e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002220:	a903      	add	r1, sp, #12
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <BSP_COM_Init+0x90>)
 8002224:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002228:	f000 fc44 	bl	8002ab4 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <BSP_COM_Init+0x94>)
 800222e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002232:	6023      	str	r3, [r4, #0]
  HAL_UART_Init(huart);
 8002234:	4620      	mov	r0, r4
 8002236:	f003 fb10 	bl	800585a <HAL_UART_Init>
}
 800223a:	b009      	add	sp, #36	; 0x24
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	20000034 	.word	0x20000034
 8002248:	20000030 	.word	0x20000030
 800224c:	20000038 	.word	0x20000038

08002250 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002250:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 8002252:	4802      	ldr	r0, [pc, #8]	; (800225c <SENSOR_IO_Init+0xc>)
 8002254:	f7ff ff52 	bl	80020fc <I2Cx_Init>
}
 8002258:	bd08      	pop	{r3, pc}
 800225a:	bf00      	nop
 800225c:	2000045c 	.word	0x2000045c

08002260 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002260:	b510      	push	{r4, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2301      	movs	r3, #1
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	f10d 0217 	add.w	r2, sp, #23
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	460a      	mov	r2, r1
 800227a:	4601      	mov	r1, r0
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <SENSOR_IO_Write+0x38>)
 800227e:	f000 ff91 	bl	80031a4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8002282:	b908      	cbnz	r0, 8002288 <SENSOR_IO_Write+0x28>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8002284:	b006      	add	sp, #24
 8002286:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(i2c_handler);
 8002288:	4c03      	ldr	r4, [pc, #12]	; (8002298 <SENSOR_IO_Write+0x38>)
 800228a:	4620      	mov	r0, r4
 800228c:	f000 ff70 	bl	8003170 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff33 	bl	80020fc <I2Cx_Init>
}
 8002296:	e7f5      	b.n	8002284 <SENSOR_IO_Write+0x24>
 8002298:	2000045c 	.word	0x2000045c

0800229c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800229c:	b510      	push	{r4, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f10d 0117 	add.w	r1, sp, #23
 80022b6:	9100      	str	r1, [sp, #0]
 80022b8:	4601      	mov	r1, r0
 80022ba:	4808      	ldr	r0, [pc, #32]	; (80022dc <SENSOR_IO_Read+0x40>)
 80022bc:	f001 f870 	bl	80033a0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80022c0:	b918      	cbnz	r0, 80022ca <SENSOR_IO_Read+0x2e>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 80022c2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80022c6:	b006      	add	sp, #24
 80022c8:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(i2c_handler);
 80022ca:	4c04      	ldr	r4, [pc, #16]	; (80022dc <SENSOR_IO_Read+0x40>)
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 ff4f 	bl	8003170 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff12 	bl	80020fc <I2Cx_Init>
}
 80022d8:	e7f3      	b.n	80022c2 <SENSOR_IO_Read+0x26>
 80022da:	bf00      	nop
 80022dc:	2000045c 	.word	0x2000045c

080022e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	b085      	sub	sp, #20
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022e4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80022e8:	9402      	str	r4, [sp, #8]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9200      	str	r2, [sp, #0]
 80022ee:	2301      	movs	r3, #1
 80022f0:	460a      	mov	r2, r1
 80022f2:	4601      	mov	r1, r0
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <SENSOR_IO_ReadMultiple+0x34>)
 80022f6:	f001 f853 	bl	80033a0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80022fa:	4604      	mov	r4, r0
 80022fc:	b910      	cbnz	r0, 8002304 <SENSOR_IO_ReadMultiple+0x24>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80022fe:	b2a0      	uxth	r0, r4
 8002300:	b005      	add	sp, #20
 8002302:	bd30      	pop	{r4, r5, pc}
  HAL_I2C_DeInit(i2c_handler);
 8002304:	4d03      	ldr	r5, [pc, #12]	; (8002314 <SENSOR_IO_ReadMultiple+0x34>)
 8002306:	4628      	mov	r0, r5
 8002308:	f000 ff32 	bl	8003170 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800230c:	4628      	mov	r0, r5
 800230e:	f7ff fef5 	bl	80020fc <I2Cx_Init>
}
 8002312:	e7f4      	b.n	80022fe <SENSOR_IO_ReadMultiple+0x1e>
 8002314:	2000045c 	.word	0x2000045c

08002318 <BSP_HSENSOR_Init>:
#include "stm32l475e_iot01_hsensor.h"

static HSENSOR_DrvTypeDef *Hsensor_drv;  

uint32_t BSP_HSENSOR_Init(void)
{
 8002318:	b508      	push	{r3, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <BSP_HSENSOR_Init+0x24>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	20be      	movs	r0, #190	; 0xbe
 8002320:	4798      	blx	r3
 8002322:	28bc      	cmp	r0, #188	; 0xbc
 8002324:	d001      	beq.n	800232a <BSP_HSENSOR_Init+0x12>
  {
    ret = HSENSOR_ERROR;
 8002326:	2001      	movs	r0, #1
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
    ret = HSENSOR_OK;
  }
  
  return ret;
}
 8002328:	bd08      	pop	{r3, pc}
    Hsensor_drv = &HTS221_H_Drv;
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <BSP_HSENSOR_Init+0x24>)
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <BSP_HSENSOR_Init+0x28>)
 800232e:	6013      	str	r3, [r2, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	20be      	movs	r0, #190	; 0xbe
 8002334:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002336:	2000      	movs	r0, #0
 8002338:	e7f6      	b.n	8002328 <BSP_HSENSOR_Init+0x10>
 800233a:	bf00      	nop
 800233c:	20000000 	.word	0x20000000
 8002340:	200004b0 	.word	0x200004b0

08002344 <BSP_HSENSOR_ReadHumidity>:
  return Hsensor_drv->ReadID(HTS221_I2C_ADDRESS);
}


float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002344:	b508      	push	{r3, lr}
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002346:	4b03      	ldr	r3, [pc, #12]	; (8002354 <BSP_HSENSOR_ReadHumidity+0x10>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	20be      	movs	r0, #190	; 0xbe
 800234e:	4798      	blx	r3
}
 8002350:	bd08      	pop	{r3, pc}
 8002352:	bf00      	nop
 8002354:	200004b0 	.word	0x200004b0

08002358 <BSP_PSENSOR_Init>:
#include "stm32l475e_iot01_psensor.h"

static PSENSOR_DrvTypeDef *Psensor_drv;  

uint32_t BSP_PSENSOR_Init(void)
{
 8002358:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <BSP_PSENSOR_Init+0x24>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	20ba      	movs	r0, #186	; 0xba
 8002360:	4798      	blx	r3
 8002362:	28b1      	cmp	r0, #177	; 0xb1
 8002364:	d001      	beq.n	800236a <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 8002366:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 8002368:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <BSP_PSENSOR_Init+0x24>)
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <BSP_PSENSOR_Init+0x28>)
 800236e:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	20ba      	movs	r0, #186	; 0xba
 8002374:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002376:	2000      	movs	r0, #0
 8002378:	e7f6      	b.n	8002368 <BSP_PSENSOR_Init+0x10>
 800237a:	bf00      	nop
 800237c:	2000001c 	.word	0x2000001c
 8002380:	200004b4 	.word	0x200004b4

08002384 <BSP_PSENSOR_ReadPressure>:
{ 
  return Psensor_drv->ReadID(LPS22HB_I2C_ADDRESS);
}

float BSP_PSENSOR_ReadPressure(void)
{ 
 8002384:	b508      	push	{r3, lr}
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002386:	4b03      	ldr	r3, [pc, #12]	; (8002394 <BSP_PSENSOR_ReadPressure+0x10>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	20ba      	movs	r0, #186	; 0xba
 800238e:	4798      	blx	r3
}
 8002390:	bd08      	pop	{r3, pc}
 8002392:	bf00      	nop
 8002394:	200004b4 	.word	0x200004b4

08002398 <BSP_TSENSOR_Init>:
#include "stm32l475e_iot01_tsensor.h"

static TSENSOR_DrvTypeDef *tsensor_drv;  

uint32_t BSP_TSENSOR_Init(void)
{  
 8002398:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800239a:	4c06      	ldr	r4, [pc, #24]	; (80023b4 <BSP_TSENSOR_Init+0x1c>)
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <BSP_TSENSOR_Init+0x20>)
 800239e:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023a0:	f7ff ff56 	bl	8002250 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2100      	movs	r1, #0
 80023aa:	20be      	movs	r0, #190	; 0xbe
 80023ac:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 80023ae:	2000      	movs	r0, #0
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	bf00      	nop
 80023b4:	200004b8 	.word	0x200004b8
 80023b8:	2000000c 	.word	0x2000000c

080023bc <BSP_TSENSOR_ReadTemp>:


float BSP_TSENSOR_ReadTemp(void)
{ 
 80023bc:	b508      	push	{r3, lr}
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <BSP_TSENSOR_ReadTemp+0x10>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	20be      	movs	r0, #190	; 0xbe
 80023c6:	4798      	blx	r3
}
 80023c8:	bd08      	pop	{r3, pc}
 80023ca:	bf00      	nop
 80023cc:	200004b8 	.word	0x200004b8

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_MspInit+0x2c>)
 80023d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	661a      	str	r2, [r3, #96]	; 0x60
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	f002 0201 	and.w	r2, r2, #1
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f8:	b002      	add	sp, #8
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b510      	push	{r4, lr}
 8002402:	b0aa      	sub	sp, #168	; 0xa8
 8002404:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	2100      	movs	r1, #0
 8002408:	9125      	str	r1, [sp, #148]	; 0x94
 800240a:	9126      	str	r1, [sp, #152]	; 0x98
 800240c:	9127      	str	r1, [sp, #156]	; 0x9c
 800240e:	9128      	str	r1, [sp, #160]	; 0xa0
 8002410:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002412:	2288      	movs	r2, #136	; 0x88
 8002414:	a803      	add	r0, sp, #12
 8002416:	f004 f9fe 	bl	8006816 <memset>
  if(hi2c->Instance==I2C1)
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_I2C_MspInit+0x80>)
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002422:	b02a      	add	sp, #168	; 0xa8
 8002424:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242a:	a803      	add	r0, sp, #12
 800242c:	f001 ff54 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	bb10      	cbnz	r0, 8002478 <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	4c14      	ldr	r4, [pc, #80]	; (8002484 <HAL_I2C_MspInit+0x84>)
 8002434:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800243c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800244a:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244c:	2312      	movs	r3, #18
 800244e:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002458:	2304      	movs	r3, #4
 800245a:	9329      	str	r3, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	a925      	add	r1, sp, #148	; 0x94
 800245e:	480a      	ldr	r0, [pc, #40]	; (8002488 <HAL_I2C_MspInit+0x88>)
 8002460:	f000 fb28 	bl	8002ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246a:	65a3      	str	r3, [r4, #88]	; 0x58
 800246c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800246e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002472:	9302      	str	r3, [sp, #8]
 8002474:	9b02      	ldr	r3, [sp, #8]
}
 8002476:	e7d4      	b.n	8002422 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002478:	f7ff fe3e 	bl	80020f8 <Error_Handler>
 800247c:	e7d9      	b.n	8002432 <HAL_I2C_MspInit+0x32>
 800247e:	bf00      	nop
 8002480:	40005400 	.word	0x40005400
 8002484:	40021000 	.word	0x40021000
 8002488:	48000400 	.word	0x48000400

0800248c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 800248c:	6802      	ldr	r2, [r0, #0]
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_I2C_MspDeInit+0x30>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d000      	beq.n	8002496 <HAL_I2C_MspDeInit+0xa>
 8002494:	4770      	bx	lr
{
 8002496:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_I2C_MspDeInit+0x34>)
 800249a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800249c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80024a2:	4c08      	ldr	r4, [pc, #32]	; (80024c4 <HAL_I2C_MspDeInit+0x38>)
 80024a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a8:	4620      	mov	r0, r4
 80024aa:	f000 fc05 	bl	8002cb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	4620      	mov	r0, r4
 80024b4:	f000 fc00 	bl	8002cb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80024b8:	bd10      	pop	{r4, pc}
 80024ba:	bf00      	nop
 80024bc:	40005400 	.word	0x40005400
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000400 	.word	0x48000400

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b500      	push	{lr}
 80024ca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	2300      	movs	r3, #0
 80024ce:	9303      	str	r3, [sp, #12]
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	9305      	str	r3, [sp, #20]
 80024d4:	9306      	str	r3, [sp, #24]
 80024d6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80024d8:	6802      	ldr	r2, [r0, #0]
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_SPI_MspInit+0x64>)
 80024dc:	429a      	cmp	r2, r3
 80024de:	d002      	beq.n	80024e6 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024e0:	b009      	add	sp, #36	; 0x24
 80024e2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024e6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80024ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024f0:	661a      	str	r2, [r3, #96]	; 0x60
 80024f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	64da      	str	r2, [r3, #76]	; 0x4c
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800250e:	23e0      	movs	r3, #224	; 0xe0
 8002510:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800251a:	2305      	movs	r3, #5
 800251c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	a903      	add	r1, sp, #12
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	f000 fac6 	bl	8002ab4 <HAL_GPIO_Init>
}
 8002528:	e7da      	b.n	80024e0 <HAL_SPI_MspInit+0x18>
 800252a:	bf00      	nop
 800252c:	40013000 	.word	0x40013000

08002530 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8002530:	6802      	ldr	r2, [r0, #0]
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_TIM_Base_MspInit+0x3c>)
 8002534:	429a      	cmp	r2, r3
 8002536:	d000      	beq.n	800253a <HAL_TIM_Base_MspInit+0xa>
 8002538:	4770      	bx	lr
{
 800253a:	b500      	push	{lr}
 800253c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800253e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002542:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	659a      	str	r2, [r3, #88]	; 0x58
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	4611      	mov	r1, r2
 8002558:	2036      	movs	r0, #54	; 0x36
 800255a:	f000 fa53 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800255e:	2036      	movs	r0, #54	; 0x36
 8002560:	f000 fa86 	bl	8002a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002564:	b003      	add	sp, #12
 8002566:	f85d fb04 	ldr.w	pc, [sp], #4
 800256a:	bf00      	nop
 800256c:	40001000 	.word	0x40001000

08002570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002570:	b510      	push	{r4, lr}
 8002572:	b0aa      	sub	sp, #168	; 0xa8
 8002574:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	2100      	movs	r1, #0
 8002578:	9125      	str	r1, [sp, #148]	; 0x94
 800257a:	9126      	str	r1, [sp, #152]	; 0x98
 800257c:	9127      	str	r1, [sp, #156]	; 0x9c
 800257e:	9128      	str	r1, [sp, #160]	; 0xa0
 8002580:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002582:	2288      	movs	r2, #136	; 0x88
 8002584:	a803      	add	r0, sp, #12
 8002586:	f004 f946 	bl	8006816 <memset>
  if(huart->Instance==USART1)
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_UART_MspInit+0x7c>)
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002592:	b02a      	add	sp, #168	; 0xa8
 8002594:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002596:	2301      	movs	r3, #1
 8002598:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259a:	a803      	add	r0, sp, #12
 800259c:	f001 fe9c 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 80025a0:	bb08      	cbnz	r0, 80025e6 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_UART_MspInit+0x80>)
 80025a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025aa:	661a      	str	r2, [r3, #96]	; 0x60
 80025ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025b2:	9201      	str	r2, [sp, #4]
 80025b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b8:	f042 0202 	orr.w	r2, r2, #2
 80025bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80025c8:	23c0      	movs	r3, #192	; 0xc0
 80025ca:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d8:	2307      	movs	r3, #7
 80025da:	9329      	str	r3, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	a925      	add	r1, sp, #148	; 0x94
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <HAL_UART_MspInit+0x84>)
 80025e0:	f000 fa68 	bl	8002ab4 <HAL_GPIO_Init>
}
 80025e4:	e7d5      	b.n	8002592 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80025e6:	f7ff fd87 	bl	80020f8 <Error_Handler>
 80025ea:	e7da      	b.n	80025a2 <HAL_UART_MspInit+0x32>
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	48000400 	.word	0x48000400

080025f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <NMI_Handler>

080025fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler>

080025fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <MemManage_Handler>

080025fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler>

08002600 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler>

08002602 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002602:	4770      	bx	lr

08002604 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002604:	4770      	bx	lr

08002606 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260a:	f000 f9c3 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260e:	bd08      	pop	{r3, pc}

08002610 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002612:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM6_DAC_IRQHandler+0xc>)
 8002614:	f002 fb6a 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop
 800261c:	200002e8 	.word	0x200002e8

08002620 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002620:	2001      	movs	r0, #1
 8002622:	4770      	bx	lr

08002624 <_kill>:

int _kill(int pid, int sig)
{
 8002624:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002626:	f004 f949 	bl	80068bc <__errno>
 800262a:	2316      	movs	r3, #22
 800262c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800262e:	f04f 30ff 	mov.w	r0, #4294967295
 8002632:	bd08      	pop	{r3, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002636:	f004 f941 	bl	80068bc <__errno>
 800263a:	2316      	movs	r3, #22
 800263c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800263e:	e7fe      	b.n	800263e <_exit+0xa>

08002640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002640:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	1e16      	subs	r6, r2, #0
 8002644:	dd07      	ble.n	8002656 <_read+0x16>
 8002646:	460c      	mov	r4, r1
 8002648:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800264a:	f7ff fd3d 	bl	80020c8 <__io_getchar>
 800264e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	42a5      	cmp	r5, r4
 8002654:	d1f9      	bne.n	800264a <_read+0xa>
  }

  return len;
}
 8002656:	4630      	mov	r0, r6
 8002658:	bd70      	pop	{r4, r5, r6, pc}

0800265a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265a:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	1e16      	subs	r6, r2, #0
 800265e:	dd07      	ble.n	8002670 <_write+0x16>
 8002660:	460c      	mov	r4, r1
 8002662:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002664:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002668:	f7ff fd1a 	bl	80020a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	42a5      	cmp	r5, r4
 800266e:	d1f9      	bne.n	8002664 <_write+0xa>
  }
  return len;
}
 8002670:	4630      	mov	r0, r6
 8002672:	bd70      	pop	{r4, r5, r6, pc}

08002674 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	4770      	bx	lr

0800267a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800267a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002680:	2000      	movs	r0, #0
 8002682:	4770      	bx	lr

08002684 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002684:	2001      	movs	r0, #1
 8002686:	4770      	bx	lr

08002688 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002688:	2000      	movs	r0, #0
 800268a:	4770      	bx	lr

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b508      	push	{r3, lr}
 800268e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <_sbrk+0x38>)
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	b152      	cbz	r2, 80026ac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <_sbrk+0x38>)
 8002698:	6810      	ldr	r0, [r2, #0]
 800269a:	4403      	add	r3, r0
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <_sbrk+0x3c>)
 800269e:	490b      	ldr	r1, [pc, #44]	; (80026cc <_sbrk+0x40>)
 80026a0:	1a52      	subs	r2, r2, r1
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d806      	bhi.n	80026b4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <_sbrk+0x38>)
 80026a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80026aa:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80026ac:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <_sbrk+0x38>)
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <_sbrk+0x44>)
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	e7f0      	b.n	8002696 <_sbrk+0xa>
    errno = ENOMEM;
 80026b4:	f004 f902 	bl	80068bc <__errno>
 80026b8:	230c      	movs	r3, #12
 80026ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	e7f3      	b.n	80026aa <_sbrk+0x1e>
 80026c2:	bf00      	nop
 80026c4:	200004bc 	.word	0x200004bc
 80026c8:	20018000 	.word	0x20018000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	20000638 	.word	0x20000638

080026d4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d4:	490f      	ldr	r1, [pc, #60]	; (8002714 <SystemInit+0x40>)
 80026d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <SystemInit+0x44>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026ec:	2000      	movs	r0, #0
 80026ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80026f6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80026fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80026fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002700:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002708:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800270a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800270c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002710:	608b      	str	r3, [r1, #8]
#endif
}
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00
 8002718:	40021000 	.word	0x40021000

0800271c <Pressure_Test>:
uint8_t humidity_flag;
uint8_t Temperature_flag;


void Pressure_Test(void)
{
 800271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002720:	b082      	sub	sp, #8

  float press_value = 0;
  Pressure_flag = 1;
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <Pressure_Test+0x78>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]

  BSP_PSENSOR_Init();
 8002728:	f7ff fe16 	bl	8002358 <BSP_PSENSOR_Init>
  press_value = BSP_PSENSOR_ReadPressure();
 800272c:	f7ff fe2a 	bl	8002384 <BSP_PSENSOR_ReadPressure>
 8002730:	ee10 0a10 	vmov	r0, s0
  printf("PRESSURE is = %.2f mBar \r\n\n", press_value);
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	4604      	mov	r4, r0
 800273a:	460d      	mov	r5, r1
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4815      	ldr	r0, [pc, #84]	; (8002798 <Pressure_Test+0x7c>)
 8002742:	f003 fff3 	bl	800672c <iprintf>
  ILI9341_Draw_Text("PRESSURE is : ", 10, 10, BLACK, 2, GREEN);
 8002746:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 800274a:	9701      	str	r7, [sp, #4]
 800274c:	2602      	movs	r6, #2
 800274e:	9600      	str	r6, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	220a      	movs	r2, #10
 8002754:	4611      	mov	r1, r2
 8002756:	4811      	ldr	r0, [pc, #68]	; (800279c <Pressure_Test+0x80>)
 8002758:	f7fe fdf6 	bl	8001348 <ILI9341_Draw_Text>
  sprintf(counter_buff, " %.2f", press_value);
 800275c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80027a8 <Pressure_Test+0x8c>
 8002760:	4622      	mov	r2, r4
 8002762:	462b      	mov	r3, r5
 8002764:	490e      	ldr	r1, [pc, #56]	; (80027a0 <Pressure_Test+0x84>)
 8002766:	4640      	mov	r0, r8
 8002768:	f003 fff2 	bl	8006750 <siprintf>
  ILI9341_Draw_Text(counter_buff, 50, 50, BLACK, 2, GREEN);
 800276c:	9701      	str	r7, [sp, #4]
 800276e:	9600      	str	r6, [sp, #0]
 8002770:	2300      	movs	r3, #0
 8002772:	2232      	movs	r2, #50	; 0x32
 8002774:	4611      	mov	r1, r2
 8002776:	4640      	mov	r0, r8
 8002778:	f7fe fde6 	bl	8001348 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("mBar ", 145, 50, BLACK, 2, GREEN);
 800277c:	9701      	str	r7, [sp, #4]
 800277e:	9600      	str	r6, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	2232      	movs	r2, #50	; 0x32
 8002784:	2191      	movs	r1, #145	; 0x91
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <Pressure_Test+0x88>)
 8002788:	f7fe fdde 	bl	8001348 <ILI9341_Draw_Text>

}
 800278c:	b002      	add	sp, #8
 800278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002792:	bf00      	nop
 8002794:	200004c0 	.word	0x200004c0
 8002798:	0800a338 	.word	0x0800a338
 800279c:	0800a354 	.word	0x0800a354
 80027a0:	0800a364 	.word	0x0800a364
 80027a4:	0800a36c 	.word	0x0800a36c
 80027a8:	200004c4 	.word	0x200004c4

080027ac <Humidity_Test>:

//......................
void Humidity_Test(void)
{
 80027ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b0:	b082      	sub	sp, #8

  float humidity_value = 0;
  humidity_flag = 1;
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <Humidity_Test+0x7c>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]

  BSP_HSENSOR_Init();
 80027b8:	f7ff fdae 	bl	8002318 <BSP_HSENSOR_Init>
  ILI9341_Reset();
 80027bc:	f7fe fe59 	bl	8001472 <ILI9341_Reset>
  humidity_value = BSP_HSENSOR_ReadHumidity();
 80027c0:	f7ff fdc0 	bl	8002344 <BSP_HSENSOR_ReadHumidity>
 80027c4:	ee10 0a10 	vmov	r0, s0
  printf("HUMIDITY is = %.2f %%\r\n\n", humidity_value);
 80027c8:	f7fd febe 	bl	8000548 <__aeabi_f2d>
 80027cc:	4604      	mov	r4, r0
 80027ce:	460d      	mov	r5, r1
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4815      	ldr	r0, [pc, #84]	; (800282c <Humidity_Test+0x80>)
 80027d6:	f003 ffa9 	bl	800672c <iprintf>
  ILI9341_Draw_Text("HUMIDITY is : ", 10, 10, BLACK, 2, GREEN);
 80027da:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 80027de:	9701      	str	r7, [sp, #4]
 80027e0:	2602      	movs	r6, #2
 80027e2:	9600      	str	r6, [sp, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	220a      	movs	r2, #10
 80027e8:	4611      	mov	r1, r2
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <Humidity_Test+0x84>)
 80027ec:	f7fe fdac 	bl	8001348 <ILI9341_Draw_Text>
  sprintf(counter_buff, " %.2f", humidity_value);
 80027f0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800283c <Humidity_Test+0x90>
 80027f4:	4622      	mov	r2, r4
 80027f6:	462b      	mov	r3, r5
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <Humidity_Test+0x88>)
 80027fa:	4640      	mov	r0, r8
 80027fc:	f003 ffa8 	bl	8006750 <siprintf>
  ILI9341_Draw_Text(counter_buff, 50, 50, BLACK, 2, GREEN);
 8002800:	9701      	str	r7, [sp, #4]
 8002802:	9600      	str	r6, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	2232      	movs	r2, #50	; 0x32
 8002808:	4611      	mov	r1, r2
 800280a:	4640      	mov	r0, r8
 800280c:	f7fe fd9c 	bl	8001348 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("% ", 135, 50, BLACK, 2, GREEN);
 8002810:	9701      	str	r7, [sp, #4]
 8002812:	9600      	str	r6, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	2232      	movs	r2, #50	; 0x32
 8002818:	2187      	movs	r1, #135	; 0x87
 800281a:	4807      	ldr	r0, [pc, #28]	; (8002838 <Humidity_Test+0x8c>)
 800281c:	f7fe fd94 	bl	8001348 <ILI9341_Draw_Text>



}
 8002820:	b002      	add	sp, #8
 8002822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002826:	bf00      	nop
 8002828:	200004e2 	.word	0x200004e2
 800282c:	0800a374 	.word	0x0800a374
 8002830:	0800a390 	.word	0x0800a390
 8002834:	0800a364 	.word	0x0800a364
 8002838:	0800a3a0 	.word	0x0800a3a0
 800283c:	200004c4 	.word	0x200004c4

08002840 <Temperature_Test>:

//...........................
void Temperature_Test(void)
{
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	b082      	sub	sp, #8

  float temp_value = 0;
  Temperature_flag = 1;
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <Temperature_Test+0x78>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
  len = snprintf(str, sizeof(str) - 1,"temp : %d\r\n", temp/8);
  HAL_UART_Transmit(&huart1, (uint8_t *)str, len, 1000);


  */
  BSP_TSENSOR_Init();
 800284c:	f7ff fda4 	bl	8002398 <BSP_TSENSOR_Init>
  temp_value = BSP_TSENSOR_ReadTemp();
 8002850:	f7ff fdb4 	bl	80023bc <BSP_TSENSOR_ReadTemp>
 8002854:	ee10 0a10 	vmov	r0, s0
  printf("TEMPERATURE is = %.2f C\r\n\n", temp_value);
 8002858:	f7fd fe76 	bl	8000548 <__aeabi_f2d>
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4815      	ldr	r0, [pc, #84]	; (80028bc <Temperature_Test+0x7c>)
 8002866:	f003 ff61 	bl	800672c <iprintf>
  ILI9341_Draw_Text("TEMPERATURE is : ", 10, 10, BLACK, 2, GREEN);
 800286a:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 800286e:	9701      	str	r7, [sp, #4]
 8002870:	2602      	movs	r6, #2
 8002872:	9600      	str	r6, [sp, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	220a      	movs	r2, #10
 8002878:	4611      	mov	r1, r2
 800287a:	4811      	ldr	r0, [pc, #68]	; (80028c0 <Temperature_Test+0x80>)
 800287c:	f7fe fd64 	bl	8001348 <ILI9341_Draw_Text>
  sprintf(counter_buff, " %.2f", temp_value);
 8002880:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80028cc <Temperature_Test+0x8c>
 8002884:	4622      	mov	r2, r4
 8002886:	462b      	mov	r3, r5
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <Temperature_Test+0x84>)
 800288a:	4640      	mov	r0, r8
 800288c:	f003 ff60 	bl	8006750 <siprintf>
  ILI9341_Draw_Text(counter_buff, 50, 50, BLACK, 2, GREEN);
 8002890:	9701      	str	r7, [sp, #4]
 8002892:	9600      	str	r6, [sp, #0]
 8002894:	2300      	movs	r3, #0
 8002896:	2232      	movs	r2, #50	; 0x32
 8002898:	4611      	mov	r1, r2
 800289a:	4640      	mov	r0, r8
 800289c:	f7fe fd54 	bl	8001348 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("C ", 135, 50, BLACK, 2, GREEN);
 80028a0:	9701      	str	r7, [sp, #4]
 80028a2:	9600      	str	r6, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2232      	movs	r2, #50	; 0x32
 80028a8:	2187      	movs	r1, #135	; 0x87
 80028aa:	4807      	ldr	r0, [pc, #28]	; (80028c8 <Temperature_Test+0x88>)
 80028ac:	f7fe fd4c 	bl	8001348 <ILI9341_Draw_Text>

}
 80028b0:	b002      	add	sp, #8
 80028b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028b6:	bf00      	nop
 80028b8:	200004c1 	.word	0x200004c1
 80028bc:	0800a3a4 	.word	0x0800a3a4
 80028c0:	0800a3c0 	.word	0x0800a3c0
 80028c4:	0800a364 	.word	0x0800a364
 80028c8:	0800a3d4 	.word	0x0800a3d4
 80028cc:	200004c4 	.word	0x200004c4

080028d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff fefe 	bl	80026d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f003 ffe3 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7ff f955 	bl	8001bb0 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002908:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002914:	0800a810 	.word	0x0800a810
  ldr r2, =_sbss
 8002918:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800291c:	20000634 	.word	0x20000634

08002920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_2_IRQHandler>
	...

08002924 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_InitTick+0x44>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b90b      	cbnz	r3, 800292e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800292a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800292c:	4770      	bx	lr
{
 800292e:	b510      	push	{r4, lr}
 8002930:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_InitTick+0x48>)
 800293c:	6810      	ldr	r0, [r2, #0]
 800293e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002942:	f000 f8a3 	bl	8002a8c <HAL_SYSTICK_Config>
 8002946:	b968      	cbnz	r0, 8002964 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002948:	2c0f      	cmp	r4, #15
 800294a:	d901      	bls.n	8002950 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e00a      	b.n	8002966 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002950:	2200      	movs	r2, #0
 8002952:	4621      	mov	r1, r4
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f000 f854 	bl	8002a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_InitTick+0x4c>)
 800295e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002960:	2000      	movs	r0, #0
 8002962:	e000      	b.n	8002966 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002964:	2001      	movs	r0, #1
}
 8002966:	bd10      	pop	{r4, pc}
 8002968:	20000040 	.word	0x20000040
 800296c:	2000003c 	.word	0x2000003c
 8002970:	20000044 	.word	0x20000044

08002974 <HAL_Init>:
{
 8002974:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002976:	2003      	movs	r0, #3
 8002978:	f000 f832 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff ffd1 	bl	8002924 <HAL_InitTick>
 8002982:	b110      	cbz	r0, 800298a <HAL_Init+0x16>
    status = HAL_ERROR;
 8002984:	2401      	movs	r4, #1
}
 8002986:	4620      	mov	r0, r4
 8002988:	bd10      	pop	{r4, pc}
 800298a:	4604      	mov	r4, r0
    HAL_MspInit();
 800298c:	f7ff fd20 	bl	80023d0 <HAL_MspInit>
 8002990:	e7f9      	b.n	8002986 <HAL_Init+0x12>
	...

08002994 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_IncTick+0x10>)
 8002996:	6811      	ldr	r1, [r2, #0]
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_IncTick+0x14>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	440b      	add	r3, r1
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	200004e4 	.word	0x200004e4
 80029a8:	20000040 	.word	0x20000040

080029ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029ac:	4b01      	ldr	r3, [pc, #4]	; (80029b4 <HAL_GetTick+0x8>)
 80029ae:	6818      	ldr	r0, [r3, #0]
}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200004e4 	.word	0x200004e4

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff fff6 	bl	80029ac <HAL_GetTick>
 80029c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80029c6:	d002      	beq.n	80029ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_Delay+0x24>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ce:	f7ff ffed 	bl	80029ac <HAL_GetTick>
 80029d2:	1b40      	subs	r0, r0, r5
 80029d4:	42a0      	cmp	r0, r4
 80029d6:	d3fa      	bcc.n	80029ce <HAL_Delay+0x16>
  {
  }
}
 80029d8:	bd38      	pop	{r3, r4, r5, pc}
 80029da:	bf00      	nop
 80029dc:	20000040 	.word	0x20000040

080029e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e4:	0203      	lsls	r3, r0, #8
 80029e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ee:	0412      	lsls	r2, r2, #16
 80029f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_NVIC_SetPriority+0x64>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0e:	f1c3 0c07 	rsb	ip, r3, #7
 8002a12:	f1bc 0f04 	cmp.w	ip, #4
 8002a16:	bf28      	it	cs
 8002a18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1c:	f103 0e04 	add.w	lr, r3, #4
 8002a20:	f1be 0f06 	cmp.w	lr, #6
 8002a24:	bf8c      	ite	hi
 8002a26:	3b03      	subhi	r3, #3
 8002a28:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2a:	f04f 3eff 	mov.w	lr, #4294967295
 8002a2e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a32:	ea21 010c 	bic.w	r1, r1, ip
 8002a36:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	fa0e fe03 	lsl.w	lr, lr, r3
 8002a3c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002a42:	2800      	cmp	r0, #0
 8002a44:	db09      	blt.n	8002a5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	0109      	lsls	r1, r1, #4
 8002a48:	b2c9      	uxtb	r1, r1
 8002a4a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a4e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a52:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a56:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	f000 000f 	and.w	r0, r0, #15
 8002a5e:	0109      	lsls	r1, r1, #4
 8002a60:	b2c9      	uxtb	r1, r1
 8002a62:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_NVIC_SetPriority+0x68>)
 8002a64:	5419      	strb	r1, [r3, r0]
 8002a66:	e7f6      	b.n	8002a56 <HAL_NVIC_SetPriority+0x52>
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	e000ed14 	.word	0xe000ed14

08002a70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	db07      	blt.n	8002a84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a74:	0941      	lsrs	r1, r0, #5
 8002a76:	f000 001f 	and.w	r0, r0, #31
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4083      	lsls	r3, r0
 8002a7e:	4a02      	ldr	r2, [pc, #8]	; (8002a88 <HAL_NVIC_EnableIRQ+0x18>)
 8002a80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	3801      	subs	r0, #1
 8002a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a92:	d20b      	bcs.n	8002aac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <HAL_SYSTICK_Config+0x24>)
 8002a9c:	21f0      	movs	r1, #240	; 0xf0
 8002a9e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aaa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002aac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab4:	680b      	ldr	r3, [r1, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80f5 	beq.w	8002ca6 <HAL_GPIO_Init+0x1f2>
{
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8002ac6:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac8:	f04f 0e01 	mov.w	lr, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4d76      	ldr	r5, [pc, #472]	; (8002ca8 <HAL_GPIO_Init+0x1f4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ace:	4c77      	ldr	r4, [pc, #476]	; (8002cac <HAL_GPIO_Init+0x1f8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8002cb4 <HAL_GPIO_Init+0x200>
 8002ad4:	e0a1      	b.n	8002c1a <HAL_GPIO_Init+0x166>
        temp = GPIOx->OSPEEDR;
 8002ad6:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ad8:	f04f 0a03 	mov.w	sl, #3
 8002adc:	fa0a fa0c 	lsl.w	sl, sl, ip
 8002ae0:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae4:	68cb      	ldr	r3, [r1, #12]
 8002ae6:	fa03 f30c 	lsl.w	r3, r3, ip
 8002aea:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8002aee:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8002af0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af2:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af6:	684b      	ldr	r3, [r1, #4]
 8002af8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002afc:	4093      	lsls	r3, r2
 8002afe:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OTYPER = temp;
 8002b02:	6043      	str	r3, [r0, #4]
 8002b04:	e095      	b.n	8002c32 <HAL_GPIO_Init+0x17e>
        temp = GPIOx->ASCR;
 8002b06:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b0a:	ea2a 0707 	bic.w	r7, sl, r7
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b12:	4093      	lsls	r3, r2
 8002b14:	433b      	orrs	r3, r7
        GPIOx->ASCR = temp;
 8002b16:	62c3      	str	r3, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b18:	684b      	ldr	r3, [r1, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	f040 808e 	bne.w	8002c40 <HAL_GPIO_Init+0x18c>
      temp = GPIOx->MODER;
 8002b24:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b26:	2303      	movs	r3, #3
 8002b28:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b2c:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b30:	684b      	ldr	r3, [r1, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b3a:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8002b3c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b3e:	684b      	ldr	r3, [r1, #4]
 8002b40:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002b44:	d062      	beq.n	8002c0c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	662b      	str	r3, [r5, #96]	; 0x60
 8002b4e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b58:	f022 0303 	bic.w	r3, r2, #3
 8002b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b64:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b68:	f002 0b03 	and.w	fp, r2, #3
 8002b6c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002b70:	270f      	movs	r7, #15
 8002b72:	fa07 f70b 	lsl.w	r7, r7, fp
 8002b76:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b7a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002b7e:	d019      	beq.n	8002bb4 <HAL_GPIO_Init+0x100>
 8002b80:	4e4b      	ldr	r6, [pc, #300]	; (8002cb0 <HAL_GPIO_Init+0x1fc>)
 8002b82:	42b0      	cmp	r0, r6
 8002b84:	f000 8082 	beq.w	8002c8c <HAL_GPIO_Init+0x1d8>
 8002b88:	4540      	cmp	r0, r8
 8002b8a:	f000 8081 	beq.w	8002c90 <HAL_GPIO_Init+0x1dc>
 8002b8e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002b92:	42b0      	cmp	r0, r6
 8002b94:	d07e      	beq.n	8002c94 <HAL_GPIO_Init+0x1e0>
 8002b96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b9a:	42b0      	cmp	r0, r6
 8002b9c:	d07c      	beq.n	8002c98 <HAL_GPIO_Init+0x1e4>
 8002b9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ba2:	42b0      	cmp	r0, r6
 8002ba4:	d07a      	beq.n	8002c9c <HAL_GPIO_Init+0x1e8>
 8002ba6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002baa:	42b0      	cmp	r0, r6
 8002bac:	bf0c      	ite	eq
 8002bae:	2706      	moveq	r7, #6
 8002bb0:	2707      	movne	r7, #7
 8002bb2:	e000      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
 8002bb4:	2700      	movs	r7, #0
 8002bb6:	fa07 f70b 	lsl.w	r7, r7, fp
 8002bba:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bbe:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8002bc0:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 8002bc2:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bc6:	684e      	ldr	r6, [r1, #4]
 8002bc8:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002bcc:	bf0c      	ite	eq
 8002bce:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002bd0:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8002bd4:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 8002bd6:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd8:	684e      	ldr	r6, [r1, #4]
 8002bda:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002bde:	bf0c      	ite	eq
 8002be0:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002be2:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8002be6:	60e3      	str	r3, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002be8:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bea:	684e      	ldr	r6, [r1, #4]
 8002bec:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002bf0:	bf0c      	ite	eq
 8002bf2:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002bf4:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8002bf8:	6063      	str	r3, [r4, #4]

        temp = EXTI->IMR1;
 8002bfa:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfc:	684e      	ldr	r6, [r1, #4]
 8002bfe:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002c02:	bf0c      	ite	eq
 8002c04:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8002c06:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8002c0a:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8002c0c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0e:	680b      	ldr	r3, [r1, #0]
 8002c10:	f10c 0c02 	add.w	ip, ip, #2
 8002c14:	fa33 f702 	lsrs.w	r7, r3, r2
 8002c18:	d042      	beq.n	8002ca0 <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c1a:	fa0e f702 	lsl.w	r7, lr, r2
    if (iocurrent != 0x00u)
 8002c1e:	ea17 0903 	ands.w	r9, r7, r3
 8002c22:	d0f3      	beq.n	8002c0c <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c24:	684b      	ldr	r3, [r1, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f67f af52 	bls.w	8002ad6 <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c32:	684b      	ldr	r3, [r1, #4]
 8002c34:	f003 0a03 	and.w	sl, r3, #3
 8002c38:	f1ba 0f03 	cmp.w	sl, #3
 8002c3c:	f43f af63 	beq.w	8002b06 <HAL_GPIO_Init+0x52>
        temp = GPIOx->PUPDR;
 8002c40:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c42:	2303      	movs	r3, #3
 8002c44:	fa03 f30c 	lsl.w	r3, r3, ip
 8002c48:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	688b      	ldr	r3, [r1, #8]
 8002c4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002c52:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8002c54:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	684b      	ldr	r3, [r1, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f47f af61 	bne.w	8002b24 <HAL_GPIO_Init+0x70>
        temp = GPIOx->AFR[position >> 3u];
 8002c62:	08d7      	lsrs	r7, r2, #3
 8002c64:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002c68:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c6c:	f002 0b07 	and.w	fp, r2, #7
 8002c70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002c74:	230f      	movs	r3, #15
 8002c76:	fa03 f30b 	lsl.w	r3, r3, fp
 8002c7a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7e:	690b      	ldr	r3, [r1, #16]
 8002c80:	fa03 f30b 	lsl.w	r3, r3, fp
 8002c84:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	e74b      	b.n	8002b24 <HAL_GPIO_Init+0x70>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8c:	4677      	mov	r7, lr
 8002c8e:	e792      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
 8002c90:	2702      	movs	r7, #2
 8002c92:	e790      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
 8002c94:	2703      	movs	r7, #3
 8002c96:	e78e      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
 8002c98:	2704      	movs	r7, #4
 8002c9a:	e78c      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
 8002c9c:	2705      	movs	r7, #5
 8002c9e:	e78a      	b.n	8002bb6 <HAL_GPIO_Init+0x102>
  }
}
 8002ca0:	b003      	add	sp, #12
 8002ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca6:	4770      	bx	lr
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	48000800 	.word	0x48000800

08002cb8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	f000 8091 	beq.w	8002de0 <HAL_GPIO_DeInit+0x128>
{
 8002cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	468c      	mov	ip, r1
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002cc8:	f04f 0801 	mov.w	r8, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002ccc:	f04f 0a0f 	mov.w	sl, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cd0:	4f44      	ldr	r7, [pc, #272]	; (8002de4 <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002dec <HAL_GPIO_DeInit+0x134>
 8002cd6:	e02c      	b.n	8002d32 <HAL_GPIO_DeInit+0x7a>
 8002cd8:	f04f 0900 	mov.w	r9, #0
 8002cdc:	fa09 f404 	lsl.w	r4, r9, r4
 8002ce0:	9d01      	ldr	r5, [sp, #4]
 8002ce2:	42ac      	cmp	r4, r5
 8002ce4:	d064      	beq.n	8002db0 <HAL_GPIO_DeInit+0xf8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ce6:	6804      	ldr	r4, [r0, #0]
 8002ce8:	005d      	lsls	r5, r3, #1
 8002cea:	2103      	movs	r1, #3
 8002cec:	40a9      	lsls	r1, r5
 8002cee:	430c      	orrs	r4, r1
 8002cf0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002cf2:	08dd      	lsrs	r5, r3, #3
 8002cf4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002cf8:	6a2e      	ldr	r6, [r5, #32]
 8002cfa:	f003 0407 	and.w	r4, r3, #7
 8002cfe:	00a4      	lsls	r4, r4, #2
 8002d00:	fa0a f404 	lsl.w	r4, sl, r4
 8002d04:	ea26 0404 	bic.w	r4, r6, r4
 8002d08:	622c      	str	r4, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d0a:	6884      	ldr	r4, [r0, #8]
 8002d0c:	ea24 0401 	bic.w	r4, r4, r1
 8002d10:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d12:	6844      	ldr	r4, [r0, #4]
 8002d14:	ea24 0402 	bic.w	r4, r4, r2
 8002d18:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d1a:	68c4      	ldr	r4, [r0, #12]
 8002d1c:	ea24 0101 	bic.w	r1, r4, r1
 8002d20:	60c1      	str	r1, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002d22:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d24:	ea21 0202 	bic.w	r2, r1, r2
 8002d28:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d2a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002d2c:	fa3c f203 	lsrs.w	r2, ip, r3
 8002d30:	d053      	beq.n	8002dda <HAL_GPIO_DeInit+0x122>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d32:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 8002d36:	ea12 060c 	ands.w	r6, r2, ip
 8002d3a:	d0f6      	beq.n	8002d2a <HAL_GPIO_DeInit+0x72>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d3c:	f023 0103 	bic.w	r1, r3, #3
 8002d40:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002d44:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8002d48:	688d      	ldr	r5, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d4a:	f003 0403 	and.w	r4, r3, #3
 8002d4e:	00a4      	lsls	r4, r4, #2
 8002d50:	fa0a fe04 	lsl.w	lr, sl, r4
 8002d54:	ea0e 0505 	and.w	r5, lr, r5
 8002d58:	9501      	str	r5, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d5a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002d5e:	d0bb      	beq.n	8002cd8 <HAL_GPIO_DeInit+0x20>
 8002d60:	4558      	cmp	r0, fp
 8002d62:	d017      	beq.n	8002d94 <HAL_GPIO_DeInit+0xdc>
 8002d64:	4d20      	ldr	r5, [pc, #128]	; (8002de8 <HAL_GPIO_DeInit+0x130>)
 8002d66:	42a8      	cmp	r0, r5
 8002d68:	d016      	beq.n	8002d98 <HAL_GPIO_DeInit+0xe0>
 8002d6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d6e:	42a8      	cmp	r0, r5
 8002d70:	d015      	beq.n	8002d9e <HAL_GPIO_DeInit+0xe6>
 8002d72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d76:	42a8      	cmp	r0, r5
 8002d78:	d014      	beq.n	8002da4 <HAL_GPIO_DeInit+0xec>
 8002d7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d7e:	42a8      	cmp	r0, r5
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_DeInit+0xf2>
 8002d82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d86:	42a8      	cmp	r0, r5
 8002d88:	bf0c      	ite	eq
 8002d8a:	f04f 0906 	moveq.w	r9, #6
 8002d8e:	f04f 0907 	movne.w	r9, #7
 8002d92:	e7a3      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
 8002d94:	46c1      	mov	r9, r8
 8002d96:	e7a1      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
 8002d98:	f04f 0902 	mov.w	r9, #2
 8002d9c:	e79e      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
 8002d9e:	f04f 0903 	mov.w	r9, #3
 8002da2:	e79b      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
 8002da4:	f04f 0904 	mov.w	r9, #4
 8002da8:	e798      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
 8002daa:	f04f 0905 	mov.w	r9, #5
 8002dae:	e795      	b.n	8002cdc <HAL_GPIO_DeInit+0x24>
        EXTI->IMR1 &= ~(iocurrent);
 8002db0:	683c      	ldr	r4, [r7, #0]
 8002db2:	ea24 0406 	bic.w	r4, r4, r6
 8002db6:	603c      	str	r4, [r7, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002db8:	687c      	ldr	r4, [r7, #4]
 8002dba:	ea24 0406 	bic.w	r4, r4, r6
 8002dbe:	607c      	str	r4, [r7, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8002dc0:	68fc      	ldr	r4, [r7, #12]
 8002dc2:	ea24 0406 	bic.w	r4, r4, r6
 8002dc6:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002dc8:	68bc      	ldr	r4, [r7, #8]
 8002dca:	ea24 0406 	bic.w	r4, r4, r6
 8002dce:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002dd0:	688c      	ldr	r4, [r1, #8]
 8002dd2:	ea24 040e 	bic.w	r4, r4, lr
 8002dd6:	608c      	str	r4, [r1, #8]
 8002dd8:	e785      	b.n	8002ce6 <HAL_GPIO_DeInit+0x2e>
  }
}
 8002dda:	b003      	add	sp, #12
 8002ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010400 	.word	0x40010400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	48000400 	.word	0x48000400

08002df0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002df0:	6903      	ldr	r3, [r0, #16]
 8002df2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002df4:	bf14      	ite	ne
 8002df6:	2001      	movne	r0, #1
 8002df8:	2000      	moveq	r0, #0
 8002dfa:	4770      	bx	lr

08002dfc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	b10a      	cbz	r2, 8002e02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfe:	6181      	str	r1, [r0, #24]
 8002e00:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e02:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002e04:	4770      	bx	lr

08002e06 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e0e:	bf1c      	itt	ne
 8002e10:	2200      	movne	r2, #0
 8002e12:	629a      	strne	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	f012 0f01 	tst.w	r2, #1
 8002e1c:	d103      	bne.n	8002e26 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	619a      	str	r2, [r3, #24]
  }
}
 8002e26:	4770      	bx	lr

08002e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e28:	b430      	push	{r4, r5}
 8002e2a:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e2c:	6805      	ldr	r5, [r0, #0]
 8002e2e:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e30:	4323      	orrs	r3, r4
 8002e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e36:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e40:	0d64      	lsrs	r4, r4, #21
 8002e42:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002e46:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002e4a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002e4e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002e52:	f044 0403 	orr.w	r4, r4, #3
 8002e56:	ea20 0004 	bic.w	r0, r0, r4
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e5e:	bc30      	pop	{r4, r5}
 8002e60:	4770      	bx	lr

08002e62 <I2C_IsErrorOccurred>:
{
 8002e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e66:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e6c:	f016 0610 	ands.w	r6, r6, #16
 8002e70:	d07d      	beq.n	8002f6e <I2C_IsErrorOccurred+0x10c>
 8002e72:	460d      	mov	r5, r1
 8002e74:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e76:	2210      	movs	r2, #16
 8002e78:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8002e7a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	4637      	mov	r7, r6
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	f04f 0a20 	mov.w	sl, #32
              status = HAL_ERROR;
 8002e82:	f04f 0901 	mov.w	r9, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6993      	ldr	r3, [r2, #24]
 8002e8a:	f013 0f20 	tst.w	r3, #32
 8002e8e:	d12f      	bne.n	8002ef0 <I2C_IsErrorOccurred+0x8e>
 8002e90:	bb8f      	cbnz	r7, 8002ef6 <I2C_IsErrorOccurred+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8002e92:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002e96:	d0f7      	beq.n	8002e88 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7ff fd88 	bl	80029ac <HAL_GetTick>
 8002e9c:	eba0 0008 	sub.w	r0, r0, r8
 8002ea0:	42a8      	cmp	r0, r5
 8002ea2:	d801      	bhi.n	8002ea8 <I2C_IsErrorOccurred+0x46>
 8002ea4:	2d00      	cmp	r5, #0
 8002ea6:	d1ee      	bne.n	8002e86 <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8002eac:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8002eb0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb2:	6991      	ldr	r1, [r2, #24]
 8002eb4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002eb8:	d004      	beq.n	8002ec4 <I2C_IsErrorOccurred+0x62>
 8002eba:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002ebe:	d101      	bne.n	8002ec4 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d10d      	bne.n	8002ee0 <I2C_IsErrorOccurred+0x7e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f013 0f20 	tst.w	r3, #32
 8002ecc:	d1db      	bne.n	8002e86 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ece:	f7ff fd6d 	bl	80029ac <HAL_GetTick>
 8002ed2:	eba0 0008 	sub.w	r0, r0, r8
 8002ed6:	2819      	cmp	r0, #25
 8002ed8:	d9f4      	bls.n	8002ec4 <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	4656      	mov	r6, sl
              status = HAL_ERROR;
 8002edc:	464f      	mov	r7, r9
 8002ede:	e7d2      	b.n	8002e86 <I2C_IsErrorOccurred+0x24>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ee0:	6853      	ldr	r3, [r2, #4]
 8002ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee6:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8002ee8:	f7ff fd60 	bl	80029ac <HAL_GetTick>
 8002eec:	4680      	mov	r8, r0
 8002eee:	e7e9      	b.n	8002ec4 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8002ef0:	b90f      	cbnz	r7, 8002ef6 <I2C_IsErrorOccurred+0x94>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002ef6:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8002efa:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f04:	d005      	beq.n	8002f12 <I2C_IsErrorOccurred+0xb0>
    error_code |= HAL_I2C_ERROR_BERR;
 8002f06:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f0e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f16:	d02c      	beq.n	8002f72 <I2C_IsErrorOccurred+0x110>
    error_code |= HAL_I2C_ERROR_OVR;
 8002f18:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f22:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f24:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f28:	d005      	beq.n	8002f36 <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f2a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f34:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff65 	bl	8002e06 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	6853      	ldr	r3, [r2, #4]
 8002f40:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002f44:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002f48:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002f52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f54:	4333      	orrs	r3, r6
 8002f56:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f68:	2001      	movs	r0, #1
}
 8002f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e7c4      	b.n	8002efc <I2C_IsErrorOccurred+0x9a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f76:	d1d8      	bne.n	8002f2a <I2C_IsErrorOccurred+0xc8>
  if (status != HAL_OK)
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d0f6      	beq.n	8002f6a <I2C_IsErrorOccurred+0x108>
 8002f7c:	e7db      	b.n	8002f36 <I2C_IsErrorOccurred+0xd4>

08002f7e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002f7e:	b570      	push	{r4, r5, r6, lr}
 8002f80:	4604      	mov	r4, r0
 8002f82:	460d      	mov	r5, r1
 8002f84:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f013 0f02 	tst.w	r3, #2
 8002f8e:	d122      	bne.n	8002fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f90:	4632      	mov	r2, r6
 8002f92:	4629      	mov	r1, r5
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff ff64 	bl	8002e62 <I2C_IsErrorOccurred>
 8002f9a:	b9f0      	cbnz	r0, 8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002fa0:	d0f1      	beq.n	8002f86 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7ff fd03 	bl	80029ac <HAL_GetTick>
 8002fa6:	1b80      	subs	r0, r0, r6
 8002fa8:	42a8      	cmp	r0, r5
 8002faa:	d801      	bhi.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	d1ea      	bne.n	8002f86 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f013 0f02 	tst.w	r3, #2
 8002fb8:	d1e5      	bne.n	8002f86 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002fce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	e000      	b.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8002fd6:	2000      	movs	r0, #0
}
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7fc      	b.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08002fde <I2C_WaitOnFlagUntilTimeout>:
{
 8002fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	4680      	mov	r8, r0
 8002fe4:	460e      	mov	r6, r1
 8002fe6:	4615      	mov	r5, r2
 8002fe8:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	f8d8 3000 	ldr.w	r3, [r8]
 8002fee:	699c      	ldr	r4, [r3, #24]
 8002ff0:	ea36 0404 	bics.w	r4, r6, r4
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2401      	moveq	r4, #1
 8002ff8:	2400      	movne	r4, #0
 8002ffa:	42ac      	cmp	r4, r5
 8002ffc:	d124      	bne.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003002:	d0f4      	beq.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7ff fcd2 	bl	80029ac <HAL_GetTick>
 8003008:	9b06      	ldr	r3, [sp, #24]
 800300a:	1ac0      	subs	r0, r0, r3
 800300c:	42b8      	cmp	r0, r7
 800300e:	d801      	bhi.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x36>
 8003010:	2f00      	cmp	r7, #0
 8003012:	d1ea      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003014:	f8d8 3000 	ldr.w	r3, [r8]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	ea36 0303 	bics.w	r3, r6, r3
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	42ab      	cmp	r3, r5
 8003026:	d1e0      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800302c:	f043 0320 	orr.w	r3, r3, #32
 8003030:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003034:	2320      	movs	r3, #32
 8003036:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	2300      	movs	r3, #0
 800303c:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003040:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
          return HAL_ERROR;
 8003044:	2001      	movs	r0, #1
 8003046:	e000      	b.n	800304a <I2C_WaitOnFlagUntilTimeout+0x6c>
  return HAL_OK;
 8003048:	2000      	movs	r0, #0
}
 800304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800304e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800304e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003050:	4604      	mov	r4, r0
 8003052:	460d      	mov	r5, r1
 8003054:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f013 0f20 	tst.w	r3, #32
 800305e:	d00b      	beq.n	8003078 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
  return HAL_OK;
 8003060:	2700      	movs	r7, #0
 8003062:	e027      	b.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f013 0f20 	tst.w	r3, #32
 800306c:	d013      	beq.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f013 0f20 	tst.w	r3, #32
 8003076:	d11d      	bne.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	4632      	mov	r2, r6
 800307a:	4629      	mov	r1, r5
 800307c:	4620      	mov	r0, r4
 800307e:	f7ff fef0 	bl	8002e62 <I2C_IsErrorOccurred>
 8003082:	4607      	mov	r7, r0
 8003084:	b9a8      	cbnz	r0, 80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7ff fc91 	bl	80029ac <HAL_GetTick>
 800308a:	1b80      	subs	r0, r0, r6
 800308c:	42a8      	cmp	r0, r5
 800308e:	d8e9      	bhi.n	8003064 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d1ec      	bne.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 8003094:	e7e6      	b.n	8003064 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003098:	f043 0320 	orr.w	r3, r3, #32
 800309c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	2320      	movs	r3, #32
 80030a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80030aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80030ae:	2701      	movs	r7, #1
 80030b0:	e000      	b.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      return HAL_ERROR;
 80030b2:	2701      	movs	r7, #1
}
 80030b4:	4638      	mov	r0, r7
 80030b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d057      	beq.n	800316c <HAL_I2C_Init+0xb4>
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d04c      	beq.n	8003162 <HAL_I2C_Init+0xaa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	2324      	movs	r3, #36	; 0x24
 80030ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80030ce:	6822      	ldr	r2, [r4, #0]
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80030e0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6893      	ldr	r3, [r2, #8]
 80030e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ec:	68e3      	ldr	r3, [r4, #12]
 80030ee:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030f0:	6822      	ldr	r2, [r4, #0]
 80030f2:	68a3      	ldr	r3, [r4, #8]
 80030f4:	bf0c      	ite	eq
 80030f6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030fa:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80030fe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003100:	68e3      	ldr	r3, [r4, #12]
 8003102:	2b02      	cmp	r3, #2
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	6853      	ldr	r3, [r2, #4]
 8003108:	bf0c      	ite	eq
 800310a:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310e:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 8003112:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	6853      	ldr	r3, [r2, #4]
 8003118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	68d3      	ldr	r3, [r2, #12]
 8003126:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800312a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	6961      	ldr	r1, [r4, #20]
 8003132:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003134:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003136:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800313a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	69e3      	ldr	r3, [r4, #28]
 8003140:	6a21      	ldr	r1, [r4, #32]
 8003142:	430b      	orrs	r3, r1
 8003144:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	2000      	movs	r0, #0
 8003152:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003154:	2320      	movs	r3, #32
 8003156:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003160:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003166:	f7ff f94b 	bl	8002400 <HAL_I2C_MspInit>
 800316a:	e7ad      	b.n	80030c8 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 800316c:	2001      	movs	r0, #1
}
 800316e:	4770      	bx	lr

08003170 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003170:	b1a8      	cbz	r0, 800319e <HAL_I2C_DeInit+0x2e>
{
 8003172:	b510      	push	{r4, lr}
 8003174:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003176:	2324      	movs	r3, #36	; 0x24
 8003178:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800317c:	6802      	ldr	r2, [r0, #0]
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003186:	f7ff f981 	bl	800248c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318a:	2000      	movs	r0, #0
 800318c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800318e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8003198:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800319c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800319e:	2001      	movs	r0, #1
}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_I2C_Mem_Write>:
{
 80031a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a8:	b083      	sub	sp, #12
 80031aa:	460d      	mov	r5, r1
 80031ac:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80031b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80031b6:	b2c9      	uxtb	r1, r1
 80031b8:	2920      	cmp	r1, #32
 80031ba:	f040 80e3 	bne.w	8003384 <HAL_I2C_Mem_Write+0x1e0>
 80031be:	4604      	mov	r4, r0
 80031c0:	4690      	mov	r8, r2
 80031c2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80031c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031c6:	b1cb      	cbz	r3, 80031fc <HAL_I2C_Mem_Write+0x58>
 80031c8:	f1ba 0f00 	cmp.w	sl, #0
 80031cc:	d016      	beq.n	80031fc <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 80031ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f000 80da 	beq.w	800338c <HAL_I2C_Mem_Write+0x1e8>
 80031d8:	f04f 0b01 	mov.w	fp, #1
 80031dc:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80031e0:	f7ff fbe4 	bl	80029ac <HAL_GetTick>
 80031e4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031e6:	9000      	str	r0, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	465a      	mov	r2, fp
 80031ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff fef4 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 80031f6:	b130      	cbz	r0, 8003206 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80031f8:	2001      	movs	r0, #1
 80031fa:	e0c4      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003200:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003202:	2001      	movs	r0, #1
 8003204:	e0bf      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003206:	2321      	movs	r3, #33	; 0x21
 8003208:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003212:	2300      	movs	r3, #0
 8003214:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003218:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800321a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800321e:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003220:	4b5e      	ldr	r3, [pc, #376]	; (800339c <HAL_I2C_Mem_Write+0x1f8>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003228:	fa5f f289 	uxtb.w	r2, r9
 800322c:	4629      	mov	r1, r5
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff fdfa 	bl	8002e28 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003234:	4632      	mov	r2, r6
 8003236:	4639      	mov	r1, r7
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fea0 	bl	8002f7e <I2C_WaitOnTXISFlagUntilTimeout>
 800323e:	bb88      	cbnz	r0, 80032a4 <HAL_I2C_Mem_Write+0x100>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003240:	45d9      	cmp	r9, fp
 8003242:	d120      	bne.n	8003286 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	fa5f f288 	uxtb.w	r2, r8
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	9600      	str	r6, [sp, #0]
 800324e:	463b      	mov	r3, r7
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fec2 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325a:	bb18      	cbnz	r0, 80032a4 <HAL_I2C_Mem_Write+0x100>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800325c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2bff      	cmp	r3, #255	; 0xff
 8003262:	d924      	bls.n	80032ae <HAL_I2C_Mem_Write+0x10a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003270:	4629      	mov	r1, r5
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff fdd8 	bl	8002e28 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003278:	f04f 0800 	mov.w	r8, #0
 800327c:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003280:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8003284:	e02f      	b.n	80032e6 <HAL_I2C_Mem_Write+0x142>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	4632      	mov	r2, r6
 8003290:	4639      	mov	r1, r7
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fe73 	bl	8002f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003298:	b920      	cbnz	r0, 80032a4 <HAL_I2C_Mem_Write+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	fa5f f388 	uxtb.w	r3, r8
 80032a0:	6293      	str	r3, [r2, #40]	; 0x28
 80032a2:	e7d3      	b.n	800324c <HAL_I2C_Mem_Write+0xa8>
      __HAL_UNLOCK(hi2c);
 80032a4:	2300      	movs	r3, #0
 80032a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
 80032ac:	e06b      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
      hi2c->XferSize = hi2c->XferCount;
 80032ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032b0:	b292      	uxth	r2, r2
 80032b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	4629      	mov	r1, r5
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7ff fdb1 	bl	8002e28 <I2C_TransferConfig>
 80032c6:	e7d7      	b.n	8003278 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = hi2c->XferCount;
 80032c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032ca:	b292      	uxth	r2, r2
 80032cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ce:	f8cd 8000 	str.w	r8, [sp]
 80032d2:	4653      	mov	r3, sl
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	4629      	mov	r1, r5
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fda5 	bl	8002e28 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80032de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d032      	beq.n	800334c <HAL_I2C_Mem_Write+0x1a8>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e6:	4632      	mov	r2, r6
 80032e8:	4639      	mov	r1, r7
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff fe47 	bl	8002f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d14d      	bne.n	8003390 <HAL_I2C_Mem_Write+0x1ec>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80032fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032fe:	3301      	adds	r3, #1
 8003300:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003304:	3b01      	subs	r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800330a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003312:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003314:	b292      	uxth	r2, r2
 8003316:	2a00      	cmp	r2, #0
 8003318:	d0e1      	beq.n	80032de <HAL_I2C_Mem_Write+0x13a>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1df      	bne.n	80032de <HAL_I2C_Mem_Write+0x13a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	9600      	str	r6, [sp, #0]
 8003320:	463b      	mov	r3, r7
 8003322:	4642      	mov	r2, r8
 8003324:	4649      	mov	r1, r9
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff fe59 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 800332c:	bb90      	cbnz	r0, 8003394 <HAL_I2C_Mem_Write+0x1f0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800332e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2bff      	cmp	r3, #255	; 0xff
 8003334:	d9c8      	bls.n	80032c8 <HAL_I2C_Mem_Write+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800333a:	f8cd 8000 	str.w	r8, [sp]
 800333e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003342:	4629      	mov	r1, r5
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff fd6f 	bl	8002e28 <I2C_TransferConfig>
 800334a:	e7c8      	b.n	80032de <HAL_I2C_Mem_Write+0x13a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	4632      	mov	r2, r6
 800334e:	4639      	mov	r1, r7
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff fe7c 	bl	800304e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003356:	b9f8      	cbnz	r0, 8003398 <HAL_I2C_Mem_Write+0x1f4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800335e:	6821      	ldr	r1, [r4, #0]
 8003360:	684b      	ldr	r3, [r1, #4]
 8003362:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003366:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800336a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003378:	2300      	movs	r3, #0
 800337a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800337e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003382:	e000      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    return HAL_BUSY;
 8003384:	2002      	movs	r0, #2
}
 8003386:	b003      	add	sp, #12
 8003388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800338c:	2002      	movs	r0, #2
 800338e:	e7fa      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
        return HAL_ERROR;
 8003390:	2001      	movs	r0, #1
 8003392:	e7f8      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
          return HAL_ERROR;
 8003394:	2001      	movs	r0, #1
 8003396:	e7f6      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
      return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
 800339a:	e7f4      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
 800339c:	80002000 	.word	0x80002000

080033a0 <HAL_I2C_Mem_Read>:
{
 80033a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a4:	b083      	sub	sp, #12
 80033a6:	460d      	mov	r5, r1
 80033a8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80033ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80033b2:	b2c9      	uxtb	r1, r1
 80033b4:	2920      	cmp	r1, #32
 80033b6:	f040 80e4 	bne.w	8003582 <HAL_I2C_Mem_Read+0x1e2>
 80033ba:	4604      	mov	r4, r0
 80033bc:	4690      	mov	r8, r2
 80033be:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80033c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033c2:	b1cb      	cbz	r3, 80033f8 <HAL_I2C_Mem_Read+0x58>
 80033c4:	f1ba 0f00 	cmp.w	sl, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80033ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f000 80db 	beq.w	800358a <HAL_I2C_Mem_Read+0x1ea>
 80033d4:	f04f 0b01 	mov.w	fp, #1
 80033d8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80033dc:	f7ff fae6 	bl	80029ac <HAL_GetTick>
 80033e0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e2:	9000      	str	r0, [sp, #0]
 80033e4:	2319      	movs	r3, #25
 80033e6:	465a      	mov	r2, fp
 80033e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ec:	4620      	mov	r0, r4
 80033ee:	f7ff fdf6 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 80033f2:	b130      	cbz	r0, 8003402 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80033f4:	2001      	movs	r0, #1
 80033f6:	e0c5      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033fc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
 8003400:	e0c0      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003402:	2322      	movs	r3, #34	; 0x22
 8003404:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003408:	2340      	movs	r3, #64	; 0x40
 800340a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340e:	2300      	movs	r3, #0
 8003410:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003414:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003416:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800341a:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800341c:	4a5f      	ldr	r2, [pc, #380]	; (800359c <HAL_I2C_Mem_Read+0x1fc>)
 800341e:	9200      	str	r2, [sp, #0]
 8003420:	fa5f f289 	uxtb.w	r2, r9
 8003424:	4629      	mov	r1, r5
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff fcfe 	bl	8002e28 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342c:	4632      	mov	r2, r6
 800342e:	4639      	mov	r1, r7
 8003430:	4620      	mov	r0, r4
 8003432:	f7ff fda4 	bl	8002f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003436:	bb88      	cbnz	r0, 800349c <HAL_I2C_Mem_Read+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003438:	45d9      	cmp	r9, fp
 800343a:	d120      	bne.n	800347e <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	fa5f f288 	uxtb.w	r2, r8
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	9600      	str	r6, [sp, #0]
 8003446:	463b      	mov	r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	2140      	movs	r1, #64	; 0x40
 800344c:	4620      	mov	r0, r4
 800344e:	f7ff fdc6 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003452:	bb18      	cbnz	r0, 800349c <HAL_I2C_Mem_Read+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d924      	bls.n	80034a6 <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_I2C_Mem_Read+0x200>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003468:	4629      	mov	r1, r5
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fcdc 	bl	8002e28 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	f04f 0800 	mov.w	r8, #0
 8003474:	f04f 0904 	mov.w	r9, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003478:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800347c:	e030      	b.n	80034e0 <HAL_I2C_Mem_Read+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	4632      	mov	r2, r6
 8003488:	4639      	mov	r1, r7
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff fd77 	bl	8002f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003490:	b920      	cbnz	r0, 800349c <HAL_I2C_Mem_Read+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	fa5f f388 	uxtb.w	r3, r8
 8003498:	6293      	str	r3, [r2, #40]	; 0x28
 800349a:	e7d3      	b.n	8003444 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
 80034a4:	e06e      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->XferSize = hi2c->XferCount;
 80034a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034a8:	b292      	uxth	r2, r2
 80034aa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_I2C_Mem_Read+0x200>)
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	4629      	mov	r1, r5
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff fcb5 	bl	8002e28 <I2C_TransferConfig>
 80034be:	e7d7      	b.n	8003470 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = hi2c->XferCount;
 80034c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034c2:	b292      	uxth	r2, r2
 80034c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034c6:	f8cd 8000 	str.w	r8, [sp]
 80034ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	4629      	mov	r1, r5
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7ff fca8 	bl	8002e28 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80034d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d034      	beq.n	800354a <HAL_I2C_Mem_Read+0x1aa>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034e0:	9600      	str	r6, [sp, #0]
 80034e2:	463b      	mov	r3, r7
 80034e4:	4642      	mov	r2, r8
 80034e6:	4649      	mov	r1, r9
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff fd78 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d14d      	bne.n	800358e <HAL_I2C_Mem_Read+0x1ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80034fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034fc:	3301      	adds	r3, #1
 80034fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003500:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003508:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800350a:	3a01      	subs	r2, #1
 800350c:	b292      	uxth	r2, r2
 800350e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003510:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003512:	b292      	uxth	r2, r2
 8003514:	2a00      	cmp	r2, #0
 8003516:	d0df      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x138>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1dd      	bne.n	80034d8 <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	9600      	str	r6, [sp, #0]
 800351e:	463b      	mov	r3, r7
 8003520:	4642      	mov	r2, r8
 8003522:	4651      	mov	r1, sl
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff fd5a 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 800352a:	bb90      	cbnz	r0, 8003592 <HAL_I2C_Mem_Read+0x1f2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2bff      	cmp	r3, #255	; 0xff
 8003532:	d9c5      	bls.n	80034c0 <HAL_I2C_Mem_Read+0x120>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003538:	f8cd 8000 	str.w	r8, [sp]
 800353c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003540:	4629      	mov	r1, r5
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff fc70 	bl	8002e28 <I2C_TransferConfig>
 8003548:	e7c6      	b.n	80034d8 <HAL_I2C_Mem_Read+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354a:	4632      	mov	r2, r6
 800354c:	4639      	mov	r1, r7
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff fd7d 	bl	800304e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003554:	b9f8      	cbnz	r0, 8003596 <HAL_I2C_Mem_Read+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	2220      	movs	r2, #32
 800355a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800355c:	6821      	ldr	r1, [r4, #0]
 800355e:	684b      	ldr	r3, [r1, #4]
 8003560:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003564:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003568:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003572:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003576:	2300      	movs	r3, #0
 8003578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800357c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003580:	e000      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
    return HAL_BUSY;
 8003582:	2002      	movs	r0, #2
}
 8003584:	b003      	add	sp, #12
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800358a:	2002      	movs	r0, #2
 800358c:	e7fa      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
        return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e7f8      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
          return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
 8003594:	e7f6      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
      return HAL_ERROR;
 8003596:	2001      	movs	r0, #1
 8003598:	e7f4      	b.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
 800359a:	bf00      	nop
 800359c:	80002000 	.word	0x80002000
 80035a0:	80002400 	.word	0x80002400

080035a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035a4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	2a20      	cmp	r2, #32
 80035ae:	d123      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80035b4:	2a01      	cmp	r2, #1
 80035b6:	d021      	beq.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80035b8:	2201      	movs	r2, #1
 80035ba:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c4:	6800      	ldr	r0, [r0, #0]
 80035c6:	6802      	ldr	r2, [r0, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	6802      	ldr	r2, [r0, #0]
 80035d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035d6:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	6802      	ldr	r2, [r0, #0]
 80035dc:	4311      	orrs	r1, r2
 80035de:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	680a      	ldr	r2, [r1, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	2000      	movs	r0, #0
 80035f2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80035f6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2002      	movs	r0, #2
 80035fa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80035fc:	2002      	movs	r0, #2
  }
}
 80035fe:	4770      	bx	lr

08003600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003600:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	2a20      	cmp	r2, #32
 800360a:	d121      	bne.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003610:	2a01      	cmp	r2, #1
 8003612:	d01f      	beq.n	8003654 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003614:	2201      	movs	r2, #1
 8003616:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003620:	6800      	ldr	r0, [r0, #0]
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800362e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003632:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003636:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	680a      	ldr	r2, [r1, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	2000      	movs	r0, #0
 800364a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800364e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003650:	2002      	movs	r0, #2
 8003652:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003654:	2002      	movs	r0, #2
  }
}
 8003656:	4770      	bx	lr

08003658 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <HAL_PWREx_GetVoltageRange+0xc>)
 800365a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800365c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000

08003668 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003668:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800366c:	d00f      	beq.n	800368e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d036      	beq.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x82>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003688:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800368a:	2000      	movs	r0, #0
 800368c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369a:	d024      	beq.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x7e>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2132      	movs	r1, #50	; 0x32
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4910      	ldr	r1, [pc, #64]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>)
 80036b6:	fba1 1303 	umull	r1, r3, r1, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036be:	6952      	ldr	r2, [r2, #20]
 80036c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036c4:	d007      	beq.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
        wait_loop_index--;
 80036c8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ca:	694a      	ldr	r2, [r1, #20]
 80036cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036d0:	d001      	beq.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f8      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80036d8:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80036da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036de:	bf0c      	ite	eq
 80036e0:	2000      	moveq	r0, #0
 80036e2:	2003      	movne	r0, #3
 80036e4:	4770      	bx	lr
  return HAL_OK;
 80036e6:	2000      	movs	r0, #0
 80036e8:	4770      	bx	lr
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40007000 	.word	0x40007000
 80036f4:	2000003c 	.word	0x2000003c
 80036f8:	431bde83 	.word	0x431bde83

080036fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036fc:	b530      	push	{r4, r5, lr}
 80036fe:	b083      	sub	sp, #12
 8003700:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800370a:	d00c      	beq.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff ffa4 	bl	8003658 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003710:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003714:	d018      	beq.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003716:	2c80      	cmp	r4, #128	; 0x80
 8003718:	d81f      	bhi.n	800375a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800371a:	d02d      	beq.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800371c:	2c70      	cmp	r4, #112	; 0x70
 800371e:	bf14      	ite	ne
 8003720:	2400      	movne	r4, #0
 8003722:	2401      	moveq	r4, #1
 8003724:	e01a      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4d15      	ldr	r5, [pc, #84]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003728:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003730:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800373a:	f7ff ff8d 	bl	8003658 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	65ab      	str	r3, [r5, #88]	; 0x58
 8003746:	e7e3      	b.n	8003710 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003748:	2c80      	cmp	r4, #128	; 0x80
 800374a:	d904      	bls.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 800374c:	2ca0      	cmp	r4, #160	; 0xa0
 800374e:	bf8c      	ite	hi
 8003750:	2402      	movhi	r4, #2
 8003752:	2401      	movls	r4, #1
 8003754:	e002      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003756:	2400      	movs	r4, #0
 8003758:	e000      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800375a:	2403      	movs	r4, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800375c:	4908      	ldr	r1, [pc, #32]	; (8003780 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800375e:	680b      	ldr	r3, [r1, #0]
 8003760:	f023 0307 	bic.w	r3, r3, #7
 8003764:	4323      	orrs	r3, r4
 8003766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003768:	6808      	ldr	r0, [r1, #0]
 800376a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800376e:	1b00      	subs	r0, r0, r4
 8003770:	bf18      	it	ne
 8003772:	2001      	movne	r0, #1
 8003774:	b003      	add	sp, #12
 8003776:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003778:	2402      	movs	r4, #2
 800377a:	e7ef      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x60>
 800377c:	40021000 	.word	0x40021000
 8003780:	40022000 	.word	0x40022000

08003784 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003788:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378a:	f013 030c 	ands.w	r3, r3, #12
 800378e:	d00e      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x2a>
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d006      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003794:	2b04      	cmp	r3, #4
 8003796:	d03f      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003798:	2b08      	cmp	r3, #8
 800379a:	4821      	ldr	r0, [pc, #132]	; (8003820 <HAL_RCC_GetSysClockFreq+0x9c>)
 800379c:	bf18      	it	ne
 800379e:	2000      	movne	r0, #0
 80037a0:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a2:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037a6:	2a01      	cmp	r2, #1
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e012      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b6:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037b8:	bf07      	ittee	eq
 80037ba:	f8d2 2094 	ldreq.w	r2, [r2, #148]	; 0x94
 80037be:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c2:	6812      	ldrne	r2, [r2, #0]
 80037c4:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80037c8:	4916      	ldr	r1, [pc, #88]	; (8003824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ce:	b323      	cbz	r3, 800381a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d11f      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d017      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x8c>
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	bf08      	it	eq
 80037e6:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e8:	490c      	ldr	r1, [pc, #48]	; (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037ea:	68ca      	ldr	r2, [r1, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ec:	68cb      	ldr	r3, [r1, #12]
 80037ee:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f6:	68c8      	ldr	r0, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80037fc:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037fe:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003802:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8003806:	3001      	adds	r0, #1
 8003808:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800380a:	fbb3 f0f0 	udiv	r0, r3, r0
 800380e:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003812:	e7e9      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x64>
 8003814:	2000      	movs	r0, #0
  return sysclockfreq;
 8003816:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000
 8003820:	007a1200 	.word	0x007a1200
 8003824:	0800a308 	.word	0x0800a308
 8003828:	00f42400 	.word	0x00f42400

0800382c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800382c:	2800      	cmp	r0, #0
 800382e:	f000 82f9 	beq.w	8003e24 <HAL_RCC_OscConfig+0x5f8>
{
 8003832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003836:	b083      	sub	sp, #12
 8003838:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b98      	ldr	r3, [pc, #608]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 800383c:	689d      	ldr	r5, [r3, #8]
 800383e:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003842:	68de      	ldr	r6, [r3, #12]
 8003844:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003848:	6803      	ldr	r3, [r0, #0]
 800384a:	f013 0f10 	tst.w	r3, #16
 800384e:	d05f      	beq.n	8003910 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003850:	b1f5      	cbz	r5, 8003890 <HAL_RCC_OscConfig+0x64>
 8003852:	2d0c      	cmp	r5, #12
 8003854:	d01a      	beq.n	800388c <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003856:	69a3      	ldr	r3, [r4, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80ba 	beq.w	80039d2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800385e:	4a8f      	ldr	r2, [pc, #572]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003868:	f7ff f8a0 	bl	80029ac <HAL_GetTick>
 800386c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003a9c <HAL_RCC_OscConfig+0x270>
 8003872:	f8d8 3000 	ldr.w	r3, [r8]
 8003876:	f013 0f02 	tst.w	r3, #2
 800387a:	f040 8097 	bne.w	80039ac <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800387e:	f7ff f895 	bl	80029ac <HAL_GetTick>
 8003882:	1bc0      	subs	r0, r0, r7
 8003884:	2802      	cmp	r0, #2
 8003886:	d9f4      	bls.n	8003872 <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 8003888:	2003      	movs	r0, #3
 800388a:	e2d6      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800388c:	2e01      	cmp	r6, #1
 800388e:	d1e2      	bne.n	8003856 <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003890:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f013 0f02 	tst.w	r3, #2
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_OscConfig+0x76>
 800389a:	69a3      	ldr	r3, [r4, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 82c3 	beq.w	8003e28 <HAL_RCC_OscConfig+0x5fc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038a2:	6a20      	ldr	r0, [r4, #32]
 80038a4:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f013 0f08 	tst.w	r3, #8
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80038ae:	bf12      	itee	ne
 80038b0:	681b      	ldrne	r3, [r3, #0]
 80038b2:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 80038b6:	091b      	lsreq	r3, r3, #4
 80038b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038bc:	4298      	cmp	r0, r3
 80038be:	d856      	bhi.n	800396e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	f042 0208 	orr.w	r2, r2, #8
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	69e1      	ldr	r1, [r4, #28]
 80038da:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038e2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	d05a      	beq.n	800399e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e8:	f7ff ff4c 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80038ec:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038f4:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_RCC_OscConfig+0x274>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	40d8      	lsrs	r0, r3
 80038fe:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_RCC_OscConfig+0x278>)
 8003900:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003902:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x27c>)
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	f7ff f80d 	bl	8002924 <HAL_InitTick>
        if(status != HAL_OK)
 800390a:	2800      	cmp	r0, #0
 800390c:	f040 8295 	bne.w	8003e3a <HAL_RCC_OscConfig+0x60e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f013 0f01 	tst.w	r3, #1
 8003916:	d07d      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003918:	2d08      	cmp	r5, #8
 800391a:	d072      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1d6>
 800391c:	2d0c      	cmp	r5, #12
 800391e:	d06e      	beq.n	80039fe <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	6863      	ldr	r3, [r4, #4]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003926:	f000 8094 	beq.w	8003a52 <HAL_RCC_OscConfig+0x226>
 800392a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392e:	f000 8096 	beq.w	8003a5e <HAL_RCC_OscConfig+0x232>
 8003932:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003942:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003944:	6863      	ldr	r3, [r4, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8096 	beq.w	8003a78 <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 800394c:	f7ff f82e 	bl	80029ac <HAL_GetTick>
 8003950:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003952:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8003a9c <HAL_RCC_OscConfig+0x270>
 8003956:	f8d8 3000 	ldr.w	r3, [r8]
 800395a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800395e:	d159      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7ff f824 	bl	80029ac <HAL_GetTick>
 8003964:	1bc0      	subs	r0, r0, r7
 8003966:	2864      	cmp	r0, #100	; 0x64
 8003968:	d9f5      	bls.n	8003956 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800396a:	2003      	movs	r0, #3
 800396c:	e265      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800396e:	f7ff fec5 	bl	80036fc <RCC_SetFlashLatencyFromMSIRange>
 8003972:	2800      	cmp	r0, #0
 8003974:	f040 825a 	bne.w	8003e2c <HAL_RCC_OscConfig+0x600>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003978:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f042 0208 	orr.w	r2, r2, #8
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003988:	6a21      	ldr	r1, [r4, #32]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	69e1      	ldr	r1, [r4, #28]
 8003992:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003996:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	e7a4      	b.n	80038e8 <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399e:	6a20      	ldr	r0, [r4, #32]
 80039a0:	f7ff feac 	bl	80036fc <RCC_SetFlashLatencyFromMSIRange>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d09f      	beq.n	80038e8 <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
 80039aa:	e246      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ac:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039bc:	6a21      	ldr	r1, [r4, #32]
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	69e1      	ldr	r1, [r4, #28]
 80039c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80039ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	e79e      	b.n	8003910 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 80039d2:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039dc:	f7fe ffe6 	bl	80029ac <HAL_GetTick>
 80039e0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039e2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003a9c <HAL_RCC_OscConfig+0x270>
 80039e6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ea:	f013 0f02 	tst.w	r3, #2
 80039ee:	d08f      	beq.n	8003910 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f0:	f7fe ffdc 	bl	80029ac <HAL_GetTick>
 80039f4:	1bc0      	subs	r0, r0, r7
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d9f5      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e21d      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fe:	2e03      	cmp	r6, #3
 8003a00:	d18e      	bne.n	8003920 <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1e8>
 8003a0c:	6863      	ldr	r3, [r4, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 820e 	beq.w	8003e30 <HAL_RCC_OscConfig+0x604>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f013 0f02 	tst.w	r3, #2
 8003a1a:	d05a      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2a6>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a1c:	2d04      	cmp	r5, #4
 8003a1e:	d047      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x284>
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	d043      	beq.n	8003aac <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a24:	68e3      	ldr	r3, [r4, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d079      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a34:	f7fe ffba 	bl	80029ac <HAL_GetTick>
 8003a38:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3a:	4f18      	ldr	r7, [pc, #96]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a42:	d163      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fe ffb2 	bl	80029ac <HAL_GetTick>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	2802      	cmp	r0, #2
 8003a4c:	d9f6      	bls.n	8003a3c <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 8003a4e:	2003      	movs	r0, #3
 8003a50:	e1f3      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e772      	b.n	8003944 <HAL_RCC_OscConfig+0x118>
 8003a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e765      	b.n	8003944 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003a78:	f7fe ff98 	bl	80029ac <HAL_GetTick>
 8003a7c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8003a9c <HAL_RCC_OscConfig+0x270>
 8003a82:	f8d8 3000 	ldr.w	r3, [r8]
 8003a86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a8a:	d0c3      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe ff8e 	bl	80029ac <HAL_GetTick>
 8003a90:	1bc0      	subs	r0, r0, r7
 8003a92:	2864      	cmp	r0, #100	; 0x64
 8003a94:	d9f5      	bls.n	8003a82 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8003a96:	2003      	movs	r0, #3
 8003a98:	e1cf      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	0800a2f0 	.word	0x0800a2f0
 8003aa4:	2000003c 	.word	0x2000003c
 8003aa8:	20000044 	.word	0x20000044
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aac:	2e02      	cmp	r6, #2
 8003aae:	d1b9      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	4ba5      	ldr	r3, [pc, #660]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x296>
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 81b9 	beq.w	8003e34 <HAL_RCC_OscConfig+0x608>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4aa1      	ldr	r2, [pc, #644]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003ac4:	6853      	ldr	r3, [r2, #4]
 8003ac6:	6921      	ldr	r1, [r4, #16]
 8003ac8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003acc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ad0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f013 0f08 	tst.w	r3, #8
 8003ad8:	d04c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	b39b      	cbz	r3, 8003b46 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4a9a      	ldr	r2, [pc, #616]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003ae0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003aec:	f7fe ff5e 	bl	80029ac <HAL_GetTick>
 8003af0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af2:	4f95      	ldr	r7, [pc, #596]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003af4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003af8:	f013 0f02 	tst.w	r3, #2
 8003afc:	d13a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fe ff55 	bl	80029ac <HAL_GetTick>
 8003b02:	1b80      	subs	r0, r0, r6
 8003b04:	2802      	cmp	r0, #2
 8003b06:	d9f5      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2c8>
          return HAL_TIMEOUT;
 8003b08:	2003      	movs	r0, #3
 8003b0a:	e196      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4a8e      	ldr	r2, [pc, #568]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b0e:	6853      	ldr	r3, [r2, #4]
 8003b10:	6921      	ldr	r1, [r4, #16]
 8003b12:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003b16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7d9      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4a8a      	ldr	r2, [pc, #552]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b28:	f7fe ff40 	bl	80029ac <HAL_GetTick>
 8003b2c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2e:	4f86      	ldr	r7, [pc, #536]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b36:	d0cc      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fe ff38 	bl	80029ac <HAL_GetTick>
 8003b3c:	1b80      	subs	r0, r0, r6
 8003b3e:	2802      	cmp	r0, #2
 8003b40:	d9f6      	bls.n	8003b30 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 8003b42:	2003      	movs	r0, #3
 8003b44:	e179      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_LSI_DISABLE();
 8003b46:	4a80      	ldr	r2, [pc, #512]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b48:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b54:	f7fe ff2a 	bl	80029ac <HAL_GetTick>
 8003b58:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b5a:	4f7b      	ldr	r7, [pc, #492]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b60:	f013 0f02 	tst.w	r3, #2
 8003b64:	d006      	beq.n	8003b74 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b66:	f7fe ff21 	bl	80029ac <HAL_GetTick>
 8003b6a:	1b80      	subs	r0, r0, r6
 8003b6c:	2802      	cmp	r0, #2
 8003b6e:	d9f5      	bls.n	8003b5c <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 8003b70:	2003      	movs	r0, #3
 8003b72:	e162      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f013 0f04 	tst.w	r3, #4
 8003b7a:	d07e      	beq.n	8003c7a <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b7c:	4b72      	ldr	r3, [pc, #456]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b84:	d137      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003b88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b9a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9c:	4b6b      	ldr	r3, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x520>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ba4:	d029      	beq.n	8003bfa <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d03c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x3fa>
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d042      	beq.n	8003c36 <HAL_RCC_OscConfig+0x40a>
 8003bb0:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003bb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003bbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003bc2:	f022 0204 	bic.w	r2, r2, #4
 8003bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bca:	68a3      	ldr	r3, [r4, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d040      	beq.n	8003c52 <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 8003bd0:	f7fe feec 	bl	80029ac <HAL_GetTick>
 8003bd4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8003d48 <HAL_RCC_OscConfig+0x51c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bde:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8003be2:	f013 0f02 	tst.w	r3, #2
 8003be6:	d147      	bne.n	8003c78 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fe fee0 	bl	80029ac <HAL_GetTick>
 8003bec:	1bc0      	subs	r0, r0, r7
 8003bee:	4548      	cmp	r0, r9
 8003bf0:	d9f5      	bls.n	8003bde <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	e121      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	e7d0      	b.n	8003b9c <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfa:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_RCC_OscConfig+0x520>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c04:	f7fe fed2 	bl	80029ac <HAL_GetTick>
 8003c08:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8003d4c <HAL_RCC_OscConfig+0x520>
 8003c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c16:	d1c6      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe fec8 	bl	80029ac <HAL_GetTick>
 8003c1c:	1bc0      	subs	r0, r0, r7
 8003c1e:	2802      	cmp	r0, #2
 8003c20:	d9f5      	bls.n	8003c0e <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 8003c22:	2003      	movs	r0, #3
 8003c24:	e109      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003c28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c34:	e7c9      	b.n	8003bca <HAL_RCC_OscConfig+0x39e>
 8003c36:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003c38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c3c:	f042 0204 	orr.w	r2, r2, #4
 8003c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003c44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003c50:	e7bb      	b.n	8003bca <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8003c52:	f7fe feab 	bl	80029ac <HAL_GetTick>
 8003c56:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c58:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003d48 <HAL_RCC_OscConfig+0x51c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c60:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8003c64:	f013 0f02 	tst.w	r3, #2
 8003c68:	d006      	beq.n	8003c78 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fe9f 	bl	80029ac <HAL_GetTick>
 8003c6e:	1bc0      	subs	r0, r0, r7
 8003c70:	4548      	cmp	r0, r9
 8003c72:	d9f5      	bls.n	8003c60 <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 8003c74:	2003      	movs	r0, #3
 8003c76:	e0e0      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
    if(pwrclkchanged == SET)
 8003c78:	b9ee      	cbnz	r6, 8003cb6 <HAL_RCC_OscConfig+0x48a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80db 	beq.w	8003e38 <HAL_RCC_OscConfig+0x60c>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x496>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c86:	2d0c      	cmp	r5, #12
 8003c88:	f000 80de 	beq.w	8003e48 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_PLL_DISABLE();
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c96:	f7fe fe89 	bl	80029ac <HAL_GetTick>
 8003c9a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9c:	4d2a      	ldr	r5, [pc, #168]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ca4:	f000 80b7 	beq.w	8003e16 <HAL_RCC_OscConfig+0x5ea>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fe80 	bl	80029ac <HAL_GetTick>
 8003cac:	1b00      	subs	r0, r0, r4
 8003cae:	2802      	cmp	r0, #2
 8003cb0:	d9f5      	bls.n	8003c9e <HAL_RCC_OscConfig+0x472>
            return HAL_TIMEOUT;
 8003cb2:	2003      	movs	r0, #3
 8003cb4:	e0c1      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003cb8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc0:	e7db      	b.n	8003c7a <HAL_RCC_OscConfig+0x44e>
      pll_config = RCC->PLLCFGR;
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	f003 0103 	and.w	r1, r3, #3
 8003cca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ccc:	4291      	cmp	r1, r2
 8003cce:	d00f      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4c4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cd0:	2d0c      	cmp	r5, #12
 8003cd2:	f000 80b5 	beq.w	8003e40 <HAL_RCC_OscConfig+0x614>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003cde:	f040 80b1 	bne.w	8003e44 <HAL_RCC_OscConfig+0x618>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ce2:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003cea:	d031      	beq.n	8003d50 <HAL_RCC_OscConfig+0x524>
            return HAL_ERROR;
 8003cec:	2001      	movs	r0, #1
 8003cee:	e0a4      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003cf6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003cfc:	d1e8      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d04:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003d08:	d1e2      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d0a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d10:	3a07      	subs	r2, #7
 8003d12:	bf18      	it	ne
 8003d14:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	4291      	cmp	r1, r2
 8003d18:	d1da      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003d1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d20:	0852      	lsrs	r2, r2, #1
 8003d22:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d24:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003d28:	d1d2      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003d2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d30:	0852      	lsrs	r2, r2, #1
 8003d32:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d34:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003d38:	d1ca      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_OscConfig+0x51c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d42:	d04e      	beq.n	8003de2 <HAL_RCC_OscConfig+0x5b6>
  return HAL_OK;
 8003d44:	2000      	movs	r0, #0
 8003d46:	e078      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8003d50:	4a3e      	ldr	r2, [pc, #248]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d58:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003d5a:	f7fe fe27 	bl	80029ac <HAL_GetTick>
 8003d5e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d60:	4e3a      	ldr	r6, [pc, #232]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003d62:	6833      	ldr	r3, [r6, #0]
 8003d64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d68:	d006      	beq.n	8003d78 <HAL_RCC_OscConfig+0x54c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fe fe1f 	bl	80029ac <HAL_GetTick>
 8003d6e:	1b40      	subs	r0, r0, r5
 8003d70:	2802      	cmp	r0, #2
 8003d72:	d9f6      	bls.n	8003d62 <HAL_RCC_OscConfig+0x536>
                return HAL_TIMEOUT;
 8003d74:	2003      	movs	r0, #3
 8003d76:	e060      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d78:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003d7a:	68d1      	ldr	r1, [r2, #12]
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_OscConfig+0x624>)
 8003d7e:	400b      	ands	r3, r1
 8003d80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d8c:	3901      	subs	r1, #1
 8003d8e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003d92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d94:	0909      	lsrs	r1, r1, #4
 8003d96:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003d9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d9c:	0849      	lsrs	r1, r1, #1
 8003d9e:	3901      	subs	r1, #1
 8003da0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003da4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003da6:	0849      	lsrs	r1, r1, #1
 8003da8:	3901      	subs	r1, #1
 8003daa:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003dae:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db8:	68d3      	ldr	r3, [r2, #12]
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003dc0:	f7fe fdf4 	bl	80029ac <HAL_GetTick>
 8003dc4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4d21      	ldr	r5, [pc, #132]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x5b2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe fdec 	bl	80029ac <HAL_GetTick>
 8003dd4:	1b00      	subs	r0, r0, r4
 8003dd6:	2802      	cmp	r0, #2
 8003dd8:	d9f6      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x59c>
                return HAL_TIMEOUT;
 8003dda:	2003      	movs	r0, #3
 8003ddc:	e02d      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
  return HAL_OK;
 8003dde:	2000      	movs	r0, #0
 8003de0:	e02b      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
          __HAL_RCC_PLL_ENABLE();
 8003de2:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003dea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003df2:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003df4:	f7fe fdda 	bl	80029ac <HAL_GetTick>
 8003df8:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	4d14      	ldr	r5, [pc, #80]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x5e6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe fdd2 	bl	80029ac <HAL_GetTick>
 8003e08:	1b03      	subs	r3, r0, r4
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d9f6      	bls.n	8003dfc <HAL_RCC_OscConfig+0x5d0>
              return HAL_TIMEOUT;
 8003e0e:	2003      	movs	r0, #3
 8003e10:	e013      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
  return HAL_OK;
 8003e12:	2000      	movs	r0, #0
 8003e14:	e011      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e16:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <HAL_RCC_OscConfig+0x620>)
 8003e18:	68d1      	ldr	r1, [r2, #12]
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_RCC_OscConfig+0x628>)
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003e20:	2000      	movs	r0, #0
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
    return HAL_ERROR;
 8003e24:	2001      	movs	r0, #1
}
 8003e26:	4770      	bx	lr
        return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1
 8003e2a:	e006      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
            return HAL_ERROR;
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	e004      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        return HAL_ERROR;
 8003e30:	2001      	movs	r0, #1
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
  return HAL_OK;
 8003e38:	2000      	movs	r0, #0
}
 8003e3a:	b003      	add	sp, #12
 8003e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 8003e40:	2001      	movs	r0, #1
 8003e42:	e7fa      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
            return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
 8003e46:	e7f8      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
        return HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
 8003e4a:	e7f6      	b.n	8003e3a <HAL_RCC_OscConfig+0x60e>
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	f99d808c 	.word	0xf99d808c
 8003e54:	feeefffc 	.word	0xfeeefffc

08003e58 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d076      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xf2>
{
 8003e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e60:	460d      	mov	r5, r1
 8003e62:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b5e      	ldr	r3, [pc, #376]	; (8003fe0 <HAL_RCC_ClockConfig+0x188>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	d20a      	bcs.n	8003e86 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	4a5b      	ldr	r2, [pc, #364]	; (8003fe0 <HAL_RCC_ClockConfig+0x188>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f023 0307 	bic.w	r3, r3, #7
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7c:	6813      	ldr	r3, [r2, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d163      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f013 0f02 	tst.w	r3, #2
 8003e8c:	d065      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x102>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e8e:	68a1      	ldr	r1, [r4, #8]
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003e92:	6892      	ldr	r2, [r2, #8]
 8003e94:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003e98:	4291      	cmp	r1, r2
 8003e9a:	f240 809c 	bls.w	8003fd6 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9e:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003ea0:	6893      	ldr	r3, [r2, #8]
 8003ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	f013 0f01 	tst.w	r3, #1
 8003eb0:	d039      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb2:	6862      	ldr	r2, [r4, #4]
 8003eb4:	2a03      	cmp	r2, #3
 8003eb6:	d009      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb8:	2a02      	cmp	r2, #2
 8003eba:	d026      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ebc:	bb62      	cbnz	r2, 8003f18 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f013 0f02 	tst.w	r3, #2
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e082      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ed4:	d03d      	beq.n	8003f52 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4943      	ldr	r1, [pc, #268]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003ed8:	688b      	ldr	r3, [r1, #8]
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003ee2:	f7fe fd63 	bl	80029ac <HAL_GetTick>
 8003ee6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee8:	4f3e      	ldr	r7, [pc, #248]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eea:	f241 3888 	movw	r8, #5000	; 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	6862      	ldr	r2, [r4, #4]
 8003ef6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003efa:	d014      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fe fd56 	bl	80029ac <HAL_GetTick>
 8003f00:	1b80      	subs	r0, r0, r6
 8003f02:	4540      	cmp	r0, r8
 8003f04:	d9f3      	bls.n	8003eee <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003f06:	2003      	movs	r0, #3
 8003f08:	e063      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f12:	d1e0      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
 8003f16:	e05c      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f20:	d1d9      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
 8003f24:	e055      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f013 0f02 	tst.w	r3, #2
 8003f2c:	d018      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x108>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f2e:	68a2      	ldr	r2, [r4, #8]
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d211      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x108>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4929      	ldr	r1, [pc, #164]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003f3e:	688b      	ldr	r3, [r1, #8]
 8003f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 8003f4a:	2001      	movs	r0, #1
}
 8003f4c:	4770      	bx	lr
      return HAL_ERROR;
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e03f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
        return HAL_ERROR;
 8003f52:	2001      	movs	r0, #1
 8003f54:	e03d      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	e03b      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5a:	f013 0f01 	tst.w	r3, #1
 8003f5e:	d1a8      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x5a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_RCC_ClockConfig+0x188>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	d90a      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x12a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_RCC_ClockConfig+0x188>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	432b      	orrs	r3, r5
 8003f76:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	d1e9      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f013 0f04 	tst.w	r3, #4
 8003f88:	d006      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003f8c:	6893      	ldr	r3, [r2, #8]
 8003f8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f92:	68e1      	ldr	r1, [r4, #12]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f013 0f08 	tst.w	r3, #8
 8003f9e:	d007      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x158>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa0:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003fa2:	6893      	ldr	r3, [r2, #8]
 8003fa4:	6921      	ldr	r1, [r4, #16]
 8003fa6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003faa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb0:	f7ff fbe8 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_ClockConfig+0x18c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x190>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	40d8      	lsrs	r0, r3
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x194>)
 8003fc8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x198>)
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f7fe fca9 	bl	8002924 <HAL_InitTick>
}
 8003fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	f013 0f01 	tst.w	r3, #1
 8003fda:	f47f af6a 	bne.w	8003eb2 <HAL_RCC_ClockConfig+0x5a>
 8003fde:	e7a6      	b.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	0800a2f0 	.word	0x0800a2f0
 8003fec:	2000003c 	.word	0x2000003c
 8003ff0:	20000044 	.word	0x20000044

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	4a03      	ldr	r2, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004006:	6810      	ldr	r0, [r2, #0]
}
 8004008:	40d8      	lsrs	r0, r3
 800400a:	4770      	bx	lr
 800400c:	40021000 	.word	0x40021000
 8004010:	0800a300 	.word	0x0800a300
 8004014:	2000003c 	.word	0x2000003c

08004018 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x18>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004022:	5cd3      	ldrb	r3, [r2, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	4a03      	ldr	r2, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402a:	6810      	ldr	r0, [r2, #0]
}
 800402c:	40d8      	lsrs	r0, r3
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	0800a300 	.word	0x0800a300
 8004038:	2000003c 	.word	0x2000003c

0800403c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004042:	4b55      	ldr	r3, [pc, #340]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f013 0f03 	tst.w	r3, #3
 800404a:	d014      	beq.n	8004076 <RCCEx_PLLSAI1_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800404c:	4b52      	ldr	r3, [pc, #328]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	6802      	ldr	r2, [r0, #0]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	4293      	cmp	r3, r2
 8004058:	d001      	beq.n	800405e <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800405a:	2001      	movs	r0, #1
 800405c:	e013      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
       ||
 800405e:	2a00      	cmp	r2, #0
 8004060:	d07a      	beq.n	8004158 <RCCEx_PLLSAI1_Config+0x11c>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800406a:	3301      	adds	r3, #1
       ||
 800406c:	6842      	ldr	r2, [r0, #4]
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8004072:	2001      	movs	r0, #1
 8004074:	e007      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004076:	6803      	ldr	r3, [r0, #0]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d028      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x92>
 800407c:	2b03      	cmp	r3, #3
 800407e:	d02d      	beq.n	80040dc <RCCEx_PLLSAI1_Config+0xa0>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <RCCEx_PLLSAI1_Config+0x4c>
 8004084:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8004086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004088:	4a43      	ldr	r2, [pc, #268]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f012 0f02 	tst.w	r2, #2
 8004090:	d064      	beq.n	800415c <RCCEx_PLLSAI1_Config+0x120>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004092:	4841      	ldr	r0, [pc, #260]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004094:	68c2      	ldr	r2, [r0, #12]
 8004096:	6861      	ldr	r1, [r4, #4]
 8004098:	3901      	subs	r1, #1
 800409a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800409e:	4313      	orrs	r3, r2
 80040a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80040a4:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80040a6:	4a3c      	ldr	r2, [pc, #240]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040b0:	f7fe fc7c 	bl	80029ac <HAL_GetTick>
 80040b4:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040b6:	4f38      	ldr	r7, [pc, #224]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040be:	d056      	beq.n	800416e <RCCEx_PLLSAI1_Config+0x132>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c0:	f7fe fc74 	bl	80029ac <HAL_GetTick>
 80040c4:	1b43      	subs	r3, r0, r5
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d9f6      	bls.n	80040b8 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 80040ca:	2003      	movs	r0, #3
 80040cc:	e7db      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ce:	4a32      	ldr	r2, [pc, #200]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80040d6:	d1dc      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0x56>
 80040d8:	2001      	movs	r0, #1
 80040da:	e7d4      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040dc:	4a2e      	ldr	r2, [pc, #184]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80040e4:	d1d5      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e6:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80040ee:	d1d0      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0x56>
 80040f0:	2001      	movs	r0, #1
 80040f2:	e7c8      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f4:	4928      	ldr	r1, [pc, #160]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	68a2      	ldr	r2, [r4, #8]
 80040fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004106:	68e2      	ldr	r2, [r4, #12]
 8004108:	0912      	lsrs	r2, r2, #4
 800410a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800410e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004112:	6813      	ldr	r3, [r2, #0]
 8004114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004118:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800411a:	f7fe fc47 	bl	80029ac <HAL_GetTick>
 800411e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004120:	4e1d      	ldr	r6, [pc, #116]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004122:	6833      	ldr	r3, [r6, #0]
 8004124:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004128:	d11a      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x124>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800412a:	f7fe fc3f 	bl	80029ac <HAL_GetTick>
 800412e:	1b43      	subs	r3, r0, r5
 8004130:	2b02      	cmp	r3, #2
 8004132:	d9f6      	bls.n	8004122 <RCCEx_PLLSAI1_Config+0xe6>
          status = HAL_TIMEOUT;
 8004134:	2003      	movs	r0, #3
 8004136:	e7a6      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004138:	4917      	ldr	r1, [pc, #92]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	0852      	lsrs	r2, r2, #1
 8004140:	3a01      	subs	r2, #1
 8004142:	68a0      	ldr	r0, [r4, #8]
 8004144:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800414c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004150:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004154:	610b      	str	r3, [r1, #16]
 8004156:	e7db      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xd4>
      status = HAL_ERROR;
 8004158:	2001      	movs	r0, #1
 800415a:	e794      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
 800415c:	2001      	movs	r0, #1
 800415e:	e792      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004160:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004162:	6913      	ldr	r3, [r2, #16]
 8004164:	69a1      	ldr	r1, [r4, #24]
 8004166:	430b      	orrs	r3, r1
 8004168:	6113      	str	r3, [r2, #16]
 800416a:	2000      	movs	r0, #0
  return status;
 800416c:	e78b      	b.n	8004086 <RCCEx_PLLSAI1_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 800416e:	2e00      	cmp	r6, #0
 8004170:	d0c0      	beq.n	80040f4 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004172:	2e01      	cmp	r6, #1
 8004174:	d0e0      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <RCCEx_PLLSAI1_Config+0x15c>)
 8004178:	690b      	ldr	r3, [r1, #16]
 800417a:	6962      	ldr	r2, [r4, #20]
 800417c:	0852      	lsrs	r2, r2, #1
 800417e:	3a01      	subs	r2, #1
 8004180:	68a0      	ldr	r0, [r4, #8]
 8004182:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800418a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800418e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004192:	610b      	str	r3, [r1, #16]
 8004194:	e7bc      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xd4>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000

0800419c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	4604      	mov	r4, r0
 80041a0:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a2:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f013 0f03 	tst.w	r3, #3
 80041aa:	d014      	beq.n	80041d6 <RCCEx_PLLSAI2_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041ac:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	6802      	ldr	r2, [r0, #0]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d001      	beq.n	80041be <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80041ba:	2001      	movs	r0, #1
 80041bc:	e013      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
       ||
 80041be:	2a00      	cmp	r2, #0
 80041c0:	d06a      	beq.n	8004298 <RCCEx_PLLSAI2_Config+0xfc>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041ca:	3301      	adds	r3, #1
       ||
 80041cc:	6842      	ldr	r2, [r0, #4]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d019      	beq.n	8004206 <RCCEx_PLLSAI2_Config+0x6a>
      status = HAL_ERROR;
 80041d2:	2001      	movs	r0, #1
 80041d4:	e007      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041d6:	6803      	ldr	r3, [r0, #0]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d028      	beq.n	800422e <RCCEx_PLLSAI2_Config+0x92>
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d02d      	beq.n	800423c <RCCEx_PLLSAI2_Config+0xa0>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <RCCEx_PLLSAI2_Config+0x4c>
 80041e4:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e8:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f012 0f02 	tst.w	r2, #2
 80041f0:	d054      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x100>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f2:	4838      	ldr	r0, [pc, #224]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80041f4:	68c2      	ldr	r2, [r0, #12]
 80041f6:	6861      	ldr	r1, [r4, #4]
 80041f8:	3901      	subs	r1, #1
 80041fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80041fe:	4313      	orrs	r3, r2
 8004200:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004204:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8004206:	4a33      	ldr	r2, [pc, #204]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004210:	f7fe fbcc 	bl	80029ac <HAL_GetTick>
 8004214:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004216:	4f2f      	ldr	r7, [pc, #188]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800421e:	d046      	beq.n	80042ae <RCCEx_PLLSAI2_Config+0x112>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004220:	f7fe fbc4 	bl	80029ac <HAL_GetTick>
 8004224:	1b43      	subs	r3, r0, r5
 8004226:	2b02      	cmp	r3, #2
 8004228:	d9f6      	bls.n	8004218 <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 800422a:	2003      	movs	r0, #3
 800422c:	e7db      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800422e:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004236:	d1dc      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0x56>
 8004238:	2001      	movs	r0, #1
 800423a:	e7d4      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004244:	d1d5      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004246:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800424e:	d1d0      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0x56>
 8004250:	2001      	movs	r0, #1
 8004252:	e7c8      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004256:	694b      	ldr	r3, [r1, #20]
 8004258:	68a2      	ldr	r2, [r4, #8]
 800425a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800425e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004266:	68e2      	ldr	r2, [r4, #12]
 8004268:	0912      	lsrs	r2, r2, #4
 800426a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800426e:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800427a:	f7fe fb97 	bl	80029ac <HAL_GetTick>
 800427e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004280:	4e14      	ldr	r6, [pc, #80]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 8004282:	6833      	ldr	r3, [r6, #0]
 8004284:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004288:	d10a      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0x104>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800428a:	f7fe fb8f 	bl	80029ac <HAL_GetTick>
 800428e:	1b43      	subs	r3, r0, r5
 8004290:	2b02      	cmp	r3, #2
 8004292:	d9f6      	bls.n	8004282 <RCCEx_PLLSAI2_Config+0xe6>
          status = HAL_TIMEOUT;
 8004294:	2003      	movs	r0, #3
 8004296:	e7a6      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
      status = HAL_ERROR;
 8004298:	2001      	movs	r0, #1
 800429a:	e7a4      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
 800429c:	2001      	movs	r0, #1
 800429e:	e7a2      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80042a2:	6953      	ldr	r3, [r2, #20]
 80042a4:	6961      	ldr	r1, [r4, #20]
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6153      	str	r3, [r2, #20]
 80042aa:	2000      	movs	r0, #0
  return status;
 80042ac:	e79b      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 80042ae:	2e00      	cmp	r6, #0
 80042b0:	d0d0      	beq.n	8004254 <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b2:	4908      	ldr	r1, [pc, #32]	; (80042d4 <RCCEx_PLLSAI2_Config+0x138>)
 80042b4:	694b      	ldr	r3, [r1, #20]
 80042b6:	6922      	ldr	r2, [r4, #16]
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	68a0      	ldr	r0, [r4, #8]
 80042be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80042ca:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80042ce:	614b      	str	r3, [r1, #20]
 80042d0:	e7ce      	b.n	8004270 <RCCEx_PLLSAI2_Config+0xd4>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80042d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042dc:	b083      	sub	sp, #12
 80042de:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e0:	6803      	ldr	r3, [r0, #0]
 80042e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80042e6:	d02d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80042e8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80042ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ee:	d01c      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042f0:	d80b      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x32>
 80042f2:	b303      	cbz	r3, 8004336 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80042f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f8:	bf18      	it	ne
 80042fa:	2601      	movne	r6, #1
 80042fc:	d123      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042fe:	2100      	movs	r1, #0
 8004300:	3020      	adds	r0, #32
 8004302:	f7ff ff4b 	bl	800419c <RCCEx_PLLSAI2_Config>
 8004306:	4606      	mov	r6, r0
      break;
 8004308:	e01a      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->Sai1ClockSelection)
 800430a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800430e:	d10a      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8004312:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004316:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800431a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800431c:	430b      	orrs	r3, r1
 800431e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004322:	2600      	movs	r6, #0
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004326:	2601      	movs	r6, #1
 8004328:	e00d      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800432a:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 800432c:	68d3      	ldr	r3, [r2, #12]
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8004334:	e7ec      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004336:	2100      	movs	r1, #0
 8004338:	3004      	adds	r0, #4
 800433a:	f7ff fe7f 	bl	800403c <RCCEx_PLLSAI1_Config>
 800433e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004340:	b90e      	cbnz	r6, 8004346 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004342:	e7e5      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x38>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004344:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800434c:	d036      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    switch(PeriphClkInit->Sai2ClockSelection)
 800434e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004354:	d023      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8004356:	d80d      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004358:	b343      	cbz	r3, 80043ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800435a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800435e:	d106      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004360:	2100      	movs	r1, #0
 8004362:	f104 0020 	add.w	r0, r4, #32
 8004366:	f7ff ff19 	bl	800419c <RCCEx_PLLSAI2_Config>
 800436a:	4680      	mov	r8, r0
      break;
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai2ClockSelection)
 800436e:	2601      	movs	r6, #1
 8004370:	46b0      	mov	r8, r6
 8004372:	e024      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8004374:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004378:	d10e      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800437a:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 800437c:	f1b8 0f00 	cmp.w	r8, #0
 8004380:	f040 8151 	bne.w	8004626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8004386:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800438a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800438e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004390:	430b      	orrs	r3, r1
 8004392:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004396:	e012      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004398:	2601      	movs	r6, #1
 800439a:	46b0      	mov	r8, r6
 800439c:	e00f      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800439e:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80043a0:	68d3      	ldr	r3, [r2, #12]
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a6:	60d3      	str	r3, [r2, #12]
      break;
 80043a8:	46b0      	mov	r8, r6
 80043aa:	e7e7      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ac:	2100      	movs	r1, #0
 80043ae:	1d20      	adds	r0, r4, #4
 80043b0:	f7ff fe44 	bl	800403c <RCCEx_PLLSAI1_Config>
 80043b4:	4680      	mov	r8, r0
      break;
 80043b6:	e7e1      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043b8:	40021000 	.word	0x40021000
 80043bc:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043c4:	d029      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043c6:	4bb9      	ldr	r3, [pc, #740]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80043ce:	f040 812c 	bne.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x352>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4bb6      	ldr	r3, [pc, #728]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80043d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043da:	659a      	str	r2, [r3, #88]	; 0x58
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80043e6:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ea:	4ab1      	ldr	r2, [pc, #708]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80043ec:	6813      	ldr	r3, [r2, #0]
 80043ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80043f4:	f7fe fada 	bl	80029ac <HAL_GetTick>
 80043f8:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fa:	4fad      	ldr	r7, [pc, #692]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004402:	f040 8115 	bne.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0x358>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fe fad1 	bl	80029ac <HAL_GetTick>
 800440a:	1b40      	subs	r0, r0, r5
 800440c:	2802      	cmp	r0, #2
 800440e:	d9f5      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x124>
        ret = HAL_TIMEOUT;
 8004410:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 8004412:	f1b9 0f00 	cmp.w	r9, #0
 8004416:	f040 8142 	bne.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f013 0f01 	tst.w	r3, #1
 8004420:	d008      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004422:	4aa2      	ldr	r2, [pc, #648]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004424:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800442e:	430b      	orrs	r3, r1
 8004430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	f013 0f02 	tst.w	r3, #2
 800443a:	d008      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800443c:	4a9b      	ldr	r2, [pc, #620]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800443e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004442:	f023 030c 	bic.w	r3, r3, #12
 8004446:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004448:	430b      	orrs	r3, r1
 800444a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	f013 0f04 	tst.w	r3, #4
 8004454:	d008      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004456:	4a95      	ldr	r2, [pc, #596]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004458:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800445c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004460:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004462:	430b      	orrs	r3, r1
 8004464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f013 0f08 	tst.w	r3, #8
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004470:	4a8e      	ldr	r2, [pc, #568]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004472:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800447a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800447c:	430b      	orrs	r3, r1
 800447e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f013 0f10 	tst.w	r3, #16
 8004488:	d008      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800448a:	4a88      	ldr	r2, [pc, #544]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800448c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004496:	430b      	orrs	r3, r1
 8004498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	f013 0f20 	tst.w	r3, #32
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a4:	4a81      	ldr	r2, [pc, #516]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80044bc:	d008      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044be:	4a7b      	ldr	r2, [pc, #492]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044c4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80044c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80044ca:	430b      	orrs	r3, r1
 80044cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d8:	4a74      	ldr	r2, [pc, #464]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044e2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80044e4:	430b      	orrs	r3, r1
 80044e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f2:	4a6e      	ldr	r2, [pc, #440]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80044fe:	430b      	orrs	r3, r1
 8004500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	f013 0f80 	tst.w	r3, #128	; 0x80
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800450c:	4a67      	ldr	r2, [pc, #412]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800450e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004516:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004518:	430b      	orrs	r3, r1
 800451a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004526:	4a61      	ldr	r2, [pc, #388]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004528:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800452c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004530:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004532:	430b      	orrs	r3, r1
 8004534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800453e:	d011      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004540:	4a5a      	ldr	r2, [pc, #360]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004542:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004546:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800454a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800454c:	430b      	orrs	r3, r1
 800454e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004552:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004558:	f000 80ac 	beq.w	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800455c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004560:	f000 80ad 	beq.w	80046be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800456a:	d011      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800456c:	4a4f      	ldr	r2, [pc, #316]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800456e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004572:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004576:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800457e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004584:	f000 80a3 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458c:	f000 80a4 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x400>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004596:	d011      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004598:	4a44      	ldr	r2, [pc, #272]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800459a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800459e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80045a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80045a4:	430b      	orrs	r3, r1
 80045a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80045ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b0:	f000 809a 	beq.w	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b8:	f000 809b 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80045c2:	d011      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c4:	4a39      	ldr	r2, [pc, #228]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80045c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80045ce:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80045d0:	430b      	orrs	r3, r1
 80045d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80045d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045dc:	f000 8091 	beq.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	f000 8095 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80045ee:	d008      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f0:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80045f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004608:	d009      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800460a:	4a28      	ldr	r2, [pc, #160]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800460c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004614:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004618:	430b      	orrs	r3, r1
 800461a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800461e:	4630      	mov	r0, r6
 8004620:	b003      	add	sp, #12
 8004622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004626:	4646      	mov	r6, r8
 8004628:	e6c9      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xe6>
    FlagStatus       pwrclkchanged = RESET;
 800462a:	f04f 0900 	mov.w	r9, #0
 800462e:	e6dc      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8004630:	f1b8 0f00 	cmp.w	r8, #0
 8004634:	d131      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004640:	d070      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8004642:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004646:	429a      	cmp	r2, r3
 8004648:	d012      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x398>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800464c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004654:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004658:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800465c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004660:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004664:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004668:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004670:	f013 0f01 	tst.w	r3, #1
 8004674:	d056      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x44c>
        tickstart = HAL_GetTick();
 8004676:	f7fe f999 	bl	80029ac <HAL_GetTick>
 800467a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467c:	4f0b      	ldr	r7, [pc, #44]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004686:	f013 0f02 	tst.w	r3, #2
 800468a:	d14b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x44c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe f98e 	bl	80029ac <HAL_GetTick>
 8004690:	1b40      	subs	r0, r0, r5
 8004692:	4540      	cmp	r0, r8
 8004694:	d9f5      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
            ret = HAL_TIMEOUT;
 8004696:	2603      	movs	r6, #3
 8004698:	e6bb      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 800469a:	4646      	mov	r6, r8
 800469c:	e6b9      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800469e:	4a03      	ldr	r2, [pc, #12]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80046a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
 80046a8:	e6b7      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x142>
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b4:	68d3      	ldr	r3, [r2, #12]
 80046b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ba:	60d3      	str	r3, [r2, #12]
 80046bc:	e752      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	2101      	movs	r1, #1
 80046c0:	1d20      	adds	r0, r4, #4
 80046c2:	f7ff fcbb 	bl	800403c <RCCEx_PLLSAI1_Config>
          status = ret;
 80046c6:	2800      	cmp	r0, #0
 80046c8:	bf18      	it	ne
 80046ca:	4606      	movne	r6, r0
 80046cc:	e74a      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ce:	68d3      	ldr	r3, [r2, #12]
 80046d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d4:	60d3      	str	r3, [r2, #12]
 80046d6:	e75b      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d8:	2101      	movs	r1, #1
 80046da:	1d20      	adds	r0, r4, #4
 80046dc:	f7ff fcae 	bl	800403c <RCCEx_PLLSAI1_Config>
        status = ret;
 80046e0:	2800      	cmp	r0, #0
 80046e2:	bf18      	it	ne
 80046e4:	4606      	movne	r6, r0
 80046e6:	e753      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e8:	68d3      	ldr	r3, [r2, #12]
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
 80046f0:	e764      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	2101      	movs	r1, #1
 80046f4:	1d20      	adds	r0, r4, #4
 80046f6:	f7ff fca1 	bl	800403c <RCCEx_PLLSAI1_Config>
        status = ret;
 80046fa:	2800      	cmp	r0, #0
 80046fc:	bf18      	it	ne
 80046fe:	4606      	movne	r6, r0
 8004700:	e75c      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004702:	2102      	movs	r1, #2
 8004704:	1d20      	adds	r0, r4, #4
 8004706:	f7ff fc99 	bl	800403c <RCCEx_PLLSAI1_Config>
        status = ret;
 800470a:	2800      	cmp	r0, #0
 800470c:	bf18      	it	ne
 800470e:	4606      	movne	r6, r0
 8004710:	e76a      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004712:	2102      	movs	r1, #2
 8004714:	f104 0020 	add.w	r0, r4, #32
 8004718:	f7ff fd40 	bl	800419c <RCCEx_PLLSAI2_Config>
        status = ret;
 800471c:	2800      	cmp	r0, #0
 800471e:	bf18      	it	ne
 8004720:	4606      	movne	r6, r0
 8004722:	e761      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004724:	4a05      	ldr	r2, [pc, #20]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004726:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004732:	430b      	orrs	r3, r1
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004738:	e66b      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000

08004740 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	4681      	mov	r9, r0
 8004748:	460f      	mov	r7, r1
 800474a:	4616      	mov	r6, r2
 800474c:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800474e:	f7fe f92d 	bl	80029ac <HAL_GetTick>
 8004752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004754:	442b      	add	r3, r5
 8004756:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800475a:	f7fe f927 	bl	80029ac <HAL_GetTick>
 800475e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004760:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004768:	fb08 f303 	mul.w	r3, r8, r3
 800476c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476e:	f8d9 2000 	ldr.w	r2, [r9]
 8004772:	6894      	ldr	r4, [r2, #8]
 8004774:	ea37 0404 	bics.w	r4, r7, r4
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	42b3      	cmp	r3, r6
 8004780:	d044      	beq.n	800480c <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004782:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004786:	d0f4      	beq.n	8004772 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004788:	f7fe f910 	bl	80029ac <HAL_GetTick>
 800478c:	eba0 000a 	sub.w	r0, r0, sl
 8004790:	4540      	cmp	r0, r8
 8004792:	d207      	bcs.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004794:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf08      	it	eq
 800479a:	4698      	moveq	r8, r3
      }
      count--;
 800479c:	9b01      	ldr	r3, [sp, #4]
 800479e:	3b01      	subs	r3, #1
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	e7e4      	b.n	800476e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047a4:	f8d9 2000 	ldr.w	r2, [r9]
 80047a8:	6853      	ldr	r3, [r2, #4]
 80047aa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80047ae:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80047b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b8:	d00c      	beq.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047ba:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d016      	beq.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 80047d0:	2003      	movs	r0, #3
 80047d2:	e01c      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80047d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047dc:	d002      	beq.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e2:	d1ea      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80047e4:	f8d9 2000 	ldr.w	r2, [r9]
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e7e3      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80047f2:	f8d9 2000 	ldr.w	r2, [r9]
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	f8d9 2000 	ldr.w	r2, [r9]
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e7db      	b.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 800480c:	2000      	movs	r0, #0
}
 800480e:	b002      	add	sp, #8
 8004810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004814:	2000003c 	.word	0x2000003c

08004818 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	4680      	mov	r8, r0
 8004820:	460c      	mov	r4, r1
 8004822:	4615      	mov	r5, r2
 8004824:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800482c:	f7fe f8be 	bl	80029ac <HAL_GetTick>
 8004830:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004832:	4437      	add	r7, r6
 8004834:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004836:	f7fe f8b9 	bl	80029ac <HAL_GetTick>
 800483a:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800483c:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004840:	4b33      	ldr	r3, [pc, #204]	; (8004910 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004848:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800484c:	0d1b      	lsrs	r3, r3, #20
 800484e:	fb07 f303 	mul.w	r3, r7, r3
 8004852:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004854:	f8d8 2000 	ldr.w	r2, [r8]
 8004858:	e002      	b.n	8004860 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800485a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800485e:	d111      	bne.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004860:	6893      	ldr	r3, [r2, #8]
 8004862:	ea03 0c04 	and.w	ip, r3, r4
 8004866:	45ac      	cmp	ip, r5
 8004868:	d04e      	beq.n	8004908 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800486a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800486e:	d1f4      	bne.n	800485a <SPI_WaitFifoStateUntilTimeout+0x42>
 8004870:	2d00      	cmp	r5, #0
 8004872:	d1f2      	bne.n	800485a <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8004874:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800487e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004882:	e7ea      	b.n	800485a <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004884:	f7fe f892 	bl	80029ac <HAL_GetTick>
 8004888:	eba0 0009 	sub.w	r0, r0, r9
 800488c:	42b8      	cmp	r0, r7
 800488e:	d207      	bcs.n	80048a0 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004890:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004892:	2b00      	cmp	r3, #0
 8004894:	bf08      	it	eq
 8004896:	461f      	moveq	r7, r3
      }
      count--;
 8004898:	9b01      	ldr	r3, [sp, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	e7d9      	b.n	8004854 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048a0:	f8d8 2000 	ldr.w	r2, [r8]
 80048a4:	6853      	ldr	r3, [r2, #4]
 80048a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048aa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80048b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b4:	d00c      	beq.n	80048d0 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d016      	beq.n	80048ee <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80048c6:	2300      	movs	r3, #0
 80048c8:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 80048cc:	2003      	movs	r0, #3
 80048ce:	e01c      	b.n	800490a <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	d002      	beq.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	d1ea      	bne.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 80048e0:	f8d8 2000 	ldr.w	r2, [r8]
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e7e3      	b.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 80048ee:	f8d8 2000 	ldr.w	r2, [r8]
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	f8d8 2000 	ldr.w	r2, [r8]
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e7db      	b.n	80048c0 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8004908:	2000      	movs	r0, #0
}
 800490a:	b002      	add	sp, #8
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004910:	2000003c 	.word	0x2000003c

08004914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800491e:	9200      	str	r2, [sp, #0]
 8004920:	460b      	mov	r3, r1
 8004922:	2200      	movs	r2, #0
 8004924:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004928:	f7ff ff76 	bl	8004818 <SPI_WaitFifoStateUntilTimeout>
 800492c:	b9b0      	cbnz	r0, 800495c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800492e:	9600      	str	r6, [sp, #0]
 8004930:	462b      	mov	r3, r5
 8004932:	2200      	movs	r2, #0
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff ff02 	bl	8004740 <SPI_WaitFlagStateUntilTimeout>
 800493c:	b9a8      	cbnz	r0, 800496a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800493e:	9600      	str	r6, [sp, #0]
 8004940:	462b      	mov	r3, r5
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff ff65 	bl	8004818 <SPI_WaitFifoStateUntilTimeout>
 800494e:	b150      	cbz	r0, 8004966 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004950:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004958:	2003      	movs	r0, #3
 800495a:	e004      	b.n	8004966 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004964:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8004966:	b002      	add	sp, #8
 8004968:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004972:	2003      	movs	r0, #3
 8004974:	e7f7      	b.n	8004966 <SPI_EndRxTxTransaction+0x52>

08004976 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004976:	2800      	cmp	r0, #0
 8004978:	d068      	beq.n	8004a4c <HAL_SPI_Init+0xd6>
{
 800497a:	b510      	push	{r4, lr}
 800497c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004980:	b933      	cbnz	r3, 8004990 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	6843      	ldr	r3, [r0, #4]
 8004984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004988:	d005      	beq.n	8004996 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498a:	2300      	movs	r3, #0
 800498c:	61c3      	str	r3, [r0, #28]
 800498e:	e002      	b.n	8004996 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004990:	2300      	movs	r3, #0
 8004992:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004994:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800499a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04e      	beq.n	8004a40 <HAL_SPI_Init+0xca>
  hspi->State = HAL_SPI_STATE_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b8:	bf8c      	ite	hi
 80049ba:	2100      	movhi	r1, #0
 80049bc:	2101      	movls	r1, #1
 80049be:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c8:	bf1c      	itt	ne
 80049ca:	2300      	movne	r3, #0
 80049cc:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80049d6:	68a0      	ldr	r0, [r4, #8]
 80049d8:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80049dc:	4303      	orrs	r3, r0
 80049de:	6920      	ldr	r0, [r4, #16]
 80049e0:	f000 0002 	and.w	r0, r0, #2
 80049e4:	4303      	orrs	r3, r0
 80049e6:	6960      	ldr	r0, [r4, #20]
 80049e8:	f000 0001 	and.w	r0, r0, #1
 80049ec:	4303      	orrs	r3, r0
 80049ee:	69a0      	ldr	r0, [r4, #24]
 80049f0:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80049f4:	4303      	orrs	r3, r0
 80049f6:	69e0      	ldr	r0, [r4, #28]
 80049f8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80049fc:	4303      	orrs	r3, r0
 80049fe:	6a20      	ldr	r0, [r4, #32]
 8004a00:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004a04:	4303      	orrs	r3, r0
 8004a06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004a08:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004a0c:	4303      	orrs	r3, r0
 8004a0e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004a1a:	f000 0008 	and.w	r0, r0, #8
 8004a1e:	4303      	orrs	r3, r0
 8004a20:	68e0      	ldr	r0, [r4, #12]
 8004a22:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8004a26:	4303      	orrs	r3, r0
 8004a28:	8b60      	ldrh	r0, [r4, #26]
 8004a2a:	f000 0004 	and.w	r0, r0, #4
 8004a2e:	4303      	orrs	r3, r0
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a34:	2000      	movs	r0, #0
 8004a36:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004a3e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004a40:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fd fd3f 	bl	80024c8 <HAL_SPI_MspInit>
 8004a4a:	e7aa      	b.n	80049a2 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004a4c:	2001      	movs	r0, #1
}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_SPI_Transmit>:
{
 8004a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a54:	b083      	sub	sp, #12
 8004a56:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004a58:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f000 80f8 	beq.w	8004c52 <HAL_SPI_Transmit+0x202>
 8004a62:	4604      	mov	r4, r0
 8004a64:	4688      	mov	r8, r1
 8004a66:	4691      	mov	r9, r2
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004a6e:	f7fd ff9d 	bl	80029ac <HAL_GetTick>
 8004a72:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a74:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8004a78:	b2f6      	uxtb	r6, r6
 8004a7a:	2e01      	cmp	r6, #1
 8004a7c:	f040 80e1 	bne.w	8004c42 <HAL_SPI_Transmit+0x1f2>
  if ((pData == NULL) || (Size == 0U))
 8004a80:	f1b8 0f00 	cmp.w	r8, #0
 8004a84:	f000 80de 	beq.w	8004c44 <HAL_SPI_Transmit+0x1f4>
 8004a88:	f1b9 0f00 	cmp.w	r9, #0
 8004a8c:	f000 80da 	beq.w	8004c44 <HAL_SPI_Transmit+0x1f4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a90:	2303      	movs	r3, #3
 8004a92:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a9a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a9e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004aa2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aa6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004aa8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004aac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ab0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ab2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab4:	68a3      	ldr	r3, [r4, #8]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d03a      	beq.n	8004b32 <HAL_SPI_Transmit+0xe2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ac4:	d103      	bne.n	8004ace <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004acc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad4:	d95f      	bls.n	8004b96 <HAL_SPI_Transmit+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad6:	6863      	ldr	r3, [r4, #4]
 8004ad8:	b113      	cbz	r3, 8004ae0 <HAL_SPI_Transmit+0x90>
 8004ada:	f1b9 0f01 	cmp.w	r9, #1
 8004ade:	d10a      	bne.n	8004af6 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aea:	3302      	adds	r3, #2
 8004aec:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004aee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004af6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d130      	bne.n	8004b60 <HAL_SPI_Transmit+0x110>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004afe:	463a      	mov	r2, r7
 8004b00:	4629      	mov	r1, r5
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff ff06 	bl	8004914 <SPI_EndRxTxTransaction>
 8004b08:	b108      	cbz	r0, 8004b0e <HAL_SPI_Transmit+0xbe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	b933      	cbnz	r3, 8004b20 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	9201      	str	r2, [sp, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 808e 	bne.w	8004c44 <HAL_SPI_Transmit+0x1f4>
    hspi->State = HAL_SPI_STATE_READY;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b2e:	2600      	movs	r6, #0
 8004b30:	e088      	b.n	8004c44 <HAL_SPI_Transmit+0x1f4>
    __HAL_SPI_DISABLE(hspi);
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e7b9      	b.n	8004abc <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b48:	f7fd ff30 	bl	80029ac <HAL_GetTick>
 8004b4c:	1bc0      	subs	r0, r0, r7
 8004b4e:	42a8      	cmp	r0, r5
 8004b50:	d31a      	bcc.n	8004b88 <HAL_SPI_Transmit+0x138>
 8004b52:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004b56:	d119      	bne.n	8004b8c <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8004b58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ce      	beq.n	8004afe <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	f012 0f02 	tst.w	r2, #2
 8004b68:	d0ee      	beq.n	8004b48 <HAL_SPI_Transmit+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b72:	3302      	adds	r3, #2
 8004b74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004b76:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004b7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b7e:	fa1f fc8c 	uxth.w	ip, ip
 8004b82:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8004b86:	e7e7      	b.n	8004b58 <HAL_SPI_Transmit+0x108>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	d1e5      	bne.n	8004b58 <HAL_SPI_Transmit+0x108>
          hspi->State = HAL_SPI_STATE_READY;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004b92:	2603      	movs	r6, #3
          goto error;
 8004b94:	e056      	b.n	8004c44 <HAL_SPI_Transmit+0x1f4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	b113      	cbz	r3, 8004ba0 <HAL_SPI_Transmit+0x150>
 8004b9a:	f1b9 0f01 	cmp.w	r9, #1
 8004b9e:	d10e      	bne.n	8004bbe <HAL_SPI_Transmit+0x16e>
      if (hspi->TxXferCount > 1U)
 8004ba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d90e      	bls.n	8004bc6 <HAL_SPI_Transmit+0x176>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bac:	8812      	ldrh	r2, [r2, #0]
 8004bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bb8:	3b02      	subs	r3, #2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004bbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	b9d3      	cbnz	r3, 8004bfa <HAL_SPI_Transmit+0x1aa>
 8004bc4:	e79b      	b.n	8004afe <HAL_SPI_Transmit+0xae>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004bdc:	e7ef      	b.n	8004bbe <HAL_SPI_Transmit+0x16e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be6:	3301      	adds	r3, #1
 8004be8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004bea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004bf2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004bf4:	b289      	uxth	r1, r1
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d081      	beq.n	8004afe <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6893      	ldr	r3, [r2, #8]
 8004bfe:	f013 0f02 	tst.w	r3, #2
 8004c02:	d00e      	beq.n	8004c22 <HAL_SPI_Transmit+0x1d2>
        if (hspi->TxXferCount > 1U)
 8004c04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d9e8      	bls.n	8004bde <HAL_SPI_Transmit+0x18e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c14:	3302      	adds	r3, #2
 8004c16:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c1a:	3b02      	subs	r3, #2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004c20:	e7e7      	b.n	8004bf2 <HAL_SPI_Transmit+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c22:	f7fd fec3 	bl	80029ac <HAL_GetTick>
 8004c26:	1bc0      	subs	r0, r0, r7
 8004c28:	42a8      	cmp	r0, r5
 8004c2a:	d303      	bcc.n	8004c34 <HAL_SPI_Transmit+0x1e4>
 8004c2c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c30:	d0df      	beq.n	8004bf2 <HAL_SPI_Transmit+0x1a2>
 8004c32:	e001      	b.n	8004c38 <HAL_SPI_Transmit+0x1e8>
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	d1dc      	bne.n	8004bf2 <HAL_SPI_Transmit+0x1a2>
          hspi->State = HAL_SPI_STATE_READY;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004c3e:	2603      	movs	r6, #3
          goto error;
 8004c40:	e000      	b.n	8004c44 <HAL_SPI_Transmit+0x1f4>
    errorcode = HAL_BUSY;
 8004c42:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004c44:	2300      	movs	r3, #0
 8004c46:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	b003      	add	sp, #12
 8004c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004c52:	2602      	movs	r6, #2
 8004c54:	e7f9      	b.n	8004c4a <HAL_SPI_Transmit+0x1fa>
	...

08004c58 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d136      	bne.n	8004cd0 <HAL_TIM_Base_Start_IT+0x78>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	6802      	ldr	r2, [r0, #0]
 8004c6a:	68d3      	ldr	r3, [r2, #12]
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	6803      	ldr	r3, [r0, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_TIM_Base_Start_IT+0x84>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01c      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d019      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004c80:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d015      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d011      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00d      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004c98:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
 8004ca0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d005      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <HAL_TIM_Base_Start_IT+0x88>)
 8004cb8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	2a06      	cmp	r2, #6
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x7c>
 8004cbe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004cc2:	d009      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4770      	bx	lr
    return HAL_ERROR;
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	4770      	bx	lr
  return HAL_OK;
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	4770      	bx	lr
 8004cd8:	2000      	movs	r0, #0
}
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	00010007 	.word	0x00010007

08004ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_IRQHandler>:
{
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004cf0:	6803      	ldr	r3, [r0, #0]
 8004cf2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cf6:	f015 0f02 	tst.w	r5, #2
 8004cfa:	d010      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cfc:	f016 0f02 	tst.w	r6, #2
 8004d00:	d00d      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d02:	f06f 0202 	mvn.w	r2, #2
 8004d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0c:	6803      	ldr	r3, [r0, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f013 0f03 	tst.w	r3, #3
 8004d14:	d05e      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	f7ff ffe6 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d1e:	f015 0f04 	tst.w	r5, #4
 8004d22:	d012      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d24:	f016 0f04 	tst.w	r6, #4
 8004d28:	d00f      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f06f 0204 	mvn.w	r2, #4
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d32:	2302      	movs	r3, #2
 8004d34:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d3e:	d04f      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff ffd0 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	2300      	movs	r3, #0
 8004d48:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d4a:	f015 0f08 	tst.w	r5, #8
 8004d4e:	d012      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d50:	f016 0f08 	tst.w	r6, #8
 8004d54:	d00f      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f06f 0208 	mvn.w	r2, #8
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5e:	2304      	movs	r3, #4
 8004d60:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f013 0f03 	tst.w	r3, #3
 8004d6a:	d040      	beq.n	8004dee <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff ffba 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	2300      	movs	r3, #0
 8004d74:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d76:	f015 0f10 	tst.w	r5, #16
 8004d7a:	d012      	beq.n	8004da2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d7c:	f016 0f10 	tst.w	r6, #16
 8004d80:	d00f      	beq.n	8004da2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f06f 0210 	mvn.w	r2, #16
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d96:	d031      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7ff ffa4 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004da2:	f015 0f01 	tst.w	r5, #1
 8004da6:	d002      	beq.n	8004dae <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004da8:	f016 0f01 	tst.w	r6, #1
 8004dac:	d12d      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dae:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004db2:	d044      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004db4:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004db8:	d12f      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dbe:	d002      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dc0:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004dc4:	d142      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x160>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc6:	f015 0f20 	tst.w	r5, #32
 8004dca:	d002      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dcc:	f016 0f20 	tst.w	r6, #32
 8004dd0:	d144      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x170>
}
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd4:	f7ff ff86 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ff85 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dde:	e79c      	b.n	8004d1a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff ff7f 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7ff ff7e 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dec:	e7ab      	b.n	8004d46 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff78 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff ff77 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dfa:	e7ba      	b.n	8004d72 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff ff71 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff ff70 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e08:	e7c9      	b.n	8004d9e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f06f 0201 	mvn.w	r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e12:	4620      	mov	r0, r4
 8004e14:	f7fd f93c 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
 8004e18:	e7c9      	b.n	8004dae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f943 	bl	80050ae <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e28:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004e2c:	d0c5      	beq.n	8004dba <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f93a 	bl	80050b0 <HAL_TIMEx_Break2Callback>
 8004e3c:	e7bd      	b.n	8004dba <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e3e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004e42:	d0ba      	beq.n	8004dba <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e44:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004e48:	d0b7      	beq.n	8004dba <HAL_TIM_IRQHandler+0xce>
 8004e4a:	e7f0      	b.n	8004e2e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e52:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff ff48 	bl	8004cea <HAL_TIM_TriggerCallback>
 8004e5a:	e7b4      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	f06f 0220 	mvn.w	r2, #32
 8004e62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 f921 	bl	80050ac <HAL_TIMEx_CommutCallback>
}
 8004e6a:	e7b2      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xe6>

08004e6c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6e:	4a50      	ldr	r2, [pc, #320]	; (8004fb0 <TIM_Base_SetConfig+0x144>)
 8004e70:	4290      	cmp	r0, r2
 8004e72:	d074      	beq.n	8004f5e <TIM_Base_SetConfig+0xf2>
 8004e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e78:	f000 8087 	beq.w	8004f8a <TIM_Base_SetConfig+0x11e>
 8004e7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e80:	4290      	cmp	r0, r2
 8004e82:	d062      	beq.n	8004f4a <TIM_Base_SetConfig+0xde>
 8004e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e88:	4290      	cmp	r0, r2
 8004e8a:	d059      	beq.n	8004f40 <TIM_Base_SetConfig+0xd4>
 8004e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e90:	4290      	cmp	r0, r2
 8004e92:	d05f      	beq.n	8004f54 <TIM_Base_SetConfig+0xe8>
 8004e94:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004e98:	4290      	cmp	r0, r2
 8004e9a:	d03f      	beq.n	8004f1c <TIM_Base_SetConfig+0xb0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004ea0:	4290      	cmp	r0, r2
 8004ea2:	d011      	beq.n	8004ec8 <TIM_Base_SetConfig+0x5c>
 8004ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ea8:	4290      	cmp	r0, r2
 8004eaa:	d01b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x78>
 8004eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eb0:	4290      	cmp	r0, r2
 8004eb2:	d025      	beq.n	8004f00 <TIM_Base_SetConfig+0x94>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb8:	694a      	ldr	r2, [r1, #20]
 8004eba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ebc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebe:	688b      	ldr	r3, [r1, #8]
 8004ec0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec2:	680b      	ldr	r3, [r1, #0]
 8004ec4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec6:	e05d      	b.n	8004f84 <TIM_Base_SetConfig+0x118>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ecc:	68ca      	ldr	r2, [r1, #12]
 8004ece:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed4:	694a      	ldr	r2, [r1, #20]
 8004ed6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004ed8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eda:	688b      	ldr	r3, [r1, #8]
 8004edc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ede:	680b      	ldr	r3, [r1, #0]
 8004ee0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee2:	e04d      	b.n	8004f80 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee8:	68ca      	ldr	r2, [r1, #12]
 8004eea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef0:	694a      	ldr	r2, [r1, #20]
 8004ef2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004ef4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef6:	688b      	ldr	r3, [r1, #8]
 8004ef8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efe:	e03f      	b.n	8004f80 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f04:	68ca      	ldr	r2, [r1, #12]
 8004f06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0c:	694a      	ldr	r2, [r1, #20]
 8004f0e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f10:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f12:	688b      	ldr	r3, [r1, #8]
 8004f14:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f16:	680b      	ldr	r3, [r1, #0]
 8004f18:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f1a:	e031      	b.n	8004f80 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f20:	684a      	ldr	r2, [r1, #4]
 8004f22:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f28:	68ca      	ldr	r2, [r1, #12]
 8004f2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f30:	694a      	ldr	r2, [r1, #20]
 8004f32:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f34:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f36:	688b      	ldr	r3, [r1, #8]
 8004f38:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f3a:	680b      	ldr	r3, [r1, #0]
 8004f3c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f3e:	e01f      	b.n	8004f80 <TIM_Base_SetConfig+0x114>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f44:	684a      	ldr	r2, [r1, #4]
 8004f46:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f48:	e023      	b.n	8004f92 <TIM_Base_SetConfig+0x126>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f4e:	684a      	ldr	r2, [r1, #4]
 8004f50:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	e01e      	b.n	8004f92 <TIM_Base_SetConfig+0x126>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f58:	684a      	ldr	r2, [r1, #4]
 8004f5a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5c:	e019      	b.n	8004f92 <TIM_Base_SetConfig+0x126>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f62:	684a      	ldr	r2, [r1, #4]
 8004f64:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	68ca      	ldr	r2, [r1, #12]
 8004f6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f72:	694a      	ldr	r2, [r1, #20]
 8004f74:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f76:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	688b      	ldr	r3, [r1, #8]
 8004f7a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f7c:	680b      	ldr	r3, [r1, #0]
 8004f7e:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	690b      	ldr	r3, [r1, #16]
 8004f82:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	2301      	movs	r3, #1
 8004f86:	6143      	str	r3, [r0, #20]
}
 8004f88:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f8e:	684a      	ldr	r2, [r1, #4]
 8004f90:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f96:	68ca      	ldr	r2, [r1, #12]
 8004f98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9e:	694a      	ldr	r2, [r1, #20]
 8004fa0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004fa2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa4:	688b      	ldr	r3, [r1, #8]
 8004fa6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fa8:	680b      	ldr	r3, [r1, #0]
 8004faa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	e7ea      	b.n	8004f84 <TIM_Base_SetConfig+0x118>
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00

08004fb4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004fb4:	b360      	cbz	r0, 8005010 <HAL_TIM_Base_Init+0x5c>
{
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fbe:	b313      	cbz	r3, 8005006 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004fcc:	f7ff ff4e 	bl	8004e6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004fda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004fde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004fe2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004fe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ff6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004ffa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005002:	2000      	movs	r0, #0
}
 8005004:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005006:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800500a:	f7fd fa91 	bl	8002530 <HAL_TIM_Base_MspInit>
 800500e:	e7d7      	b.n	8004fc0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005010:	2001      	movs	r0, #1
}
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005014:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005018:	2a01      	cmp	r2, #1
 800501a:	d042      	beq.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 800501c:	b430      	push	{r4, r5}
 800501e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005020:	2201      	movs	r2, #1
 8005022:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005026:	2202      	movs	r2, #2
 8005028:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005032:	4d1d      	ldr	r5, [pc, #116]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005034:	42a8      	cmp	r0, r5
 8005036:	d003      	beq.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8005038:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800503c:	42a8      	cmp	r0, r5
 800503e:	d103      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005040:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005044:	684d      	ldr	r5, [r1, #4]
 8005046:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504c:	680d      	ldr	r5, [r1, #0]
 800504e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005050:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4814      	ldr	r0, [pc, #80]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005056:	4282      	cmp	r2, r0
 8005058:	d016      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800505a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800505e:	d013      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005060:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8005064:	4282      	cmp	r2, r0
 8005066:	d00f      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005068:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800506c:	4282      	cmp	r2, r0
 800506e:	d00b      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005070:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005074:	4282      	cmp	r2, r0
 8005076:	d007      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005078:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800507c:	4282      	cmp	r2, r0
 800507e:	d003      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005080:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8005084:	4282      	cmp	r2, r0
 8005086:	d104      	bne.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005088:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508c:	6889      	ldr	r1, [r1, #8]
 800508e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005090:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	2000      	movs	r0, #0
 800509a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800509e:	bc30      	pop	{r4, r5}
 80050a0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80050a2:	2002      	movs	r0, #2
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40012c00 	.word	0x40012c00

080050ac <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ac:	4770      	bx	lr

080050ae <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b0:	4770      	bx	lr

080050b2 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	e852 3f00 	ldrex	r3, [r2]
 80050b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	e842 3100 	strex	r1, r3, [r2]
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d1f6      	bne.n	80050b2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	f102 0308 	add.w	r3, r2, #8
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	3208      	adds	r2, #8
 80050d4:	e842 3100 	strex	r1, r3, [r2]
 80050d8:	2900      	cmp	r1, #0
 80050da:	d1f3      	bne.n	80050c4 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d006      	beq.n	80050f0 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e2:	2320      	movs	r3, #32
 80050e4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	2300      	movs	r3, #0
 80050ea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050ec:	6683      	str	r3, [r0, #104]	; 0x68
}
 80050ee:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	e852 3f00 	ldrex	r3, [r2]
 80050f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	e842 3100 	strex	r1, r3, [r2]
 80050fe:	2900      	cmp	r1, #0
 8005100:	d1f6      	bne.n	80050f0 <UART_EndRxTransfer+0x3e>
 8005102:	e7ee      	b.n	80050e2 <UART_EndRxTransfer+0x30>

08005104 <UART_SetConfig>:
{
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005108:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800510a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	6922      	ldr	r2, [r4, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	6962      	ldr	r2, [r4, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	69e2      	ldr	r2, [r4, #28]
 8005118:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511a:	4aa0      	ldr	r2, [pc, #640]	; (800539c <UART_SetConfig+0x298>)
 800511c:	4002      	ands	r2, r0
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	6853      	ldr	r3, [r2, #4]
 8005126:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800512a:	68e1      	ldr	r1, [r4, #12]
 800512c:	430b      	orrs	r3, r1
 800512e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005130:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	4b9a      	ldr	r3, [pc, #616]	; (80053a0 <UART_SetConfig+0x29c>)
 8005136:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8005138:	bf1c      	itt	ne
 800513a:	6a23      	ldrne	r3, [r4, #32]
 800513c:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513e:	6893      	ldr	r3, [r2, #8]
 8005140:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005144:	430b      	orrs	r3, r1
 8005146:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	4a96      	ldr	r2, [pc, #600]	; (80053a4 <UART_SetConfig+0x2a0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d011      	beq.n	8005174 <UART_SetConfig+0x70>
 8005150:	4a95      	ldr	r2, [pc, #596]	; (80053a8 <UART_SetConfig+0x2a4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d020      	beq.n	8005198 <UART_SetConfig+0x94>
 8005156:	4a95      	ldr	r2, [pc, #596]	; (80053ac <UART_SetConfig+0x2a8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d03a      	beq.n	80051d2 <UART_SetConfig+0xce>
 800515c:	4a94      	ldr	r2, [pc, #592]	; (80053b0 <UART_SetConfig+0x2ac>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d05f      	beq.n	8005222 <UART_SetConfig+0x11e>
 8005162:	4a94      	ldr	r2, [pc, #592]	; (80053b4 <UART_SetConfig+0x2b0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d072      	beq.n	800524e <UART_SetConfig+0x14a>
 8005168:	4a8d      	ldr	r2, [pc, #564]	; (80053a0 <UART_SetConfig+0x29c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	f000 8087 	beq.w	800527e <UART_SetConfig+0x17a>
 8005170:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005172:	e03e      	b.n	80051f2 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005174:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005178:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800517c:	f002 0203 	and.w	r2, r2, #3
 8005180:	2a03      	cmp	r2, #3
 8005182:	d807      	bhi.n	8005194 <UART_SetConfig+0x90>
 8005184:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005188:	00040096 	.word	0x00040096
 800518c:	015c015a 	.word	0x015c015a
 8005190:	2204      	movs	r2, #4
 8005192:	e02e      	b.n	80051f2 <UART_SetConfig+0xee>
 8005194:	2210      	movs	r2, #16
 8005196:	e02c      	b.n	80051f2 <UART_SetConfig+0xee>
 8005198:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800519c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80051a0:	f002 020c 	and.w	r2, r2, #12
 80051a4:	2a0c      	cmp	r2, #12
 80051a6:	d812      	bhi.n	80051ce <UART_SetConfig+0xca>
 80051a8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80051ac:	001100a0 	.word	0x001100a0
 80051b0:	00110011 	.word	0x00110011
 80051b4:	0011000d 	.word	0x0011000d
 80051b8:	00110011 	.word	0x00110011
 80051bc:	0011014c 	.word	0x0011014c
 80051c0:	00110011 	.word	0x00110011
 80051c4:	000f      	.short	0x000f
 80051c6:	2204      	movs	r2, #4
 80051c8:	e013      	b.n	80051f2 <UART_SetConfig+0xee>
 80051ca:	2208      	movs	r2, #8
 80051cc:	e011      	b.n	80051f2 <UART_SetConfig+0xee>
 80051ce:	2210      	movs	r2, #16
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0xee>
 80051d2:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <UART_SetConfig+0x2b4>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051dc:	2b20      	cmp	r3, #32
 80051de:	f000 8133 	beq.w	8005448 <UART_SetConfig+0x344>
 80051e2:	d819      	bhi.n	8005218 <UART_SetConfig+0x114>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80ac 	beq.w	8005342 <UART_SetConfig+0x23e>
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	bf14      	ite	ne
 80051ee:	2210      	movne	r2, #16
 80051f0:	2204      	moveq	r2, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f2:	69e0      	ldr	r0, [r4, #28]
 80051f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80051f8:	f000 80a9 	beq.w	800534e <UART_SetConfig+0x24a>
    switch (clocksource)
 80051fc:	2a08      	cmp	r2, #8
 80051fe:	f200 8117 	bhi.w	8005430 <UART_SetConfig+0x32c>
 8005202:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005206:	00e7      	.short	0x00e7
 8005208:	010300fd 	.word	0x010300fd
 800520c:	01000115 	.word	0x01000115
 8005210:	01150115 	.word	0x01150115
 8005214:	00e40115 	.word	0x00e40115
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	bf14      	ite	ne
 800521c:	2210      	movne	r2, #16
 800521e:	2208      	moveq	r2, #8
 8005220:	e7e7      	b.n	80051f2 <UART_SetConfig+0xee>
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <UART_SetConfig+0x2b4>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	f000 810d 	beq.w	800544c <UART_SetConfig+0x348>
 8005232:	d807      	bhi.n	8005244 <UART_SetConfig+0x140>
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8086 	beq.w	8005346 <UART_SetConfig+0x242>
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	bf14      	ite	ne
 800523e:	2210      	movne	r2, #16
 8005240:	2204      	moveq	r2, #4
 8005242:	e7d6      	b.n	80051f2 <UART_SetConfig+0xee>
 8005244:	2bc0      	cmp	r3, #192	; 0xc0
 8005246:	bf14      	ite	ne
 8005248:	2210      	movne	r2, #16
 800524a:	2208      	moveq	r2, #8
 800524c:	e7d1      	b.n	80051f2 <UART_SetConfig+0xee>
 800524e:	4b5a      	ldr	r3, [pc, #360]	; (80053b8 <UART_SetConfig+0x2b4>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525c:	f000 80f8 	beq.w	8005450 <UART_SetConfig+0x34c>
 8005260:	d807      	bhi.n	8005272 <UART_SetConfig+0x16e>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d071      	beq.n	800534a <UART_SetConfig+0x246>
 8005266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526a:	bf14      	ite	ne
 800526c:	2210      	movne	r2, #16
 800526e:	2204      	moveq	r2, #4
 8005270:	e7bf      	b.n	80051f2 <UART_SetConfig+0xee>
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	bf14      	ite	ne
 8005278:	2210      	movne	r2, #16
 800527a:	2208      	moveq	r2, #8
 800527c:	e7b9      	b.n	80051f2 <UART_SetConfig+0xee>
 800527e:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <UART_SetConfig+0x2b4>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528c:	d054      	beq.n	8005338 <UART_SetConfig+0x234>
 800528e:	d809      	bhi.n	80052a4 <UART_SetConfig+0x1a0>
 8005290:	b383      	cbz	r3, 80052f4 <UART_SetConfig+0x1f0>
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	bf18      	it	ne
 8005298:	2001      	movne	r0, #1
 800529a:	f040 80ad 	bne.w	80053f8 <UART_SetConfig+0x2f4>
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe fa71 	bl	8003784 <HAL_RCC_GetSysClockFreq>
        break;
 80052a2:	e029      	b.n	80052f8 <UART_SetConfig+0x1f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a8:	d102      	bne.n	80052b0 <UART_SetConfig+0x1ac>
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052ae:	e026      	b.n	80052fe <UART_SetConfig+0x1fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b0:	2001      	movs	r0, #1
 80052b2:	e0a1      	b.n	80053f8 <UART_SetConfig+0x2f4>
 80052b4:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b6:	493a      	ldr	r1, [pc, #232]	; (80053a0 <UART_SetConfig+0x29c>)
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d19a      	bne.n	80051f2 <UART_SetConfig+0xee>
    switch (clocksource)
 80052bc:	2a08      	cmp	r2, #8
 80052be:	f200 80a7 	bhi.w	8005410 <UART_SetConfig+0x30c>
 80052c2:	a301      	add	r3, pc, #4	; (adr r3, 80052c8 <UART_SetConfig+0x1c4>)
 80052c4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	08005411 	.word	0x08005411
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	08005411 	.word	0x08005411
 80052d8:	0800529f 	.word	0x0800529f
 80052dc:	08005411 	.word	0x08005411
 80052e0:	08005411 	.word	0x08005411
 80052e4:	08005411 	.word	0x08005411
 80052e8:	0800533d 	.word	0x0800533d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ec:	2200      	movs	r2, #0
 80052ee:	e7e2      	b.n	80052b6 <UART_SetConfig+0x1b2>
    switch (clocksource)
 80052f0:	4832      	ldr	r0, [pc, #200]	; (80053bc <UART_SetConfig+0x2b8>)
 80052f2:	e004      	b.n	80052fe <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f4:	f7fe fe7e 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	f000 808b 	beq.w	8005414 <UART_SetConfig+0x310>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005304:	4283      	cmp	r3, r0
 8005306:	f200 8087 	bhi.w	8005418 <UART_SetConfig+0x314>
 800530a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800530e:	f200 8085 	bhi.w	800541c <UART_SetConfig+0x318>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005312:	0e01      	lsrs	r1, r0, #24
 8005314:	0200      	lsls	r0, r0, #8
 8005316:	0853      	lsrs	r3, r2, #1
 8005318:	18c0      	adds	r0, r0, r3
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	f141 0100 	adc.w	r1, r1, #0
 8005322:	f7fb fcb1 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005326:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800532a:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <UART_SetConfig+0x2bc>)
 800532c:	429a      	cmp	r2, r3
 800532e:	d877      	bhi.n	8005420 <UART_SetConfig+0x31c>
          huart->Instance->BRR = usartdiv;
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	60d8      	str	r0, [r3, #12]
 8005334:	2000      	movs	r0, #0
 8005336:	e05f      	b.n	80053f8 <UART_SetConfig+0x2f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005338:	4820      	ldr	r0, [pc, #128]	; (80053bc <UART_SetConfig+0x2b8>)
 800533a:	e7e0      	b.n	80052fe <UART_SetConfig+0x1fa>
        pclk = (uint32_t) LSE_VALUE;
 800533c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005340:	e7dd      	b.n	80052fe <UART_SetConfig+0x1fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005342:	2200      	movs	r2, #0
 8005344:	e755      	b.n	80051f2 <UART_SetConfig+0xee>
 8005346:	2200      	movs	r2, #0
 8005348:	e753      	b.n	80051f2 <UART_SetConfig+0xee>
 800534a:	2200      	movs	r2, #0
 800534c:	e751      	b.n	80051f2 <UART_SetConfig+0xee>
    switch (clocksource)
 800534e:	2a08      	cmp	r2, #8
 8005350:	d868      	bhi.n	8005424 <UART_SetConfig+0x320>
 8005352:	e8df f002 	tbb	[pc, r2]
 8005356:	1f05      	.short	0x1f05
 8005358:	6737673a 	.word	0x6737673a
 800535c:	6767      	.short	0x6767
 800535e:	09          	.byte	0x09
 800535f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fe fe48 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005364:	2800      	cmp	r0, #0
 8005366:	d05f      	beq.n	8005428 <UART_SetConfig+0x324>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005368:	6862      	ldr	r2, [r4, #4]
 800536a:	0853      	lsrs	r3, r2, #1
 800536c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005370:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005374:	f1a3 0110 	sub.w	r1, r3, #16
 8005378:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800537c:	4291      	cmp	r1, r2
 800537e:	d855      	bhi.n	800542c <UART_SetConfig+0x328>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005380:	f023 020f 	bic.w	r2, r3, #15
 8005384:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005386:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005388:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800538c:	4313      	orrs	r3, r2
 800538e:	60cb      	str	r3, [r1, #12]
 8005390:	2000      	movs	r0, #0
 8005392:	e031      	b.n	80053f8 <UART_SetConfig+0x2f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005394:	f7fe fe40 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
        break;
 8005398:	e7e4      	b.n	8005364 <UART_SetConfig+0x260>
 800539a:	bf00      	nop
 800539c:	efff69f3 	.word	0xefff69f3
 80053a0:	40008000 	.word	0x40008000
 80053a4:	40013800 	.word	0x40013800
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004800 	.word	0x40004800
 80053b0:	40004c00 	.word	0x40004c00
 80053b4:	40005000 	.word	0x40005000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	00f42400 	.word	0x00f42400
 80053c0:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetSysClockFreq();
 80053c4:	f7fe f9de 	bl	8003784 <HAL_RCC_GetSysClockFreq>
        break;
 80053c8:	e7cc      	b.n	8005364 <UART_SetConfig+0x260>
        pclk = (uint32_t) HSI_VALUE;
 80053ca:	4822      	ldr	r0, [pc, #136]	; (8005454 <UART_SetConfig+0x350>)
 80053cc:	e7cc      	b.n	8005368 <UART_SetConfig+0x264>
    switch (clocksource)
 80053ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053d2:	e002      	b.n	80053da <UART_SetConfig+0x2d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe fe0e 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053d8:	b360      	cbz	r0, 8005434 <UART_SetConfig+0x330>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80053e0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e4:	f1a0 0210 	sub.w	r2, r0, #16
 80053e8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d823      	bhi.n	8005438 <UART_SetConfig+0x334>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	b280      	uxth	r0, r0
 80053f4:	60d8      	str	r0, [r3, #12]
 80053f6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80053fc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80053fe:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7fe fe0a 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
        break;
 8005404:	e7e8      	b.n	80053d8 <UART_SetConfig+0x2d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fe f9bd 	bl	8003784 <HAL_RCC_GetSysClockFreq>
        break;
 800540a:	e7e5      	b.n	80053d8 <UART_SetConfig+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4811      	ldr	r0, [pc, #68]	; (8005454 <UART_SetConfig+0x350>)
 800540e:	e7e4      	b.n	80053da <UART_SetConfig+0x2d6>
    switch (clocksource)
 8005410:	2001      	movs	r0, #1
 8005412:	e7f1      	b.n	80053f8 <UART_SetConfig+0x2f4>
 8005414:	2000      	movs	r0, #0
 8005416:	e7ef      	b.n	80053f8 <UART_SetConfig+0x2f4>
        ret = HAL_ERROR;
 8005418:	2001      	movs	r0, #1
 800541a:	e7ed      	b.n	80053f8 <UART_SetConfig+0x2f4>
 800541c:	2001      	movs	r0, #1
 800541e:	e7eb      	b.n	80053f8 <UART_SetConfig+0x2f4>
          ret = HAL_ERROR;
 8005420:	2001      	movs	r0, #1
 8005422:	e7e9      	b.n	80053f8 <UART_SetConfig+0x2f4>
    switch (clocksource)
 8005424:	2001      	movs	r0, #1
 8005426:	e7e7      	b.n	80053f8 <UART_SetConfig+0x2f4>
 8005428:	2000      	movs	r0, #0
 800542a:	e7e5      	b.n	80053f8 <UART_SetConfig+0x2f4>
        ret = HAL_ERROR;
 800542c:	2001      	movs	r0, #1
 800542e:	e7e3      	b.n	80053f8 <UART_SetConfig+0x2f4>
    switch (clocksource)
 8005430:	2001      	movs	r0, #1
 8005432:	e7e1      	b.n	80053f8 <UART_SetConfig+0x2f4>
 8005434:	2000      	movs	r0, #0
 8005436:	e7df      	b.n	80053f8 <UART_SetConfig+0x2f4>
        ret = HAL_ERROR;
 8005438:	2001      	movs	r0, #1
 800543a:	e7dd      	b.n	80053f8 <UART_SetConfig+0x2f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543c:	2202      	movs	r2, #2
 800543e:	e6d8      	b.n	80051f2 <UART_SetConfig+0xee>
 8005440:	2208      	movs	r2, #8
 8005442:	e6d6      	b.n	80051f2 <UART_SetConfig+0xee>
 8005444:	2202      	movs	r2, #2
 8005446:	e6d4      	b.n	80051f2 <UART_SetConfig+0xee>
 8005448:	2202      	movs	r2, #2
 800544a:	e6d2      	b.n	80051f2 <UART_SetConfig+0xee>
 800544c:	2202      	movs	r2, #2
 800544e:	e6d0      	b.n	80051f2 <UART_SetConfig+0xee>
 8005450:	2202      	movs	r2, #2
 8005452:	e6ce      	b.n	80051f2 <UART_SetConfig+0xee>
 8005454:	00f42400 	.word	0x00f42400

08005458 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800545a:	f013 0f08 	tst.w	r3, #8
 800545e:	d006      	beq.n	800546e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005460:	6802      	ldr	r2, [r0, #0]
 8005462:	6853      	ldr	r3, [r2, #4]
 8005464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005468:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800546a:	430b      	orrs	r3, r1
 800546c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800546e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005470:	f013 0f01 	tst.w	r3, #1
 8005474:	d006      	beq.n	8005484 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005476:	6802      	ldr	r2, [r0, #0]
 8005478:	6853      	ldr	r3, [r2, #4]
 800547a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800547e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005480:	430b      	orrs	r3, r1
 8005482:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005484:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005486:	f013 0f02 	tst.w	r3, #2
 800548a:	d006      	beq.n	800549a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548c:	6802      	ldr	r2, [r0, #0]
 800548e:	6853      	ldr	r3, [r2, #4]
 8005490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005494:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005496:	430b      	orrs	r3, r1
 8005498:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800549a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800549c:	f013 0f04 	tst.w	r3, #4
 80054a0:	d006      	beq.n	80054b0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	6853      	ldr	r3, [r2, #4]
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054b2:	f013 0f10 	tst.w	r3, #16
 80054b6:	d006      	beq.n	80054c6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b8:	6802      	ldr	r2, [r0, #0]
 80054ba:	6893      	ldr	r3, [r2, #8]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054c8:	f013 0f20 	tst.w	r3, #32
 80054cc:	d006      	beq.n	80054dc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ce:	6802      	ldr	r2, [r0, #0]
 80054d0:	6893      	ldr	r3, [r2, #8]
 80054d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80054d8:	430b      	orrs	r3, r1
 80054da:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e4:	6802      	ldr	r2, [r0, #0]
 80054e6:	6853      	ldr	r3, [r2, #4]
 80054e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80054f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f8:	d00b      	beq.n	8005512 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005500:	d006      	beq.n	8005510 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005502:	6802      	ldr	r2, [r0, #0]
 8005504:	6853      	ldr	r3, [r2, #4]
 8005506:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800550a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800550c:	430b      	orrs	r3, r1
 800550e:	6053      	str	r3, [r2, #4]
}
 8005510:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005512:	6802      	ldr	r2, [r0, #0]
 8005514:	6853      	ldr	r3, [r2, #4]
 8005516:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800551a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800551c:	430b      	orrs	r3, r1
 800551e:	6053      	str	r3, [r2, #4]
 8005520:	e7eb      	b.n	80054fa <UART_AdvFeatureConfig+0xa2>

08005522 <UART_WaitOnFlagUntilTimeout>:
{
 8005522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005526:	4680      	mov	r8, r0
 8005528:	460e      	mov	r6, r1
 800552a:	4615      	mov	r5, r2
 800552c:	4699      	mov	r9, r3
 800552e:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005530:	f8d8 3000 	ldr.w	r3, [r8]
 8005534:	69dc      	ldr	r4, [r3, #28]
 8005536:	ea36 0404 	bics.w	r4, r6, r4
 800553a:	bf0c      	ite	eq
 800553c:	2401      	moveq	r4, #1
 800553e:	2400      	movne	r4, #0
 8005540:	42ac      	cmp	r4, r5
 8005542:	d131      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8005544:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005548:	d0f4      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fd fa2f 	bl	80029ac <HAL_GetTick>
 800554e:	eba0 0009 	sub.w	r0, r0, r9
 8005552:	42b8      	cmp	r0, r7
 8005554:	d82b      	bhi.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8c>
 8005556:	b367      	cbz	r7, 80055b2 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005558:	f8d8 3000 	ldr.w	r3, [r8]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f012 0f04 	tst.w	r2, #4
 8005562:	d0e5      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	f012 0f08 	tst.w	r2, #8
 800556a:	d111      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005572:	d0dd      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005578:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800557a:	4640      	mov	r0, r8
 800557c:	f7ff fd99 	bl	80050b2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005580:	2320      	movs	r3, #32
 8005582:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005586:	2300      	movs	r3, #0
 8005588:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
          return HAL_TIMEOUT;
 800558c:	2003      	movs	r0, #3
 800558e:	e00c      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005590:	2408      	movs	r4, #8
 8005592:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8005594:	4640      	mov	r0, r8
 8005596:	f7ff fd8c 	bl	80050b2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559a:	f8c8 4084 	str.w	r4, [r8, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800559e:	2300      	movs	r3, #0
 80055a0:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
          return HAL_ERROR;
 80055a4:	2001      	movs	r0, #1
 80055a6:	e000      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x88>
  return HAL_OK;
 80055a8:	2000      	movs	r0, #0
}
 80055aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80055ae:	2003      	movs	r0, #3
 80055b0:	e7fb      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x88>
 80055b2:	2003      	movs	r0, #3
 80055b4:	e7f9      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0x88>

080055b6 <HAL_UART_Transmit>:
{
 80055b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80055be:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d15d      	bne.n	8005680 <HAL_UART_Transmit+0xca>
 80055c4:	4604      	mov	r4, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d05c      	beq.n	8005688 <HAL_UART_Transmit+0xd2>
 80055ce:	b90a      	cbnz	r2, 80055d4 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 80055d0:	2001      	movs	r0, #1
 80055d2:	e056      	b.n	8005682 <HAL_UART_Transmit+0xcc>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055da:	2321      	movs	r3, #33	; 0x21
 80055dc:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80055de:	f7fd f9e5 	bl	80029ac <HAL_GetTick>
 80055e2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80055e4:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80055e8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68a3      	ldr	r3, [r4, #8]
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d00a      	beq.n	800560a <HAL_UART_Transmit+0x54>
      pdata16bits = NULL;
 80055f4:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80055f8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	b383      	cbz	r3, 8005662 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005600:	f04f 0900 	mov.w	r9, #0
 8005604:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005608:	e01b      	b.n	8005642 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	b913      	cbnz	r3, 8005614 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 800560e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8005610:	2500      	movs	r5, #0
 8005612:	e7f1      	b.n	80055f8 <HAL_UART_Transmit+0x42>
      pdata16bits = NULL;
 8005614:	f04f 0a00 	mov.w	sl, #0
 8005618:	e7ee      	b.n	80055f8 <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 800561a:	2320      	movs	r3, #32
 800561c:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 800561e:	2003      	movs	r0, #3
 8005620:	e02f      	b.n	8005682 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800562e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005632:	3a01      	subs	r2, #1
 8005634:	b292      	uxth	r2, r2
 8005636:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800563a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800563e:	b29b      	uxth	r3, r3
 8005640:	b17b      	cbz	r3, 8005662 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	9600      	str	r6, [sp, #0]
 8005644:	463b      	mov	r3, r7
 8005646:	464a      	mov	r2, r9
 8005648:	4641      	mov	r1, r8
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ff69 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005650:	2800      	cmp	r0, #0
 8005652:	d1e2      	bne.n	800561a <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 8005654:	2d00      	cmp	r5, #0
 8005656:	d0e4      	beq.n	8005622 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800565e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005660:	e7e5      	b.n	800562e <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005662:	9600      	str	r6, [sp, #0]
 8005664:	463b      	mov	r3, r7
 8005666:	2200      	movs	r2, #0
 8005668:	2140      	movs	r1, #64	; 0x40
 800566a:	4620      	mov	r0, r4
 800566c:	f7ff ff59 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005670:	b910      	cbnz	r0, 8005678 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8005672:	2320      	movs	r3, #32
 8005674:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005676:	e004      	b.n	8005682 <HAL_UART_Transmit+0xcc>
      huart->gState = HAL_UART_STATE_READY;
 8005678:	2320      	movs	r3, #32
 800567a:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800567c:	2003      	movs	r0, #3
 800567e:	e000      	b.n	8005682 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8005680:	2002      	movs	r0, #2
}
 8005682:	b002      	add	sp, #8
 8005684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8005688:	2001      	movs	r0, #1
 800568a:	e7fa      	b.n	8005682 <HAL_UART_Transmit+0xcc>

0800568c <HAL_UART_Receive>:
{
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	b083      	sub	sp, #12
 8005692:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005694:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005698:	2b20      	cmp	r3, #32
 800569a:	d173      	bne.n	8005784 <HAL_UART_Receive+0xf8>
 800569c:	4604      	mov	r4, r0
 800569e:	460d      	mov	r5, r1
 80056a0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d072      	beq.n	800578c <HAL_UART_Receive+0x100>
 80056a6:	b90a      	cbnz	r2, 80056ac <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
 80056aa:	e06c      	b.n	8005786 <HAL_UART_Receive+0xfa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b2:	2222      	movs	r2, #34	; 0x22
 80056b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	6603      	str	r3, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80056ba:	f7fd f977 	bl	80029ac <HAL_GetTick>
 80056be:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 80056c0:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80056c4:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ce:	d015      	beq.n	80056fc <HAL_UART_Receive+0x70>
 80056d0:	b9f3      	cbnz	r3, 8005710 <HAL_UART_Receive+0x84>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	f04f 08ff 	moveq.w	r8, #255	; 0xff
 80056dc:	f04f 087f 	movne.w	r8, #127	; 0x7f
 80056e0:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 80056e4:	f04f 0b00 	mov.w	fp, #0
    while (huart->RxXferCount > 0U)
 80056e8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d043      	beq.n	800577a <HAL_UART_Receive+0xee>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056f2:	f04f 0a00 	mov.w	sl, #0
 80056f6:	f04f 0920 	mov.w	r9, #32
 80056fa:	e02c      	b.n	8005756 <HAL_UART_Receive+0xca>
    UART_MASK_COMPUTATION(huart);
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d046      	beq.n	8005790 <HAL_UART_Receive+0x104>
 8005702:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005706:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 800570a:	f04f 0b00 	mov.w	fp, #0
 800570e:	e7eb      	b.n	80056e8 <HAL_UART_Receive+0x5c>
    UART_MASK_COMPUTATION(huart);
 8005710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005714:	d002      	beq.n	800571c <HAL_UART_Receive+0x90>
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	e7e1      	b.n	80056e0 <HAL_UART_Receive+0x54>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf14      	ite	ne
 8005722:	f04f 083f 	movne.w	r8, #63	; 0x3f
 8005726:	f04f 087f 	moveq.w	r8, #127	; 0x7f
 800572a:	e7d9      	b.n	80056e0 <HAL_UART_Receive+0x54>
        huart->RxState = HAL_UART_STATE_READY;
 800572c:	2320      	movs	r3, #32
 800572e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8005732:	2003      	movs	r0, #3
 8005734:	e027      	b.n	8005786 <HAL_UART_Receive+0xfa>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800573a:	ea08 0303 	and.w	r3, r8, r3
 800573e:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8005742:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005746:	3b01      	subs	r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800574e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005752:	b29b      	uxth	r3, r3
 8005754:	b18b      	cbz	r3, 800577a <HAL_UART_Receive+0xee>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005756:	9600      	str	r6, [sp, #0]
 8005758:	463b      	mov	r3, r7
 800575a:	4652      	mov	r2, sl
 800575c:	4649      	mov	r1, r9
 800575e:	4620      	mov	r0, r4
 8005760:	f7ff fedf 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005764:	2800      	cmp	r0, #0
 8005766:	d1e1      	bne.n	800572c <HAL_UART_Receive+0xa0>
      if (pdata8bits == NULL)
 8005768:	2d00      	cmp	r5, #0
 800576a:	d0e4      	beq.n	8005736 <HAL_UART_Receive+0xaa>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005770:	ea08 0303 	and.w	r3, r8, r3
 8005774:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8005778:	e7e3      	b.n	8005742 <HAL_UART_Receive+0xb6>
    huart->RxState = HAL_UART_STATE_READY;
 800577a:	2320      	movs	r3, #32
 800577c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8005780:	2000      	movs	r0, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Receive+0xfa>
    return HAL_BUSY;
 8005784:	2002      	movs	r0, #2
}
 8005786:	b003      	add	sp, #12
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 800578c:	2001      	movs	r0, #1
 800578e:	e7fa      	b.n	8005786 <HAL_UART_Receive+0xfa>
    UART_MASK_COMPUTATION(huart);
 8005790:	f240 18ff 	movw	r8, #511	; 0x1ff
 8005794:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
      pdata16bits = (uint16_t *) pData;
 8005798:	46ab      	mov	fp, r5
      pdata8bits  = NULL;
 800579a:	2500      	movs	r5, #0
 800579c:	e7a4      	b.n	80056e8 <HAL_UART_Receive+0x5c>

0800579e <UART_CheckIdleState>:
{
 800579e:	b530      	push	{r4, r5, lr}
 80057a0:	b083      	sub	sp, #12
 80057a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80057aa:	f7fd f8ff 	bl	80029ac <HAL_GetTick>
 80057ae:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	f012 0f08 	tst.w	r2, #8
 80057b8:	d110      	bne.n	80057dc <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f013 0f04 	tst.w	r3, #4
 80057c2:	d124      	bne.n	800580e <UART_CheckIdleState+0x70>
  huart->gState = HAL_UART_STATE_READY;
 80057c4:	2320      	movs	r3, #32
 80057c6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	2000      	movs	r0, #0
 80057ce:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d0:	6660      	str	r0, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80057d2:	2300      	movs	r3, #0
 80057d4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80057d8:	b003      	add	sp, #12
 80057da:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4603      	mov	r3, r0
 80057e4:	2200      	movs	r2, #0
 80057e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff fe99 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d0e2      	beq.n	80057ba <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	e852 3f00 	ldrex	r3, [r2]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	e842 3100 	strex	r1, r3, [r2]
 8005802:	2900      	cmp	r1, #0
 8005804:	d1f6      	bne.n	80057f4 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8005806:	2320      	movs	r3, #32
 8005808:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800580a:	2003      	movs	r0, #3
 800580c:	e7e1      	b.n	80057d2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	462b      	mov	r3, r5
 8005816:	2200      	movs	r2, #0
 8005818:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff fe80 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005822:	2800      	cmp	r0, #0
 8005824:	d0ce      	beq.n	80057c4 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005826:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	e852 3f00 	ldrex	r3, [r2]
 800582c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	e842 3100 	strex	r1, r3, [r2]
 8005834:	2900      	cmp	r1, #0
 8005836:	d1f6      	bne.n	8005826 <UART_CheckIdleState+0x88>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005838:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	f102 0308 	add.w	r3, r2, #8
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	3208      	adds	r2, #8
 8005848:	e842 3100 	strex	r1, r3, [r2]
 800584c:	2900      	cmp	r1, #0
 800584e:	d1f3      	bne.n	8005838 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8005850:	2320      	movs	r3, #32
 8005852:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8005856:	2003      	movs	r0, #3
 8005858:	e7bb      	b.n	80057d2 <UART_CheckIdleState+0x34>

0800585a <HAL_UART_Init>:
  if (huart == NULL)
 800585a:	b368      	cbz	r0, 80058b8 <HAL_UART_Init+0x5e>
{
 800585c:	b510      	push	{r4, lr}
 800585e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005860:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005862:	b303      	cbz	r3, 80058a6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	2324      	movs	r3, #36	; 0x24
 8005866:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005874:	b9e3      	cbnz	r3, 80058b0 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff fc44 	bl	8005104 <UART_SetConfig>
 800587c:	2801      	cmp	r0, #1
 800587e:	d011      	beq.n	80058a4 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	6853      	ldr	r3, [r2, #4]
 8005884:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005888:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	6893      	ldr	r3, [r2, #8]
 800588e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005892:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff ff7d 	bl	800579e <UART_CheckIdleState>
}
 80058a4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80058a6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80058aa:	f7fc fe61 	bl	8002570 <HAL_UART_MspInit>
 80058ae:	e7d9      	b.n	8005864 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fdd1 	bl	8005458 <UART_AdvFeatureConfig>
 80058b6:	e7de      	b.n	8005876 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 80058b8:	2001      	movs	r0, #1
}
 80058ba:	4770      	bx	lr

080058bc <__cvt>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	ec55 4b10 	vmov	r4, r5, d0
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	460e      	mov	r6, r1
 80058c8:	4619      	mov	r1, r3
 80058ca:	462b      	mov	r3, r5
 80058cc:	bfbb      	ittet	lt
 80058ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058d2:	461d      	movlt	r5, r3
 80058d4:	2300      	movge	r3, #0
 80058d6:	232d      	movlt	r3, #45	; 0x2d
 80058d8:	700b      	strb	r3, [r1, #0]
 80058da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058e0:	4691      	mov	r9, r2
 80058e2:	f023 0820 	bic.w	r8, r3, #32
 80058e6:	bfbc      	itt	lt
 80058e8:	4622      	movlt	r2, r4
 80058ea:	4614      	movlt	r4, r2
 80058ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058f0:	d005      	beq.n	80058fe <__cvt+0x42>
 80058f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058f6:	d100      	bne.n	80058fa <__cvt+0x3e>
 80058f8:	3601      	adds	r6, #1
 80058fa:	2102      	movs	r1, #2
 80058fc:	e000      	b.n	8005900 <__cvt+0x44>
 80058fe:	2103      	movs	r1, #3
 8005900:	ab03      	add	r3, sp, #12
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	ab02      	add	r3, sp, #8
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	ec45 4b10 	vmov	d0, r4, r5
 800590c:	4653      	mov	r3, sl
 800590e:	4632      	mov	r2, r6
 8005910:	f001 f892 	bl	8006a38 <_dtoa_r>
 8005914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005918:	4607      	mov	r7, r0
 800591a:	d102      	bne.n	8005922 <__cvt+0x66>
 800591c:	f019 0f01 	tst.w	r9, #1
 8005920:	d022      	beq.n	8005968 <__cvt+0xac>
 8005922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005926:	eb07 0906 	add.w	r9, r7, r6
 800592a:	d110      	bne.n	800594e <__cvt+0x92>
 800592c:	783b      	ldrb	r3, [r7, #0]
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d10a      	bne.n	8005948 <__cvt+0x8c>
 8005932:	2200      	movs	r2, #0
 8005934:	2300      	movs	r3, #0
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	f7fb f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800593e:	b918      	cbnz	r0, 8005948 <__cvt+0x8c>
 8005940:	f1c6 0601 	rsb	r6, r6, #1
 8005944:	f8ca 6000 	str.w	r6, [sl]
 8005948:	f8da 3000 	ldr.w	r3, [sl]
 800594c:	4499      	add	r9, r3
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	4620      	mov	r0, r4
 8005954:	4629      	mov	r1, r5
 8005956:	f7fb f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800595a:	b108      	cbz	r0, 8005960 <__cvt+0xa4>
 800595c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005960:	2230      	movs	r2, #48	; 0x30
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	454b      	cmp	r3, r9
 8005966:	d307      	bcc.n	8005978 <__cvt+0xbc>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800596c:	1bdb      	subs	r3, r3, r7
 800596e:	4638      	mov	r0, r7
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	b004      	add	sp, #16
 8005974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	9103      	str	r1, [sp, #12]
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e7f0      	b.n	8005962 <__cvt+0xa6>

08005980 <__exponent>:
 8005980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005982:	4603      	mov	r3, r0
 8005984:	2900      	cmp	r1, #0
 8005986:	bfb8      	it	lt
 8005988:	4249      	neglt	r1, r1
 800598a:	f803 2b02 	strb.w	r2, [r3], #2
 800598e:	bfb4      	ite	lt
 8005990:	222d      	movlt	r2, #45	; 0x2d
 8005992:	222b      	movge	r2, #43	; 0x2b
 8005994:	2909      	cmp	r1, #9
 8005996:	7042      	strb	r2, [r0, #1]
 8005998:	dd2a      	ble.n	80059f0 <__exponent+0x70>
 800599a:	f10d 0207 	add.w	r2, sp, #7
 800599e:	4617      	mov	r7, r2
 80059a0:	260a      	movs	r6, #10
 80059a2:	4694      	mov	ip, r2
 80059a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80059a8:	fb06 1415 	mls	r4, r6, r5, r1
 80059ac:	3430      	adds	r4, #48	; 0x30
 80059ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80059b2:	460c      	mov	r4, r1
 80059b4:	2c63      	cmp	r4, #99	; 0x63
 80059b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80059ba:	4629      	mov	r1, r5
 80059bc:	dcf1      	bgt.n	80059a2 <__exponent+0x22>
 80059be:	3130      	adds	r1, #48	; 0x30
 80059c0:	f1ac 0402 	sub.w	r4, ip, #2
 80059c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059c8:	1c41      	adds	r1, r0, #1
 80059ca:	4622      	mov	r2, r4
 80059cc:	42ba      	cmp	r2, r7
 80059ce:	d30a      	bcc.n	80059e6 <__exponent+0x66>
 80059d0:	f10d 0209 	add.w	r2, sp, #9
 80059d4:	eba2 020c 	sub.w	r2, r2, ip
 80059d8:	42bc      	cmp	r4, r7
 80059da:	bf88      	it	hi
 80059dc:	2200      	movhi	r2, #0
 80059de:	4413      	add	r3, r2
 80059e0:	1a18      	subs	r0, r3, r0
 80059e2:	b003      	add	sp, #12
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80059ee:	e7ed      	b.n	80059cc <__exponent+0x4c>
 80059f0:	2330      	movs	r3, #48	; 0x30
 80059f2:	3130      	adds	r1, #48	; 0x30
 80059f4:	7083      	strb	r3, [r0, #2]
 80059f6:	70c1      	strb	r1, [r0, #3]
 80059f8:	1d03      	adds	r3, r0, #4
 80059fa:	e7f1      	b.n	80059e0 <__exponent+0x60>

080059fc <_printf_float>:
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	ed2d 8b02 	vpush	{d8}
 8005a04:	b08d      	sub	sp, #52	; 0x34
 8005a06:	460c      	mov	r4, r1
 8005a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	461f      	mov	r7, r3
 8005a10:	4605      	mov	r5, r0
 8005a12:	f000 ff09 	bl	8006828 <_localeconv_r>
 8005a16:	f8d0 a000 	ldr.w	sl, [r0]
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f7fa fc28 	bl	8000270 <strlen>
 8005a20:	2300      	movs	r3, #0
 8005a22:	930a      	str	r3, [sp, #40]	; 0x28
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	9305      	str	r3, [sp, #20]
 8005a28:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a30:	3307      	adds	r3, #7
 8005a32:	f023 0307 	bic.w	r3, r3, #7
 8005a36:	f103 0208 	add.w	r2, r3, #8
 8005a3a:	f8c8 2000 	str.w	r2, [r8]
 8005a3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a4c:	ee08 0a10 	vmov	s16, r0
 8005a50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a58:	4b9e      	ldr	r3, [pc, #632]	; (8005cd4 <_printf_float+0x2d8>)
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	f7fb f865 	bl	8000b2c <__aeabi_dcmpun>
 8005a62:	bb88      	cbnz	r0, 8005ac8 <_printf_float+0xcc>
 8005a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a68:	4b9a      	ldr	r3, [pc, #616]	; (8005cd4 <_printf_float+0x2d8>)
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	f7fb f83f 	bl	8000af0 <__aeabi_dcmple>
 8005a72:	bb48      	cbnz	r0, 8005ac8 <_printf_float+0xcc>
 8005a74:	2200      	movs	r2, #0
 8005a76:	2300      	movs	r3, #0
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fb f82e 	bl	8000adc <__aeabi_dcmplt>
 8005a80:	b110      	cbz	r0, 8005a88 <_printf_float+0x8c>
 8005a82:	232d      	movs	r3, #45	; 0x2d
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	4a93      	ldr	r2, [pc, #588]	; (8005cd8 <_printf_float+0x2dc>)
 8005a8a:	4b94      	ldr	r3, [pc, #592]	; (8005cdc <_printf_float+0x2e0>)
 8005a8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a90:	bf94      	ite	ls
 8005a92:	4690      	movls	r8, r2
 8005a94:	4698      	movhi	r8, r3
 8005a96:	2303      	movs	r3, #3
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	9b05      	ldr	r3, [sp, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	f04f 0900 	mov.w	r9, #0
 8005aa6:	9700      	str	r7, [sp, #0]
 8005aa8:	4633      	mov	r3, r6
 8005aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 f9da 	bl	8005e68 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f040 8090 	bne.w	8005bda <_printf_float+0x1de>
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	b00d      	add	sp, #52	; 0x34
 8005ac0:	ecbd 8b02 	vpop	{d8}
 8005ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	4640      	mov	r0, r8
 8005ace:	4649      	mov	r1, r9
 8005ad0:	f7fb f82c 	bl	8000b2c <__aeabi_dcmpun>
 8005ad4:	b140      	cbz	r0, 8005ae8 <_printf_float+0xec>
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfbc      	itt	lt
 8005adc:	232d      	movlt	r3, #45	; 0x2d
 8005ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ae2:	4a7f      	ldr	r2, [pc, #508]	; (8005ce0 <_printf_float+0x2e4>)
 8005ae4:	4b7f      	ldr	r3, [pc, #508]	; (8005ce4 <_printf_float+0x2e8>)
 8005ae6:	e7d1      	b.n	8005a8c <_printf_float+0x90>
 8005ae8:	6863      	ldr	r3, [r4, #4]
 8005aea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aee:	9206      	str	r2, [sp, #24]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	d13f      	bne.n	8005b74 <_printf_float+0x178>
 8005af4:	2306      	movs	r3, #6
 8005af6:	6063      	str	r3, [r4, #4]
 8005af8:	9b05      	ldr	r3, [sp, #20]
 8005afa:	6861      	ldr	r1, [r4, #4]
 8005afc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b00:	2300      	movs	r3, #0
 8005b02:	9303      	str	r3, [sp, #12]
 8005b04:	ab0a      	add	r3, sp, #40	; 0x28
 8005b06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b0a:	ab09      	add	r3, sp, #36	; 0x24
 8005b0c:	ec49 8b10 	vmov	d0, r8, r9
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	6022      	str	r2, [r4, #0]
 8005b14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f7ff fecf 	bl	80058bc <__cvt>
 8005b1e:	9b06      	ldr	r3, [sp, #24]
 8005b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b22:	2b47      	cmp	r3, #71	; 0x47
 8005b24:	4680      	mov	r8, r0
 8005b26:	d108      	bne.n	8005b3a <_printf_float+0x13e>
 8005b28:	1cc8      	adds	r0, r1, #3
 8005b2a:	db02      	blt.n	8005b32 <_printf_float+0x136>
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	dd41      	ble.n	8005bb6 <_printf_float+0x1ba>
 8005b32:	f1ab 0302 	sub.w	r3, fp, #2
 8005b36:	fa5f fb83 	uxtb.w	fp, r3
 8005b3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b3e:	d820      	bhi.n	8005b82 <_printf_float+0x186>
 8005b40:	3901      	subs	r1, #1
 8005b42:	465a      	mov	r2, fp
 8005b44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b48:	9109      	str	r1, [sp, #36]	; 0x24
 8005b4a:	f7ff ff19 	bl	8005980 <__exponent>
 8005b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b50:	1813      	adds	r3, r2, r0
 8005b52:	2a01      	cmp	r2, #1
 8005b54:	4681      	mov	r9, r0
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	dc02      	bgt.n	8005b60 <_printf_float+0x164>
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	07d2      	lsls	r2, r2, #31
 8005b5e:	d501      	bpl.n	8005b64 <_printf_float+0x168>
 8005b60:	3301      	adds	r3, #1
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d09c      	beq.n	8005aa6 <_printf_float+0xaa>
 8005b6c:	232d      	movs	r3, #45	; 0x2d
 8005b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b72:	e798      	b.n	8005aa6 <_printf_float+0xaa>
 8005b74:	9a06      	ldr	r2, [sp, #24]
 8005b76:	2a47      	cmp	r2, #71	; 0x47
 8005b78:	d1be      	bne.n	8005af8 <_printf_float+0xfc>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1bc      	bne.n	8005af8 <_printf_float+0xfc>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7b9      	b.n	8005af6 <_printf_float+0xfa>
 8005b82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b86:	d118      	bne.n	8005bba <_printf_float+0x1be>
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	dd0b      	ble.n	8005ba6 <_printf_float+0x1aa>
 8005b8e:	6121      	str	r1, [r4, #16]
 8005b90:	b913      	cbnz	r3, 8005b98 <_printf_float+0x19c>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	07d0      	lsls	r0, r2, #31
 8005b96:	d502      	bpl.n	8005b9e <_printf_float+0x1a2>
 8005b98:	3301      	adds	r3, #1
 8005b9a:	440b      	add	r3, r1
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	e7de      	b.n	8005b64 <_printf_float+0x168>
 8005ba6:	b913      	cbnz	r3, 8005bae <_printf_float+0x1b2>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	07d2      	lsls	r2, r2, #31
 8005bac:	d501      	bpl.n	8005bb2 <_printf_float+0x1b6>
 8005bae:	3302      	adds	r3, #2
 8005bb0:	e7f4      	b.n	8005b9c <_printf_float+0x1a0>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7f2      	b.n	8005b9c <_printf_float+0x1a0>
 8005bb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	db05      	blt.n	8005bcc <_printf_float+0x1d0>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	6121      	str	r1, [r4, #16]
 8005bc4:	07d8      	lsls	r0, r3, #31
 8005bc6:	d5ea      	bpl.n	8005b9e <_printf_float+0x1a2>
 8005bc8:	1c4b      	adds	r3, r1, #1
 8005bca:	e7e7      	b.n	8005b9c <_printf_float+0x1a0>
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	bfd4      	ite	le
 8005bd0:	f1c1 0202 	rsble	r2, r1, #2
 8005bd4:	2201      	movgt	r2, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	e7e0      	b.n	8005b9c <_printf_float+0x1a0>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	055a      	lsls	r2, r3, #21
 8005bde:	d407      	bmi.n	8005bf0 <_printf_float+0x1f4>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	4642      	mov	r2, r8
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d12c      	bne.n	8005c48 <_printf_float+0x24c>
 8005bee:	e764      	b.n	8005aba <_printf_float+0xbe>
 8005bf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bf4:	f240 80e0 	bls.w	8005db8 <_printf_float+0x3bc>
 8005bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f7fa ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d034      	beq.n	8005c72 <_printf_float+0x276>
 8005c08:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <_printf_float+0x2ec>)
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af51 	beq.w	8005aba <_printf_float+0xbe>
 8005c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	db02      	blt.n	8005c26 <_printf_float+0x22a>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07d8      	lsls	r0, r3, #31
 8005c24:	d510      	bpl.n	8005c48 <_printf_float+0x24c>
 8005c26:	ee18 3a10 	vmov	r3, s16
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af41 	beq.w	8005aba <_printf_float+0xbe>
 8005c38:	f04f 0800 	mov.w	r8, #0
 8005c3c:	f104 091a 	add.w	r9, r4, #26
 8005c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c42:	3b01      	subs	r3, #1
 8005c44:	4543      	cmp	r3, r8
 8005c46:	dc09      	bgt.n	8005c5c <_printf_float+0x260>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	079b      	lsls	r3, r3, #30
 8005c4c:	f100 8107 	bmi.w	8005e5e <_printf_float+0x462>
 8005c50:	68e0      	ldr	r0, [r4, #12]
 8005c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c54:	4298      	cmp	r0, r3
 8005c56:	bfb8      	it	lt
 8005c58:	4618      	movlt	r0, r3
 8005c5a:	e730      	b.n	8005abe <_printf_float+0xc2>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	464a      	mov	r2, r9
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	f43f af27 	beq.w	8005aba <_printf_float+0xbe>
 8005c6c:	f108 0801 	add.w	r8, r8, #1
 8005c70:	e7e6      	b.n	8005c40 <_printf_float+0x244>
 8005c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dc39      	bgt.n	8005cec <_printf_float+0x2f0>
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <_printf_float+0x2ec>)
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f af19 	beq.w	8005aba <_printf_float+0xbe>
 8005c88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	d102      	bne.n	8005c96 <_printf_float+0x29a>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07d9      	lsls	r1, r3, #31
 8005c94:	d5d8      	bpl.n	8005c48 <_printf_float+0x24c>
 8005c96:	ee18 3a10 	vmov	r3, s16
 8005c9a:	4652      	mov	r2, sl
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f af09 	beq.w	8005aba <_printf_float+0xbe>
 8005ca8:	f04f 0900 	mov.w	r9, #0
 8005cac:	f104 0a1a 	add.w	sl, r4, #26
 8005cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb2:	425b      	negs	r3, r3
 8005cb4:	454b      	cmp	r3, r9
 8005cb6:	dc01      	bgt.n	8005cbc <_printf_float+0x2c0>
 8005cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cba:	e792      	b.n	8005be2 <_printf_float+0x1e6>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f aef7 	beq.w	8005aba <_printf_float+0xbe>
 8005ccc:	f109 0901 	add.w	r9, r9, #1
 8005cd0:	e7ee      	b.n	8005cb0 <_printf_float+0x2b4>
 8005cd2:	bf00      	nop
 8005cd4:	7fefffff 	.word	0x7fefffff
 8005cd8:	0800a3d7 	.word	0x0800a3d7
 8005cdc:	0800a3db 	.word	0x0800a3db
 8005ce0:	0800a3df 	.word	0x0800a3df
 8005ce4:	0800a3e3 	.word	0x0800a3e3
 8005ce8:	0800a3e7 	.word	0x0800a3e7
 8005cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	bfa8      	it	ge
 8005cf4:	461a      	movge	r2, r3
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	4691      	mov	r9, r2
 8005cfa:	dc37      	bgt.n	8005d6c <_printf_float+0x370>
 8005cfc:	f04f 0b00 	mov.w	fp, #0
 8005d00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d04:	f104 021a 	add.w	r2, r4, #26
 8005d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d0a:	9305      	str	r3, [sp, #20]
 8005d0c:	eba3 0309 	sub.w	r3, r3, r9
 8005d10:	455b      	cmp	r3, fp
 8005d12:	dc33      	bgt.n	8005d7c <_printf_float+0x380>
 8005d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	db3b      	blt.n	8005d94 <_printf_float+0x398>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	07da      	lsls	r2, r3, #31
 8005d20:	d438      	bmi.n	8005d94 <_printf_float+0x398>
 8005d22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d26:	eba2 0903 	sub.w	r9, r2, r3
 8005d2a:	9b05      	ldr	r3, [sp, #20]
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	4591      	cmp	r9, r2
 8005d30:	bfa8      	it	ge
 8005d32:	4691      	movge	r9, r2
 8005d34:	f1b9 0f00 	cmp.w	r9, #0
 8005d38:	dc35      	bgt.n	8005da6 <_printf_float+0x3aa>
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d42:	f104 0a1a 	add.w	sl, r4, #26
 8005d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	eba3 0309 	sub.w	r3, r3, r9
 8005d50:	4543      	cmp	r3, r8
 8005d52:	f77f af79 	ble.w	8005c48 <_printf_float+0x24c>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	f43f aeaa 	beq.w	8005aba <_printf_float+0xbe>
 8005d66:	f108 0801 	add.w	r8, r8, #1
 8005d6a:	e7ec      	b.n	8005d46 <_printf_float+0x34a>
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4642      	mov	r2, r8
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	d1c0      	bne.n	8005cfc <_printf_float+0x300>
 8005d7a:	e69e      	b.n	8005aba <_printf_float+0xbe>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	9205      	str	r2, [sp, #20]
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	f43f ae97 	beq.w	8005aba <_printf_float+0xbe>
 8005d8c:	9a05      	ldr	r2, [sp, #20]
 8005d8e:	f10b 0b01 	add.w	fp, fp, #1
 8005d92:	e7b9      	b.n	8005d08 <_printf_float+0x30c>
 8005d94:	ee18 3a10 	vmov	r3, s16
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	d1be      	bne.n	8005d22 <_printf_float+0x326>
 8005da4:	e689      	b.n	8005aba <_printf_float+0xbe>
 8005da6:	9a05      	ldr	r2, [sp, #20]
 8005da8:	464b      	mov	r3, r9
 8005daa:	4442      	add	r2, r8
 8005dac:	4631      	mov	r1, r6
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	d1c1      	bne.n	8005d3a <_printf_float+0x33e>
 8005db6:	e680      	b.n	8005aba <_printf_float+0xbe>
 8005db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dba:	2a01      	cmp	r2, #1
 8005dbc:	dc01      	bgt.n	8005dc2 <_printf_float+0x3c6>
 8005dbe:	07db      	lsls	r3, r3, #31
 8005dc0:	d53a      	bpl.n	8005e38 <_printf_float+0x43c>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae74 	beq.w	8005aba <_printf_float+0xbe>
 8005dd2:	ee18 3a10 	vmov	r3, s16
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f ae6b 	beq.w	8005aba <_printf_float+0xbe>
 8005de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005df0:	f7fa fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df4:	b9d8      	cbnz	r0, 8005e2e <_printf_float+0x432>
 8005df6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005dfa:	f108 0201 	add.w	r2, r8, #1
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	d10e      	bne.n	8005e26 <_printf_float+0x42a>
 8005e08:	e657      	b.n	8005aba <_printf_float+0xbe>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f ae50 	beq.w	8005aba <_printf_float+0xbe>
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	4543      	cmp	r3, r8
 8005e24:	dcf1      	bgt.n	8005e0a <_printf_float+0x40e>
 8005e26:	464b      	mov	r3, r9
 8005e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e2c:	e6da      	b.n	8005be4 <_printf_float+0x1e8>
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	f104 0a1a 	add.w	sl, r4, #26
 8005e36:	e7f2      	b.n	8005e1e <_printf_float+0x422>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	e7df      	b.n	8005dfe <_printf_float+0x402>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	464a      	mov	r2, r9
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f ae36 	beq.w	8005aba <_printf_float+0xbe>
 8005e4e:	f108 0801 	add.w	r8, r8, #1
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	4543      	cmp	r3, r8
 8005e5a:	dcf0      	bgt.n	8005e3e <_printf_float+0x442>
 8005e5c:	e6f8      	b.n	8005c50 <_printf_float+0x254>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	f104 0919 	add.w	r9, r4, #25
 8005e66:	e7f4      	b.n	8005e52 <_printf_float+0x456>

08005e68 <_printf_common>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	4699      	mov	r9, r3
 8005e70:	688a      	ldr	r2, [r1, #8]
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bfb8      	it	lt
 8005e7c:	4613      	movlt	r3, r2
 8005e7e:	6033      	str	r3, [r6, #0]
 8005e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e84:	4607      	mov	r7, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	b10a      	cbz	r2, 8005e8e <_printf_common+0x26>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	0699      	lsls	r1, r3, #26
 8005e92:	bf42      	ittt	mi
 8005e94:	6833      	ldrmi	r3, [r6, #0]
 8005e96:	3302      	addmi	r3, #2
 8005e98:	6033      	strmi	r3, [r6, #0]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	f015 0506 	ands.w	r5, r5, #6
 8005ea0:	d106      	bne.n	8005eb0 <_printf_common+0x48>
 8005ea2:	f104 0a19 	add.w	sl, r4, #25
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	6832      	ldr	r2, [r6, #0]
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dc26      	bgt.n	8005efe <_printf_common+0x96>
 8005eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb4:	1e13      	subs	r3, r2, #0
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	0692      	lsls	r2, r2, #26
 8005ebe:	d42b      	bmi.n	8005f18 <_printf_common+0xb0>
 8005ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d01e      	beq.n	8005f0c <_printf_common+0xa4>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	6922      	ldr	r2, [r4, #16]
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	bf02      	ittt	eq
 8005eda:	68e5      	ldreq	r5, [r4, #12]
 8005edc:	6833      	ldreq	r3, [r6, #0]
 8005ede:	1aed      	subeq	r5, r5, r3
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	bf0c      	ite	eq
 8005ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee8:	2500      	movne	r5, #0
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bfc4      	itt	gt
 8005eee:	1a9b      	subgt	r3, r3, r2
 8005ef0:	18ed      	addgt	r5, r5, r3
 8005ef2:	2600      	movs	r6, #0
 8005ef4:	341a      	adds	r4, #26
 8005ef6:	42b5      	cmp	r5, r6
 8005ef8:	d11a      	bne.n	8005f30 <_printf_common+0xc8>
 8005efa:	2000      	movs	r0, #0
 8005efc:	e008      	b.n	8005f10 <_printf_common+0xa8>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	4649      	mov	r1, r9
 8005f04:	4638      	mov	r0, r7
 8005f06:	47c0      	blx	r8
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d103      	bne.n	8005f14 <_printf_common+0xac>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	3501      	adds	r5, #1
 8005f16:	e7c6      	b.n	8005ea6 <_printf_common+0x3e>
 8005f18:	18e1      	adds	r1, r4, r3
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	2030      	movs	r0, #48	; 0x30
 8005f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f22:	4422      	add	r2, r4
 8005f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	e7c7      	b.n	8005ec0 <_printf_common+0x58>
 8005f30:	2301      	movs	r3, #1
 8005f32:	4622      	mov	r2, r4
 8005f34:	4649      	mov	r1, r9
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c0      	blx	r8
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d0e6      	beq.n	8005f0c <_printf_common+0xa4>
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7d9      	b.n	8005ef6 <_printf_common+0x8e>
	...

08005f44 <_printf_i>:
 8005f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	7e0f      	ldrb	r7, [r1, #24]
 8005f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f4c:	2f78      	cmp	r7, #120	; 0x78
 8005f4e:	4691      	mov	r9, r2
 8005f50:	4680      	mov	r8, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	469a      	mov	sl, r3
 8005f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f5a:	d807      	bhi.n	8005f6c <_printf_i+0x28>
 8005f5c:	2f62      	cmp	r7, #98	; 0x62
 8005f5e:	d80a      	bhi.n	8005f76 <_printf_i+0x32>
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	f000 80d4 	beq.w	800610e <_printf_i+0x1ca>
 8005f66:	2f58      	cmp	r7, #88	; 0x58
 8005f68:	f000 80c0 	beq.w	80060ec <_printf_i+0x1a8>
 8005f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f74:	e03a      	b.n	8005fec <_printf_i+0xa8>
 8005f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f7a:	2b15      	cmp	r3, #21
 8005f7c:	d8f6      	bhi.n	8005f6c <_printf_i+0x28>
 8005f7e:	a101      	add	r1, pc, #4	; (adr r1, 8005f84 <_printf_i+0x40>)
 8005f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	08005ff1 	.word	0x08005ff1
 8005f8c:	08005f6d 	.word	0x08005f6d
 8005f90:	08005f6d 	.word	0x08005f6d
 8005f94:	08005f6d 	.word	0x08005f6d
 8005f98:	08005f6d 	.word	0x08005f6d
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08005f6d 	.word	0x08005f6d
 8005fa4:	08005f6d 	.word	0x08005f6d
 8005fa8:	08005f6d 	.word	0x08005f6d
 8005fac:	08005f6d 	.word	0x08005f6d
 8005fb0:	080060f5 	.word	0x080060f5
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	080060af 	.word	0x080060af
 8005fbc:	08005f6d 	.word	0x08005f6d
 8005fc0:	08005f6d 	.word	0x08005f6d
 8005fc4:	08006117 	.word	0x08006117
 8005fc8:	08005f6d 	.word	0x08005f6d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	08005f6d 	.word	0x08005f6d
 8005fd4:	08005f6d 	.word	0x08005f6d
 8005fd8:	080060b7 	.word	0x080060b7
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	602a      	str	r2, [r5, #0]
 8005fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fec:	2301      	movs	r3, #1
 8005fee:	e09f      	b.n	8006130 <_printf_i+0x1ec>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	0607      	lsls	r7, r0, #24
 8005ff6:	f103 0104 	add.w	r1, r3, #4
 8005ffa:	6029      	str	r1, [r5, #0]
 8005ffc:	d501      	bpl.n	8006002 <_printf_i+0xbe>
 8005ffe:	681e      	ldr	r6, [r3, #0]
 8006000:	e003      	b.n	800600a <_printf_i+0xc6>
 8006002:	0646      	lsls	r6, r0, #25
 8006004:	d5fb      	bpl.n	8005ffe <_printf_i+0xba>
 8006006:	f9b3 6000 	ldrsh.w	r6, [r3]
 800600a:	2e00      	cmp	r6, #0
 800600c:	da03      	bge.n	8006016 <_printf_i+0xd2>
 800600e:	232d      	movs	r3, #45	; 0x2d
 8006010:	4276      	negs	r6, r6
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	485a      	ldr	r0, [pc, #360]	; (8006180 <_printf_i+0x23c>)
 8006018:	230a      	movs	r3, #10
 800601a:	e012      	b.n	8006042 <_printf_i+0xfe>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	1d19      	adds	r1, r3, #4
 8006022:	6029      	str	r1, [r5, #0]
 8006024:	0605      	lsls	r5, r0, #24
 8006026:	d501      	bpl.n	800602c <_printf_i+0xe8>
 8006028:	681e      	ldr	r6, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0xee>
 800602c:	0641      	lsls	r1, r0, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0xe4>
 8006030:	881e      	ldrh	r6, [r3, #0]
 8006032:	4853      	ldr	r0, [pc, #332]	; (8006180 <_printf_i+0x23c>)
 8006034:	2f6f      	cmp	r7, #111	; 0x6f
 8006036:	bf0c      	ite	eq
 8006038:	2308      	moveq	r3, #8
 800603a:	230a      	movne	r3, #10
 800603c:	2100      	movs	r1, #0
 800603e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006042:	6865      	ldr	r5, [r4, #4]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	2d00      	cmp	r5, #0
 8006048:	bfa2      	ittt	ge
 800604a:	6821      	ldrge	r1, [r4, #0]
 800604c:	f021 0104 	bicge.w	r1, r1, #4
 8006050:	6021      	strge	r1, [r4, #0]
 8006052:	b90e      	cbnz	r6, 8006058 <_printf_i+0x114>
 8006054:	2d00      	cmp	r5, #0
 8006056:	d04b      	beq.n	80060f0 <_printf_i+0x1ac>
 8006058:	4615      	mov	r5, r2
 800605a:	fbb6 f1f3 	udiv	r1, r6, r3
 800605e:	fb03 6711 	mls	r7, r3, r1, r6
 8006062:	5dc7      	ldrb	r7, [r0, r7]
 8006064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006068:	4637      	mov	r7, r6
 800606a:	42bb      	cmp	r3, r7
 800606c:	460e      	mov	r6, r1
 800606e:	d9f4      	bls.n	800605a <_printf_i+0x116>
 8006070:	2b08      	cmp	r3, #8
 8006072:	d10b      	bne.n	800608c <_printf_i+0x148>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	07de      	lsls	r6, r3, #31
 8006078:	d508      	bpl.n	800608c <_printf_i+0x148>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	4299      	cmp	r1, r3
 8006080:	bfde      	ittt	le
 8006082:	2330      	movle	r3, #48	; 0x30
 8006084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800608c:	1b52      	subs	r2, r2, r5
 800608e:	6122      	str	r2, [r4, #16]
 8006090:	f8cd a000 	str.w	sl, [sp]
 8006094:	464b      	mov	r3, r9
 8006096:	aa03      	add	r2, sp, #12
 8006098:	4621      	mov	r1, r4
 800609a:	4640      	mov	r0, r8
 800609c:	f7ff fee4 	bl	8005e68 <_printf_common>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d14a      	bne.n	800613a <_printf_i+0x1f6>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	b004      	add	sp, #16
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f043 0320 	orr.w	r3, r3, #32
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	4833      	ldr	r0, [pc, #204]	; (8006184 <_printf_i+0x240>)
 80060b8:	2778      	movs	r7, #120	; 0x78
 80060ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6829      	ldr	r1, [r5, #0]
 80060c2:	061f      	lsls	r7, r3, #24
 80060c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060c8:	d402      	bmi.n	80060d0 <_printf_i+0x18c>
 80060ca:	065f      	lsls	r7, r3, #25
 80060cc:	bf48      	it	mi
 80060ce:	b2b6      	uxthmi	r6, r6
 80060d0:	07df      	lsls	r7, r3, #31
 80060d2:	bf48      	it	mi
 80060d4:	f043 0320 	orrmi.w	r3, r3, #32
 80060d8:	6029      	str	r1, [r5, #0]
 80060da:	bf48      	it	mi
 80060dc:	6023      	strmi	r3, [r4, #0]
 80060de:	b91e      	cbnz	r6, 80060e8 <_printf_i+0x1a4>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	2310      	movs	r3, #16
 80060ea:	e7a7      	b.n	800603c <_printf_i+0xf8>
 80060ec:	4824      	ldr	r0, [pc, #144]	; (8006180 <_printf_i+0x23c>)
 80060ee:	e7e4      	b.n	80060ba <_printf_i+0x176>
 80060f0:	4615      	mov	r5, r2
 80060f2:	e7bd      	b.n	8006070 <_printf_i+0x12c>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6826      	ldr	r6, [r4, #0]
 80060f8:	6961      	ldr	r1, [r4, #20]
 80060fa:	1d18      	adds	r0, r3, #4
 80060fc:	6028      	str	r0, [r5, #0]
 80060fe:	0635      	lsls	r5, r6, #24
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	d501      	bpl.n	8006108 <_printf_i+0x1c4>
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0x1ca>
 8006108:	0670      	lsls	r0, r6, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0x1c0>
 800610c:	8019      	strh	r1, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	4615      	mov	r5, r2
 8006114:	e7bc      	b.n	8006090 <_printf_i+0x14c>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	2100      	movs	r1, #0
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa f854 	bl	80001d0 <memchr>
 8006128:	b108      	cbz	r0, 800612e <_printf_i+0x1ea>
 800612a:	1b40      	subs	r0, r0, r5
 800612c:	6060      	str	r0, [r4, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	e7aa      	b.n	8006090 <_printf_i+0x14c>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	462a      	mov	r2, r5
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d0ad      	beq.n	80060a4 <_printf_i+0x160>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	079b      	lsls	r3, r3, #30
 800614c:	d413      	bmi.n	8006176 <_printf_i+0x232>
 800614e:	68e0      	ldr	r0, [r4, #12]
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	4298      	cmp	r0, r3
 8006154:	bfb8      	it	lt
 8006156:	4618      	movlt	r0, r3
 8006158:	e7a6      	b.n	80060a8 <_printf_i+0x164>
 800615a:	2301      	movs	r3, #1
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d09d      	beq.n	80060a4 <_printf_i+0x160>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcf2      	bgt.n	800615a <_printf_i+0x216>
 8006174:	e7eb      	b.n	800614e <_printf_i+0x20a>
 8006176:	2500      	movs	r5, #0
 8006178:	f104 0619 	add.w	r6, r4, #25
 800617c:	e7f5      	b.n	800616a <_printf_i+0x226>
 800617e:	bf00      	nop
 8006180:	0800a3e9 	.word	0x0800a3e9
 8006184:	0800a3fa 	.word	0x0800a3fa

08006188 <_scanf_float>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b087      	sub	sp, #28
 800618e:	4617      	mov	r7, r2
 8006190:	9303      	str	r3, [sp, #12]
 8006192:	688b      	ldr	r3, [r1, #8]
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800619a:	bf83      	ittte	hi
 800619c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061a0:	195b      	addhi	r3, r3, r5
 80061a2:	9302      	strhi	r3, [sp, #8]
 80061a4:	2300      	movls	r3, #0
 80061a6:	bf86      	itte	hi
 80061a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061ac:	608b      	strhi	r3, [r1, #8]
 80061ae:	9302      	strls	r3, [sp, #8]
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	468b      	mov	fp, r1
 80061b4:	2500      	movs	r5, #0
 80061b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80061be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061c2:	4680      	mov	r8, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	465e      	mov	r6, fp
 80061c8:	46aa      	mov	sl, r5
 80061ca:	46a9      	mov	r9, r5
 80061cc:	9501      	str	r5, [sp, #4]
 80061ce:	68a2      	ldr	r2, [r4, #8]
 80061d0:	b152      	cbz	r2, 80061e8 <_scanf_float+0x60>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b4e      	cmp	r3, #78	; 0x4e
 80061d8:	d864      	bhi.n	80062a4 <_scanf_float+0x11c>
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d83c      	bhi.n	8006258 <_scanf_float+0xd0>
 80061de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061e2:	b2c8      	uxtb	r0, r1
 80061e4:	280e      	cmp	r0, #14
 80061e6:	d93a      	bls.n	800625e <_scanf_float+0xd6>
 80061e8:	f1b9 0f00 	cmp.w	r9, #0
 80061ec:	d003      	beq.n	80061f6 <_scanf_float+0x6e>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fa:	f1ba 0f01 	cmp.w	sl, #1
 80061fe:	f200 8113 	bhi.w	8006428 <_scanf_float+0x2a0>
 8006202:	455e      	cmp	r6, fp
 8006204:	f200 8105 	bhi.w	8006412 <_scanf_float+0x28a>
 8006208:	2501      	movs	r5, #1
 800620a:	4628      	mov	r0, r5
 800620c:	b007      	add	sp, #28
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006216:	2a0d      	cmp	r2, #13
 8006218:	d8e6      	bhi.n	80061e8 <_scanf_float+0x60>
 800621a:	a101      	add	r1, pc, #4	; (adr r1, 8006220 <_scanf_float+0x98>)
 800621c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006220:	0800635f 	.word	0x0800635f
 8006224:	080061e9 	.word	0x080061e9
 8006228:	080061e9 	.word	0x080061e9
 800622c:	080061e9 	.word	0x080061e9
 8006230:	080063bf 	.word	0x080063bf
 8006234:	08006397 	.word	0x08006397
 8006238:	080061e9 	.word	0x080061e9
 800623c:	080061e9 	.word	0x080061e9
 8006240:	0800636d 	.word	0x0800636d
 8006244:	080061e9 	.word	0x080061e9
 8006248:	080061e9 	.word	0x080061e9
 800624c:	080061e9 	.word	0x080061e9
 8006250:	080061e9 	.word	0x080061e9
 8006254:	08006325 	.word	0x08006325
 8006258:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800625c:	e7db      	b.n	8006216 <_scanf_float+0x8e>
 800625e:	290e      	cmp	r1, #14
 8006260:	d8c2      	bhi.n	80061e8 <_scanf_float+0x60>
 8006262:	a001      	add	r0, pc, #4	; (adr r0, 8006268 <_scanf_float+0xe0>)
 8006264:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006268:	08006317 	.word	0x08006317
 800626c:	080061e9 	.word	0x080061e9
 8006270:	08006317 	.word	0x08006317
 8006274:	080063ab 	.word	0x080063ab
 8006278:	080061e9 	.word	0x080061e9
 800627c:	080062c5 	.word	0x080062c5
 8006280:	08006301 	.word	0x08006301
 8006284:	08006301 	.word	0x08006301
 8006288:	08006301 	.word	0x08006301
 800628c:	08006301 	.word	0x08006301
 8006290:	08006301 	.word	0x08006301
 8006294:	08006301 	.word	0x08006301
 8006298:	08006301 	.word	0x08006301
 800629c:	08006301 	.word	0x08006301
 80062a0:	08006301 	.word	0x08006301
 80062a4:	2b6e      	cmp	r3, #110	; 0x6e
 80062a6:	d809      	bhi.n	80062bc <_scanf_float+0x134>
 80062a8:	2b60      	cmp	r3, #96	; 0x60
 80062aa:	d8b2      	bhi.n	8006212 <_scanf_float+0x8a>
 80062ac:	2b54      	cmp	r3, #84	; 0x54
 80062ae:	d077      	beq.n	80063a0 <_scanf_float+0x218>
 80062b0:	2b59      	cmp	r3, #89	; 0x59
 80062b2:	d199      	bne.n	80061e8 <_scanf_float+0x60>
 80062b4:	2d07      	cmp	r5, #7
 80062b6:	d197      	bne.n	80061e8 <_scanf_float+0x60>
 80062b8:	2508      	movs	r5, #8
 80062ba:	e029      	b.n	8006310 <_scanf_float+0x188>
 80062bc:	2b74      	cmp	r3, #116	; 0x74
 80062be:	d06f      	beq.n	80063a0 <_scanf_float+0x218>
 80062c0:	2b79      	cmp	r3, #121	; 0x79
 80062c2:	e7f6      	b.n	80062b2 <_scanf_float+0x12a>
 80062c4:	6821      	ldr	r1, [r4, #0]
 80062c6:	05c8      	lsls	r0, r1, #23
 80062c8:	d51a      	bpl.n	8006300 <_scanf_float+0x178>
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062d0:	6021      	str	r1, [r4, #0]
 80062d2:	f109 0901 	add.w	r9, r9, #1
 80062d6:	b11b      	cbz	r3, 80062e0 <_scanf_float+0x158>
 80062d8:	3b01      	subs	r3, #1
 80062da:	3201      	adds	r2, #1
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	60a2      	str	r2, [r4, #8]
 80062e0:	68a3      	ldr	r3, [r4, #8]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	3301      	adds	r3, #1
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	f340 8084 	ble.w	8006400 <_scanf_float+0x278>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	e766      	b.n	80061ce <_scanf_float+0x46>
 8006300:	eb1a 0f05 	cmn.w	sl, r5
 8006304:	f47f af70 	bne.w	80061e8 <_scanf_float+0x60>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	f806 3b01 	strb.w	r3, [r6], #1
 8006314:	e7e4      	b.n	80062e0 <_scanf_float+0x158>
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	0610      	lsls	r0, r2, #24
 800631a:	f57f af65 	bpl.w	80061e8 <_scanf_float+0x60>
 800631e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006322:	e7f4      	b.n	800630e <_scanf_float+0x186>
 8006324:	f1ba 0f00 	cmp.w	sl, #0
 8006328:	d10e      	bne.n	8006348 <_scanf_float+0x1c0>
 800632a:	f1b9 0f00 	cmp.w	r9, #0
 800632e:	d10e      	bne.n	800634e <_scanf_float+0x1c6>
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006336:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800633a:	d108      	bne.n	800634e <_scanf_float+0x1c6>
 800633c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006340:	6022      	str	r2, [r4, #0]
 8006342:	f04f 0a01 	mov.w	sl, #1
 8006346:	e7e3      	b.n	8006310 <_scanf_float+0x188>
 8006348:	f1ba 0f02 	cmp.w	sl, #2
 800634c:	d055      	beq.n	80063fa <_scanf_float+0x272>
 800634e:	2d01      	cmp	r5, #1
 8006350:	d002      	beq.n	8006358 <_scanf_float+0x1d0>
 8006352:	2d04      	cmp	r5, #4
 8006354:	f47f af48 	bne.w	80061e8 <_scanf_float+0x60>
 8006358:	3501      	adds	r5, #1
 800635a:	b2ed      	uxtb	r5, r5
 800635c:	e7d8      	b.n	8006310 <_scanf_float+0x188>
 800635e:	f1ba 0f01 	cmp.w	sl, #1
 8006362:	f47f af41 	bne.w	80061e8 <_scanf_float+0x60>
 8006366:	f04f 0a02 	mov.w	sl, #2
 800636a:	e7d1      	b.n	8006310 <_scanf_float+0x188>
 800636c:	b97d      	cbnz	r5, 800638e <_scanf_float+0x206>
 800636e:	f1b9 0f00 	cmp.w	r9, #0
 8006372:	f47f af3c 	bne.w	80061ee <_scanf_float+0x66>
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800637c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006380:	f47f af39 	bne.w	80061f6 <_scanf_float+0x6e>
 8006384:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	2501      	movs	r5, #1
 800638c:	e7c0      	b.n	8006310 <_scanf_float+0x188>
 800638e:	2d03      	cmp	r5, #3
 8006390:	d0e2      	beq.n	8006358 <_scanf_float+0x1d0>
 8006392:	2d05      	cmp	r5, #5
 8006394:	e7de      	b.n	8006354 <_scanf_float+0x1cc>
 8006396:	2d02      	cmp	r5, #2
 8006398:	f47f af26 	bne.w	80061e8 <_scanf_float+0x60>
 800639c:	2503      	movs	r5, #3
 800639e:	e7b7      	b.n	8006310 <_scanf_float+0x188>
 80063a0:	2d06      	cmp	r5, #6
 80063a2:	f47f af21 	bne.w	80061e8 <_scanf_float+0x60>
 80063a6:	2507      	movs	r5, #7
 80063a8:	e7b2      	b.n	8006310 <_scanf_float+0x188>
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	0591      	lsls	r1, r2, #22
 80063ae:	f57f af1b 	bpl.w	80061e8 <_scanf_float+0x60>
 80063b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063b6:	6022      	str	r2, [r4, #0]
 80063b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80063bc:	e7a8      	b.n	8006310 <_scanf_float+0x188>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063c8:	d006      	beq.n	80063d8 <_scanf_float+0x250>
 80063ca:	0550      	lsls	r0, r2, #21
 80063cc:	f57f af0c 	bpl.w	80061e8 <_scanf_float+0x60>
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	f43f af0f 	beq.w	80061f6 <_scanf_float+0x6e>
 80063d8:	0591      	lsls	r1, r2, #22
 80063da:	bf58      	it	pl
 80063dc:	9901      	ldrpl	r1, [sp, #4]
 80063de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063e2:	bf58      	it	pl
 80063e4:	eba9 0101 	subpl.w	r1, r9, r1
 80063e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063ec:	bf58      	it	pl
 80063ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063f2:	6022      	str	r2, [r4, #0]
 80063f4:	f04f 0900 	mov.w	r9, #0
 80063f8:	e78a      	b.n	8006310 <_scanf_float+0x188>
 80063fa:	f04f 0a03 	mov.w	sl, #3
 80063fe:	e787      	b.n	8006310 <_scanf_float+0x188>
 8006400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006404:	4639      	mov	r1, r7
 8006406:	4640      	mov	r0, r8
 8006408:	4798      	blx	r3
 800640a:	2800      	cmp	r0, #0
 800640c:	f43f aedf 	beq.w	80061ce <_scanf_float+0x46>
 8006410:	e6ea      	b.n	80061e8 <_scanf_float+0x60>
 8006412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800641a:	463a      	mov	r2, r7
 800641c:	4640      	mov	r0, r8
 800641e:	4798      	blx	r3
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	e6ec      	b.n	8006202 <_scanf_float+0x7a>
 8006428:	1e6b      	subs	r3, r5, #1
 800642a:	2b06      	cmp	r3, #6
 800642c:	d825      	bhi.n	800647a <_scanf_float+0x2f2>
 800642e:	2d02      	cmp	r5, #2
 8006430:	d836      	bhi.n	80064a0 <_scanf_float+0x318>
 8006432:	455e      	cmp	r6, fp
 8006434:	f67f aee8 	bls.w	8006208 <_scanf_float+0x80>
 8006438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800643c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006440:	463a      	mov	r2, r7
 8006442:	4640      	mov	r0, r8
 8006444:	4798      	blx	r3
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	3b01      	subs	r3, #1
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	e7f1      	b.n	8006432 <_scanf_float+0x2aa>
 800644e:	9802      	ldr	r0, [sp, #8]
 8006450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006454:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006458:	9002      	str	r0, [sp, #8]
 800645a:	463a      	mov	r2, r7
 800645c:	4640      	mov	r0, r8
 800645e:	4798      	blx	r3
 8006460:	6923      	ldr	r3, [r4, #16]
 8006462:	3b01      	subs	r3, #1
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	f10a 3aff 	add.w	sl, sl, #4294967295
 800646a:	fa5f fa8a 	uxtb.w	sl, sl
 800646e:	f1ba 0f02 	cmp.w	sl, #2
 8006472:	d1ec      	bne.n	800644e <_scanf_float+0x2c6>
 8006474:	3d03      	subs	r5, #3
 8006476:	b2ed      	uxtb	r5, r5
 8006478:	1b76      	subs	r6, r6, r5
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	05da      	lsls	r2, r3, #23
 800647e:	d52f      	bpl.n	80064e0 <_scanf_float+0x358>
 8006480:	055b      	lsls	r3, r3, #21
 8006482:	d510      	bpl.n	80064a6 <_scanf_float+0x31e>
 8006484:	455e      	cmp	r6, fp
 8006486:	f67f aebf 	bls.w	8006208 <_scanf_float+0x80>
 800648a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800648e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006492:	463a      	mov	r2, r7
 8006494:	4640      	mov	r0, r8
 8006496:	4798      	blx	r3
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	3b01      	subs	r3, #1
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	e7f1      	b.n	8006484 <_scanf_float+0x2fc>
 80064a0:	46aa      	mov	sl, r5
 80064a2:	9602      	str	r6, [sp, #8]
 80064a4:	e7df      	b.n	8006466 <_scanf_float+0x2de>
 80064a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	2965      	cmp	r1, #101	; 0x65
 80064ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80064b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	d00c      	beq.n	80064d4 <_scanf_float+0x34c>
 80064ba:	2945      	cmp	r1, #69	; 0x45
 80064bc:	d00a      	beq.n	80064d4 <_scanf_float+0x34c>
 80064be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064c2:	463a      	mov	r2, r7
 80064c4:	4640      	mov	r0, r8
 80064c6:	4798      	blx	r3
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	1eb5      	subs	r5, r6, #2
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064d8:	463a      	mov	r2, r7
 80064da:	4640      	mov	r0, r8
 80064dc:	4798      	blx	r3
 80064de:	462e      	mov	r6, r5
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	f015 0510 	ands.w	r5, r5, #16
 80064e6:	d158      	bne.n	800659a <_scanf_float+0x412>
 80064e8:	7035      	strb	r5, [r6, #0]
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f4:	d11c      	bne.n	8006530 <_scanf_float+0x3a8>
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	454b      	cmp	r3, r9
 80064fa:	eba3 0209 	sub.w	r2, r3, r9
 80064fe:	d124      	bne.n	800654a <_scanf_float+0x3c2>
 8006500:	2200      	movs	r2, #0
 8006502:	4659      	mov	r1, fp
 8006504:	4640      	mov	r0, r8
 8006506:	f002 fc43 	bl	8008d90 <_strtod_r>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	6821      	ldr	r1, [r4, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f011 0f02 	tst.w	r1, #2
 8006514:	ec57 6b10 	vmov	r6, r7, d0
 8006518:	f103 0204 	add.w	r2, r3, #4
 800651c:	d020      	beq.n	8006560 <_scanf_float+0x3d8>
 800651e:	9903      	ldr	r1, [sp, #12]
 8006520:	600a      	str	r2, [r1, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	e9c3 6700 	strd	r6, r7, [r3]
 8006528:	68e3      	ldr	r3, [r4, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60e3      	str	r3, [r4, #12]
 800652e:	e66c      	b.n	800620a <_scanf_float+0x82>
 8006530:	9b04      	ldr	r3, [sp, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0e4      	beq.n	8006500 <_scanf_float+0x378>
 8006536:	9905      	ldr	r1, [sp, #20]
 8006538:	230a      	movs	r3, #10
 800653a:	462a      	mov	r2, r5
 800653c:	3101      	adds	r1, #1
 800653e:	4640      	mov	r0, r8
 8006540:	f002 fcae 	bl	8008ea0 <_strtol_r>
 8006544:	9b04      	ldr	r3, [sp, #16]
 8006546:	9e05      	ldr	r6, [sp, #20]
 8006548:	1ac2      	subs	r2, r0, r3
 800654a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800654e:	429e      	cmp	r6, r3
 8006550:	bf28      	it	cs
 8006552:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006556:	4912      	ldr	r1, [pc, #72]	; (80065a0 <_scanf_float+0x418>)
 8006558:	4630      	mov	r0, r6
 800655a:	f000 f8f9 	bl	8006750 <siprintf>
 800655e:	e7cf      	b.n	8006500 <_scanf_float+0x378>
 8006560:	f011 0f04 	tst.w	r1, #4
 8006564:	9903      	ldr	r1, [sp, #12]
 8006566:	600a      	str	r2, [r1, #0]
 8006568:	d1db      	bne.n	8006522 <_scanf_float+0x39a>
 800656a:	f8d3 8000 	ldr.w	r8, [r3]
 800656e:	ee10 2a10 	vmov	r2, s0
 8006572:	ee10 0a10 	vmov	r0, s0
 8006576:	463b      	mov	r3, r7
 8006578:	4639      	mov	r1, r7
 800657a:	f7fa fad7 	bl	8000b2c <__aeabi_dcmpun>
 800657e:	b128      	cbz	r0, 800658c <_scanf_float+0x404>
 8006580:	4808      	ldr	r0, [pc, #32]	; (80065a4 <_scanf_float+0x41c>)
 8006582:	f000 f9c9 	bl	8006918 <nanf>
 8006586:	ed88 0a00 	vstr	s0, [r8]
 800658a:	e7cd      	b.n	8006528 <_scanf_float+0x3a0>
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7fa fb2a 	bl	8000be8 <__aeabi_d2f>
 8006594:	f8c8 0000 	str.w	r0, [r8]
 8006598:	e7c6      	b.n	8006528 <_scanf_float+0x3a0>
 800659a:	2500      	movs	r5, #0
 800659c:	e635      	b.n	800620a <_scanf_float+0x82>
 800659e:	bf00      	nop
 80065a0:	0800a40b 	.word	0x0800a40b
 80065a4:	0800a79d 	.word	0x0800a79d

080065a8 <std>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b510      	push	{r4, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	e9c0 3300 	strd	r3, r3, [r0]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	; 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6183      	str	r3, [r0, #24]
 80065c0:	4619      	mov	r1, r3
 80065c2:	2208      	movs	r2, #8
 80065c4:	305c      	adds	r0, #92	; 0x5c
 80065c6:	f000 f926 	bl	8006816 <memset>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <std+0x58>)
 80065cc:	6263      	str	r3, [r4, #36]	; 0x24
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <std+0x5c>)
 80065d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <std+0x60>)
 80065d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <std+0x64>)
 80065d8:	6323      	str	r3, [r4, #48]	; 0x30
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <std+0x68>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	429c      	cmp	r4, r3
 80065e0:	d006      	beq.n	80065f0 <std+0x48>
 80065e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065e6:	4294      	cmp	r4, r2
 80065e8:	d002      	beq.n	80065f0 <std+0x48>
 80065ea:	33d0      	adds	r3, #208	; 0xd0
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d105      	bne.n	80065fc <std+0x54>
 80065f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	f000 b98a 	b.w	8006910 <__retarget_lock_init_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	08006791 	.word	0x08006791
 8006604:	080067b3 	.word	0x080067b3
 8006608:	080067eb 	.word	0x080067eb
 800660c:	0800680f 	.word	0x0800680f
 8006610:	200004e8 	.word	0x200004e8

08006614 <stdio_exit_handler>:
 8006614:	4a02      	ldr	r2, [pc, #8]	; (8006620 <stdio_exit_handler+0xc>)
 8006616:	4903      	ldr	r1, [pc, #12]	; (8006624 <stdio_exit_handler+0x10>)
 8006618:	4803      	ldr	r0, [pc, #12]	; (8006628 <stdio_exit_handler+0x14>)
 800661a:	f000 b869 	b.w	80066f0 <_fwalk_sglue>
 800661e:	bf00      	nop
 8006620:	20000048 	.word	0x20000048
 8006624:	080094e9 	.word	0x080094e9
 8006628:	20000054 	.word	0x20000054

0800662c <cleanup_stdio>:
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <cleanup_stdio+0x34>)
 8006630:	4299      	cmp	r1, r3
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	d001      	beq.n	800663c <cleanup_stdio+0x10>
 8006638:	f002 ff56 	bl	80094e8 <_fflush_r>
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <cleanup_stdio+0x38>)
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <cleanup_stdio+0x1e>
 8006644:	4620      	mov	r0, r4
 8006646:	f002 ff4f 	bl	80094e8 <_fflush_r>
 800664a:	68e1      	ldr	r1, [r4, #12]
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <cleanup_stdio+0x3c>)
 800664e:	4299      	cmp	r1, r3
 8006650:	d004      	beq.n	800665c <cleanup_stdio+0x30>
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f002 bf46 	b.w	80094e8 <_fflush_r>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	200004e8 	.word	0x200004e8
 8006664:	20000550 	.word	0x20000550
 8006668:	200005b8 	.word	0x200005b8

0800666c <global_stdio_init.part.0>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <global_stdio_init.part.0+0x30>)
 8006670:	4c0b      	ldr	r4, [pc, #44]	; (80066a0 <global_stdio_init.part.0+0x34>)
 8006672:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <global_stdio_init.part.0+0x38>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	2200      	movs	r2, #0
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ff94 	bl	80065a8 <std>
 8006680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006684:	2201      	movs	r2, #1
 8006686:	2109      	movs	r1, #9
 8006688:	f7ff ff8e 	bl	80065a8 <std>
 800668c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006690:	2202      	movs	r2, #2
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	2112      	movs	r1, #18
 8006698:	f7ff bf86 	b.w	80065a8 <std>
 800669c:	20000620 	.word	0x20000620
 80066a0:	200004e8 	.word	0x200004e8
 80066a4:	08006615 	.word	0x08006615

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 b932 	b.w	8006912 <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000629 	.word	0x20000629

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b92d 	b.w	8006914 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000629 	.word	0x20000629

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sfp_lock_release>
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <__sinit+0xc>
 80066e0:	f7ff ffc4 	bl	800666c <global_stdio_init.part.0>
 80066e4:	e7f2      	b.n	80066cc <__sinit+0xc>
 80066e6:	bf00      	nop
 80066e8:	0800662d 	.word	0x0800662d
 80066ec:	20000620 	.word	0x20000620

080066f0 <_fwalk_sglue>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	2600      	movs	r6, #0
 80066fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006700:	f1b9 0901 	subs.w	r9, r9, #1
 8006704:	d505      	bpl.n	8006712 <_fwalk_sglue+0x22>
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d1f7      	bne.n	80066fc <_fwalk_sglue+0xc>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d907      	bls.n	8006728 <_fwalk_sglue+0x38>
 8006718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671c:	3301      	adds	r3, #1
 800671e:	d003      	beq.n	8006728 <_fwalk_sglue+0x38>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	4306      	orrs	r6, r0
 8006728:	3568      	adds	r5, #104	; 0x68
 800672a:	e7e9      	b.n	8006700 <_fwalk_sglue+0x10>

0800672c <iprintf>:
 800672c:	b40f      	push	{r0, r1, r2, r3}
 800672e:	b507      	push	{r0, r1, r2, lr}
 8006730:	4906      	ldr	r1, [pc, #24]	; (800674c <iprintf+0x20>)
 8006732:	ab04      	add	r3, sp, #16
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	f853 2b04 	ldr.w	r2, [r3], #4
 800673a:	6881      	ldr	r1, [r0, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	f002 fd33 	bl	80091a8 <_vfiprintf_r>
 8006742:	b003      	add	sp, #12
 8006744:	f85d eb04 	ldr.w	lr, [sp], #4
 8006748:	b004      	add	sp, #16
 800674a:	4770      	bx	lr
 800674c:	200000a0 	.word	0x200000a0

08006750 <siprintf>:
 8006750:	b40e      	push	{r1, r2, r3}
 8006752:	b500      	push	{lr}
 8006754:	b09c      	sub	sp, #112	; 0x70
 8006756:	ab1d      	add	r3, sp, #116	; 0x74
 8006758:	9002      	str	r0, [sp, #8]
 800675a:	9006      	str	r0, [sp, #24]
 800675c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006760:	4809      	ldr	r0, [pc, #36]	; (8006788 <siprintf+0x38>)
 8006762:	9107      	str	r1, [sp, #28]
 8006764:	9104      	str	r1, [sp, #16]
 8006766:	4909      	ldr	r1, [pc, #36]	; (800678c <siprintf+0x3c>)
 8006768:	f853 2b04 	ldr.w	r2, [r3], #4
 800676c:	9105      	str	r1, [sp, #20]
 800676e:	6800      	ldr	r0, [r0, #0]
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	a902      	add	r1, sp, #8
 8006774:	f002 fbf0 	bl	8008f58 <_svfiprintf_r>
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	b01c      	add	sp, #112	; 0x70
 8006780:	f85d eb04 	ldr.w	lr, [sp], #4
 8006784:	b003      	add	sp, #12
 8006786:	4770      	bx	lr
 8006788:	200000a0 	.word	0x200000a0
 800678c:	ffff0208 	.word	0xffff0208

08006790 <__sread>:
 8006790:	b510      	push	{r4, lr}
 8006792:	460c      	mov	r4, r1
 8006794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006798:	f000 f86c 	bl	8006874 <_read_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	bfab      	itete	ge
 80067a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067a2:	89a3      	ldrhlt	r3, [r4, #12]
 80067a4:	181b      	addge	r3, r3, r0
 80067a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067aa:	bfac      	ite	ge
 80067ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ae:	81a3      	strhlt	r3, [r4, #12]
 80067b0:	bd10      	pop	{r4, pc}

080067b2 <__swrite>:
 80067b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b6:	461f      	mov	r7, r3
 80067b8:	898b      	ldrh	r3, [r1, #12]
 80067ba:	05db      	lsls	r3, r3, #23
 80067bc:	4605      	mov	r5, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	4616      	mov	r6, r2
 80067c2:	d505      	bpl.n	80067d0 <__swrite+0x1e>
 80067c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c8:	2302      	movs	r3, #2
 80067ca:	2200      	movs	r2, #0
 80067cc:	f000 f840 	bl	8006850 <_lseek_r>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	4632      	mov	r2, r6
 80067de:	463b      	mov	r3, r7
 80067e0:	4628      	mov	r0, r5
 80067e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067e6:	f000 b857 	b.w	8006898 <_write_r>

080067ea <__sseek>:
 80067ea:	b510      	push	{r4, lr}
 80067ec:	460c      	mov	r4, r1
 80067ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f2:	f000 f82d 	bl	8006850 <_lseek_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	bf15      	itete	ne
 80067fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80067fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006806:	81a3      	strheq	r3, [r4, #12]
 8006808:	bf18      	it	ne
 800680a:	81a3      	strhne	r3, [r4, #12]
 800680c:	bd10      	pop	{r4, pc}

0800680e <__sclose>:
 800680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006812:	f000 b80d 	b.w	8006830 <_close_r>

08006816 <memset>:
 8006816:	4402      	add	r2, r0
 8006818:	4603      	mov	r3, r0
 800681a:	4293      	cmp	r3, r2
 800681c:	d100      	bne.n	8006820 <memset+0xa>
 800681e:	4770      	bx	lr
 8006820:	f803 1b01 	strb.w	r1, [r3], #1
 8006824:	e7f9      	b.n	800681a <memset+0x4>
	...

08006828 <_localeconv_r>:
 8006828:	4800      	ldr	r0, [pc, #0]	; (800682c <_localeconv_r+0x4>)
 800682a:	4770      	bx	lr
 800682c:	20000194 	.word	0x20000194

08006830 <_close_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d06      	ldr	r5, [pc, #24]	; (800684c <_close_r+0x1c>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fb ff1a 	bl	8002674 <_close>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_close_r+0x1a>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_close_r+0x1a>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20000624 	.word	0x20000624

08006850 <_lseek_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d07      	ldr	r5, [pc, #28]	; (8006870 <_lseek_r+0x20>)
 8006854:	4604      	mov	r4, r0
 8006856:	4608      	mov	r0, r1
 8006858:	4611      	mov	r1, r2
 800685a:	2200      	movs	r2, #0
 800685c:	602a      	str	r2, [r5, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	f7fb ff12 	bl	8002688 <_lseek>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_lseek_r+0x1e>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_lseek_r+0x1e>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20000624 	.word	0x20000624

08006874 <_read_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	; (8006894 <_read_r+0x20>)
 8006878:	4604      	mov	r4, r0
 800687a:	4608      	mov	r0, r1
 800687c:	4611      	mov	r1, r2
 800687e:	2200      	movs	r2, #0
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fb fedc 	bl	8002640 <_read>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_read_r+0x1e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_read_r+0x1e>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000624 	.word	0x20000624

08006898 <_write_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d07      	ldr	r5, [pc, #28]	; (80068b8 <_write_r+0x20>)
 800689c:	4604      	mov	r4, r0
 800689e:	4608      	mov	r0, r1
 80068a0:	4611      	mov	r1, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fb fed7 	bl	800265a <_write>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_write_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_write_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000624 	.word	0x20000624

080068bc <__errno>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <__errno+0x8>)
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	200000a0 	.word	0x200000a0

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4d0d      	ldr	r5, [pc, #52]	; (8006900 <__libc_init_array+0x38>)
 80068cc:	4c0d      	ldr	r4, [pc, #52]	; (8006904 <__libc_init_array+0x3c>)
 80068ce:	1b64      	subs	r4, r4, r5
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	2600      	movs	r6, #0
 80068d4:	42a6      	cmp	r6, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	4d0b      	ldr	r5, [pc, #44]	; (8006908 <__libc_init_array+0x40>)
 80068da:	4c0c      	ldr	r4, [pc, #48]	; (800690c <__libc_init_array+0x44>)
 80068dc:	f003 fbd8 	bl	800a090 <_init>
 80068e0:	1b64      	subs	r4, r4, r5
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	2600      	movs	r6, #0
 80068e6:	42a6      	cmp	r6, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f0:	4798      	blx	r3
 80068f2:	3601      	adds	r6, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fa:	4798      	blx	r3
 80068fc:	3601      	adds	r6, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	0800a808 	.word	0x0800a808
 8006904:	0800a808 	.word	0x0800a808
 8006908:	0800a808 	.word	0x0800a808
 800690c:	0800a80c 	.word	0x0800a80c

08006910 <__retarget_lock_init_recursive>:
 8006910:	4770      	bx	lr

08006912 <__retarget_lock_acquire_recursive>:
 8006912:	4770      	bx	lr

08006914 <__retarget_lock_release_recursive>:
 8006914:	4770      	bx	lr
	...

08006918 <nanf>:
 8006918:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006920 <nanf+0x8>
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	7fc00000 	.word	0x7fc00000

08006924 <quorem>:
 8006924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	6903      	ldr	r3, [r0, #16]
 800692a:	690c      	ldr	r4, [r1, #16]
 800692c:	42a3      	cmp	r3, r4
 800692e:	4607      	mov	r7, r0
 8006930:	db7e      	blt.n	8006a30 <quorem+0x10c>
 8006932:	3c01      	subs	r4, #1
 8006934:	f101 0814 	add.w	r8, r1, #20
 8006938:	f100 0514 	add.w	r5, r0, #20
 800693c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694a:	3301      	adds	r3, #1
 800694c:	429a      	cmp	r2, r3
 800694e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006952:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006956:	fbb2 f6f3 	udiv	r6, r2, r3
 800695a:	d331      	bcc.n	80069c0 <quorem+0x9c>
 800695c:	f04f 0e00 	mov.w	lr, #0
 8006960:	4640      	mov	r0, r8
 8006962:	46ac      	mov	ip, r5
 8006964:	46f2      	mov	sl, lr
 8006966:	f850 2b04 	ldr.w	r2, [r0], #4
 800696a:	b293      	uxth	r3, r2
 800696c:	fb06 e303 	mla	r3, r6, r3, lr
 8006970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006974:	0c1a      	lsrs	r2, r3, #16
 8006976:	b29b      	uxth	r3, r3
 8006978:	ebaa 0303 	sub.w	r3, sl, r3
 800697c:	f8dc a000 	ldr.w	sl, [ip]
 8006980:	fa13 f38a 	uxtah	r3, r3, sl
 8006984:	fb06 220e 	mla	r2, r6, lr, r2
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006990:	b292      	uxth	r2, r2
 8006992:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699a:	f8bd 3000 	ldrh.w	r3, [sp]
 800699e:	4581      	cmp	r9, r0
 80069a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a4:	f84c 3b04 	str.w	r3, [ip], #4
 80069a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069ac:	d2db      	bcs.n	8006966 <quorem+0x42>
 80069ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80069b2:	b92b      	cbnz	r3, 80069c0 <quorem+0x9c>
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	3b04      	subs	r3, #4
 80069b8:	429d      	cmp	r5, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	d32c      	bcc.n	8006a18 <quorem+0xf4>
 80069be:	613c      	str	r4, [r7, #16]
 80069c0:	4638      	mov	r0, r7
 80069c2:	f001 f9f1 	bl	8007da8 <__mcmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	db22      	blt.n	8006a10 <quorem+0xec>
 80069ca:	3601      	adds	r6, #1
 80069cc:	4629      	mov	r1, r5
 80069ce:	2000      	movs	r0, #0
 80069d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80069d4:	f8d1 c000 	ldr.w	ip, [r1]
 80069d8:	b293      	uxth	r3, r2
 80069da:	1ac3      	subs	r3, r0, r3
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	fa13 f38c 	uxtah	r3, r3, ip
 80069e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069f0:	45c1      	cmp	r9, r8
 80069f2:	f841 3b04 	str.w	r3, [r1], #4
 80069f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069fa:	d2e9      	bcs.n	80069d0 <quorem+0xac>
 80069fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a04:	b922      	cbnz	r2, 8006a10 <quorem+0xec>
 8006a06:	3b04      	subs	r3, #4
 8006a08:	429d      	cmp	r5, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	d30a      	bcc.n	8006a24 <quorem+0x100>
 8006a0e:	613c      	str	r4, [r7, #16]
 8006a10:	4630      	mov	r0, r6
 8006a12:	b003      	add	sp, #12
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d1ce      	bne.n	80069be <quorem+0x9a>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7c9      	b.n	80069b8 <quorem+0x94>
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	3b04      	subs	r3, #4
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d1f0      	bne.n	8006a0e <quorem+0xea>
 8006a2c:	3c01      	subs	r4, #1
 8006a2e:	e7eb      	b.n	8006a08 <quorem+0xe4>
 8006a30:	2000      	movs	r0, #0
 8006a32:	e7ee      	b.n	8006a12 <quorem+0xee>
 8006a34:	0000      	movs	r0, r0
	...

08006a38 <_dtoa_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b04 	vpush	{d8-d9}
 8006a40:	69c5      	ldr	r5, [r0, #28]
 8006a42:	b093      	sub	sp, #76	; 0x4c
 8006a44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a48:	ec57 6b10 	vmov	r6, r7, d0
 8006a4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a50:	9107      	str	r1, [sp, #28]
 8006a52:	4604      	mov	r4, r0
 8006a54:	920a      	str	r2, [sp, #40]	; 0x28
 8006a56:	930d      	str	r3, [sp, #52]	; 0x34
 8006a58:	b975      	cbnz	r5, 8006a78 <_dtoa_r+0x40>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f000 fe2a 	bl	80076b4 <malloc>
 8006a60:	4602      	mov	r2, r0
 8006a62:	61e0      	str	r0, [r4, #28]
 8006a64:	b920      	cbnz	r0, 8006a70 <_dtoa_r+0x38>
 8006a66:	4bae      	ldr	r3, [pc, #696]	; (8006d20 <_dtoa_r+0x2e8>)
 8006a68:	21ef      	movs	r1, #239	; 0xef
 8006a6a:	48ae      	ldr	r0, [pc, #696]	; (8006d24 <_dtoa_r+0x2ec>)
 8006a6c:	f002 fe4c 	bl	8009708 <__assert_func>
 8006a70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a74:	6005      	str	r5, [r0, #0]
 8006a76:	60c5      	str	r5, [r0, #12]
 8006a78:	69e3      	ldr	r3, [r4, #28]
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	b151      	cbz	r1, 8006a94 <_dtoa_r+0x5c>
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	604a      	str	r2, [r1, #4]
 8006a82:	2301      	movs	r3, #1
 8006a84:	4093      	lsls	r3, r2
 8006a86:	608b      	str	r3, [r1, #8]
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 ff07 	bl	800789c <_Bfree>
 8006a8e:	69e3      	ldr	r3, [r4, #28]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	1e3b      	subs	r3, r7, #0
 8006a96:	bfbb      	ittet	lt
 8006a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a9c:	9303      	strlt	r3, [sp, #12]
 8006a9e:	2300      	movge	r3, #0
 8006aa0:	2201      	movlt	r2, #1
 8006aa2:	bfac      	ite	ge
 8006aa4:	f8c8 3000 	strge.w	r3, [r8]
 8006aa8:	f8c8 2000 	strlt.w	r2, [r8]
 8006aac:	4b9e      	ldr	r3, [pc, #632]	; (8006d28 <_dtoa_r+0x2f0>)
 8006aae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ab2:	ea33 0308 	bics.w	r3, r3, r8
 8006ab6:	d11b      	bne.n	8006af0 <_dtoa_r+0xb8>
 8006ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ac4:	4333      	orrs	r3, r6
 8006ac6:	f000 8593 	beq.w	80075f0 <_dtoa_r+0xbb8>
 8006aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006acc:	b963      	cbnz	r3, 8006ae8 <_dtoa_r+0xb0>
 8006ace:	4b97      	ldr	r3, [pc, #604]	; (8006d2c <_dtoa_r+0x2f4>)
 8006ad0:	e027      	b.n	8006b22 <_dtoa_r+0xea>
 8006ad2:	4b97      	ldr	r3, [pc, #604]	; (8006d30 <_dtoa_r+0x2f8>)
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	9800      	ldr	r0, [sp, #0]
 8006ade:	b013      	add	sp, #76	; 0x4c
 8006ae0:	ecbd 8b04 	vpop	{d8-d9}
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4b90      	ldr	r3, [pc, #576]	; (8006d2c <_dtoa_r+0x2f4>)
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	3303      	adds	r3, #3
 8006aee:	e7f3      	b.n	8006ad8 <_dtoa_r+0xa0>
 8006af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	ec51 0b17 	vmov	r0, r1, d7
 8006afa:	eeb0 8a47 	vmov.f32	s16, s14
 8006afe:	eef0 8a67 	vmov.f32	s17, s15
 8006b02:	2300      	movs	r3, #0
 8006b04:	f7f9 ffe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b08:	4681      	mov	r9, r0
 8006b0a:	b160      	cbz	r0, 8006b26 <_dtoa_r+0xee>
 8006b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8568 	beq.w	80075ea <_dtoa_r+0xbb2>
 8006b1a:	4b86      	ldr	r3, [pc, #536]	; (8006d34 <_dtoa_r+0x2fc>)
 8006b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	e7da      	b.n	8006adc <_dtoa_r+0xa4>
 8006b26:	aa10      	add	r2, sp, #64	; 0x40
 8006b28:	a911      	add	r1, sp, #68	; 0x44
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b30:	eef0 0a68 	vmov.f32	s1, s17
 8006b34:	f001 fa4e 	bl	8007fd4 <__d2b>
 8006b38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	d07f      	beq.n	8006c42 <_dtoa_r+0x20a>
 8006b42:	ee18 3a90 	vmov	r3, s17
 8006b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b4e:	ec51 0b18 	vmov	r0, r1, d8
 8006b52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b5e:	4619      	mov	r1, r3
 8006b60:	2200      	movs	r2, #0
 8006b62:	4b75      	ldr	r3, [pc, #468]	; (8006d38 <_dtoa_r+0x300>)
 8006b64:	f7f9 fb90 	bl	8000288 <__aeabi_dsub>
 8006b68:	a367      	add	r3, pc, #412	; (adr r3, 8006d08 <_dtoa_r+0x2d0>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	a367      	add	r3, pc, #412	; (adr r3, 8006d10 <_dtoa_r+0x2d8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fb88 	bl	800028c <__adddf3>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	460f      	mov	r7, r1
 8006b82:	f7f9 fccf 	bl	8000524 <__aeabi_i2d>
 8006b86:	a364      	add	r3, pc, #400	; (adr r3, 8006d18 <_dtoa_r+0x2e0>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fd34 	bl	80005f8 <__aeabi_dmul>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7f9 fb78 	bl	800028c <__adddf3>
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	f7f9 ffda 	bl	8000b58 <__aeabi_d2iz>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4683      	mov	fp, r0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4630      	mov	r0, r6
 8006bac:	4639      	mov	r1, r7
 8006bae:	f7f9 ff95 	bl	8000adc <__aeabi_dcmplt>
 8006bb2:	b148      	cbz	r0, 8006bc8 <_dtoa_r+0x190>
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f7f9 fcb5 	bl	8000524 <__aeabi_i2d>
 8006bba:	4632      	mov	r2, r6
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	f7f9 ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bc2:	b908      	cbnz	r0, 8006bc8 <_dtoa_r+0x190>
 8006bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc8:	f1bb 0f16 	cmp.w	fp, #22
 8006bcc:	d857      	bhi.n	8006c7e <_dtoa_r+0x246>
 8006bce:	4b5b      	ldr	r3, [pc, #364]	; (8006d3c <_dtoa_r+0x304>)
 8006bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	ec51 0b18 	vmov	r0, r1, d8
 8006bdc:	f7f9 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d04e      	beq.n	8006c82 <_dtoa_r+0x24a>
 8006be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006be8:	2300      	movs	r3, #0
 8006bea:	930c      	str	r3, [sp, #48]	; 0x30
 8006bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bee:	1b5b      	subs	r3, r3, r5
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	bf45      	ittet	mi
 8006bf4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bf8:	9305      	strmi	r3, [sp, #20]
 8006bfa:	2300      	movpl	r3, #0
 8006bfc:	2300      	movmi	r3, #0
 8006bfe:	9206      	str	r2, [sp, #24]
 8006c00:	bf54      	ite	pl
 8006c02:	9305      	strpl	r3, [sp, #20]
 8006c04:	9306      	strmi	r3, [sp, #24]
 8006c06:	f1bb 0f00 	cmp.w	fp, #0
 8006c0a:	db3c      	blt.n	8006c86 <_dtoa_r+0x24e>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c12:	445b      	add	r3, fp
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d868      	bhi.n	8006cf2 <_dtoa_r+0x2ba>
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	bfc4      	itt	gt
 8006c24:	3b04      	subgt	r3, #4
 8006c26:	9307      	strgt	r3, [sp, #28]
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c2e:	bfcc      	ite	gt
 8006c30:	2500      	movgt	r5, #0
 8006c32:	2501      	movle	r5, #1
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	f200 8085 	bhi.w	8006d44 <_dtoa_r+0x30c>
 8006c3a:	e8df f003 	tbb	[pc, r3]
 8006c3e:	3b2e      	.short	0x3b2e
 8006c40:	5839      	.short	0x5839
 8006c42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c46:	441d      	add	r5, r3
 8006c48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	bfc1      	itttt	gt
 8006c50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c54:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c60:	bfd6      	itet	le
 8006c62:	f1c3 0320 	rsble	r3, r3, #32
 8006c66:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c6a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c6e:	f7f9 fc49 	bl	8000504 <__aeabi_ui2d>
 8006c72:	2201      	movs	r2, #1
 8006c74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c78:	3d01      	subs	r5, #1
 8006c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c7c:	e76f      	b.n	8006b5e <_dtoa_r+0x126>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e7b3      	b.n	8006bea <_dtoa_r+0x1b2>
 8006c82:	900c      	str	r0, [sp, #48]	; 0x30
 8006c84:	e7b2      	b.n	8006bec <_dtoa_r+0x1b4>
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	eba3 030b 	sub.w	r3, r3, fp
 8006c8c:	9305      	str	r3, [sp, #20]
 8006c8e:	f1cb 0300 	rsb	r3, fp, #0
 8006c92:	9308      	str	r3, [sp, #32]
 8006c94:	2300      	movs	r3, #0
 8006c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c98:	e7bf      	b.n	8006c1a <_dtoa_r+0x1e2>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc52      	bgt.n	8006d4a <_dtoa_r+0x312>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	461a      	mov	r2, r3
 8006cac:	920a      	str	r2, [sp, #40]	; 0x28
 8006cae:	e00b      	b.n	8006cc8 <_dtoa_r+0x290>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f3      	b.n	8006c9c <_dtoa_r+0x264>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cba:	445b      	add	r3, fp
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	bfb8      	it	lt
 8006cc6:	2301      	movlt	r3, #1
 8006cc8:	69e0      	ldr	r0, [r4, #28]
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2204      	movs	r2, #4
 8006cce:	f102 0614 	add.w	r6, r2, #20
 8006cd2:	429e      	cmp	r6, r3
 8006cd4:	d93d      	bls.n	8006d52 <_dtoa_r+0x31a>
 8006cd6:	6041      	str	r1, [r0, #4]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fd9f 	bl	800781c <_Balloc>
 8006cde:	9000      	str	r0, [sp, #0]
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d139      	bne.n	8006d58 <_dtoa_r+0x320>
 8006ce4:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <_dtoa_r+0x308>)
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cec:	e6bd      	b.n	8006a6a <_dtoa_r+0x32>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e7e1      	b.n	8006cb6 <_dtoa_r+0x27e>
 8006cf2:	2501      	movs	r5, #1
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9307      	str	r3, [sp, #28]
 8006cf8:	9509      	str	r5, [sp, #36]	; 0x24
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	2200      	movs	r2, #0
 8006d04:	2312      	movs	r3, #18
 8006d06:	e7d1      	b.n	8006cac <_dtoa_r+0x274>
 8006d08:	636f4361 	.word	0x636f4361
 8006d0c:	3fd287a7 	.word	0x3fd287a7
 8006d10:	8b60c8b3 	.word	0x8b60c8b3
 8006d14:	3fc68a28 	.word	0x3fc68a28
 8006d18:	509f79fb 	.word	0x509f79fb
 8006d1c:	3fd34413 	.word	0x3fd34413
 8006d20:	0800a41d 	.word	0x0800a41d
 8006d24:	0800a434 	.word	0x0800a434
 8006d28:	7ff00000 	.word	0x7ff00000
 8006d2c:	0800a419 	.word	0x0800a419
 8006d30:	0800a410 	.word	0x0800a410
 8006d34:	0800a3e8 	.word	0x0800a3e8
 8006d38:	3ff80000 	.word	0x3ff80000
 8006d3c:	0800a520 	.word	0x0800a520
 8006d40:	0800a48c 	.word	0x0800a48c
 8006d44:	2301      	movs	r3, #1
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
 8006d48:	e7d7      	b.n	8006cfa <_dtoa_r+0x2c2>
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	e7ba      	b.n	8006cc8 <_dtoa_r+0x290>
 8006d52:	3101      	adds	r1, #1
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	e7ba      	b.n	8006cce <_dtoa_r+0x296>
 8006d58:	69e3      	ldr	r3, [r4, #28]
 8006d5a:	9a00      	ldr	r2, [sp, #0]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	2b0e      	cmp	r3, #14
 8006d62:	f200 80a8 	bhi.w	8006eb6 <_dtoa_r+0x47e>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f000 80a5 	beq.w	8006eb6 <_dtoa_r+0x47e>
 8006d6c:	f1bb 0f00 	cmp.w	fp, #0
 8006d70:	dd38      	ble.n	8006de4 <_dtoa_r+0x3ac>
 8006d72:	4bc0      	ldr	r3, [pc, #768]	; (8007074 <_dtoa_r+0x63c>)
 8006d74:	f00b 020f 	and.w	r2, fp, #15
 8006d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d88:	d019      	beq.n	8006dbe <_dtoa_r+0x386>
 8006d8a:	4bbb      	ldr	r3, [pc, #748]	; (8007078 <_dtoa_r+0x640>)
 8006d8c:	ec51 0b18 	vmov	r0, r1, d8
 8006d90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d94:	f7f9 fd5a 	bl	800084c <__aeabi_ddiv>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	f008 080f 	and.w	r8, r8, #15
 8006da0:	2503      	movs	r5, #3
 8006da2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007078 <_dtoa_r+0x640>
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	d10a      	bne.n	8006dc2 <_dtoa_r+0x38a>
 8006dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	f7f9 fd4a 	bl	800084c <__aeabi_ddiv>
 8006db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dbc:	e02b      	b.n	8006e16 <_dtoa_r+0x3de>
 8006dbe:	2502      	movs	r5, #2
 8006dc0:	e7ef      	b.n	8006da2 <_dtoa_r+0x36a>
 8006dc2:	f018 0f01 	tst.w	r8, #1
 8006dc6:	d008      	beq.n	8006dda <_dtoa_r+0x3a2>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dde:	f109 0908 	add.w	r9, r9, #8
 8006de2:	e7e0      	b.n	8006da6 <_dtoa_r+0x36e>
 8006de4:	f000 809f 	beq.w	8006f26 <_dtoa_r+0x4ee>
 8006de8:	f1cb 0600 	rsb	r6, fp, #0
 8006dec:	4ba1      	ldr	r3, [pc, #644]	; (8007074 <_dtoa_r+0x63c>)
 8006dee:	4fa2      	ldr	r7, [pc, #648]	; (8007078 <_dtoa_r+0x640>)
 8006df0:	f006 020f 	and.w	r2, r6, #15
 8006df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	ec51 0b18 	vmov	r0, r1, d8
 8006e00:	f7f9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8006e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e08:	1136      	asrs	r6, r6, #4
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2502      	movs	r5, #2
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d17e      	bne.n	8006f10 <_dtoa_r+0x4d8>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1d0      	bne.n	8006db8 <_dtoa_r+0x380>
 8006e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8084 	beq.w	8006f2a <_dtoa_r+0x4f2>
 8006e22:	4b96      	ldr	r3, [pc, #600]	; (800707c <_dtoa_r+0x644>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fe57 	bl	8000adc <__aeabi_dcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d07b      	beq.n	8006f2a <_dtoa_r+0x4f2>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d078      	beq.n	8006f2a <_dtoa_r+0x4f2>
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd39      	ble.n	8006eb2 <_dtoa_r+0x47a>
 8006e3e:	4b90      	ldr	r3, [pc, #576]	; (8007080 <_dtoa_r+0x648>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fbd7 	bl	80005f8 <__aeabi_dmul>
 8006e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e4e:	9e01      	ldr	r6, [sp, #4]
 8006e50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e54:	3501      	adds	r5, #1
 8006e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7f9 fb62 	bl	8000524 <__aeabi_i2d>
 8006e60:	4642      	mov	r2, r8
 8006e62:	464b      	mov	r3, r9
 8006e64:	f7f9 fbc8 	bl	80005f8 <__aeabi_dmul>
 8006e68:	4b86      	ldr	r3, [pc, #536]	; (8007084 <_dtoa_r+0x64c>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7f9 fa0e 	bl	800028c <__adddf3>
 8006e70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d158      	bne.n	8006f30 <_dtoa_r+0x4f8>
 8006e7e:	4b82      	ldr	r3, [pc, #520]	; (8007088 <_dtoa_r+0x650>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 f9ff 	bl	8000288 <__aeabi_dsub>
 8006e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e8e:	4680      	mov	r8, r0
 8006e90:	4689      	mov	r9, r1
 8006e92:	f7f9 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 8296 	bne.w	80073c8 <_dtoa_r+0x990>
 8006e9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 fe18 	bl	8000adc <__aeabi_dcmplt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f040 8289 	bne.w	80073c4 <_dtoa_r+0x98c>
 8006eb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f2c0 814e 	blt.w	800715a <_dtoa_r+0x722>
 8006ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8006ec2:	f300 814a 	bgt.w	800715a <_dtoa_r+0x722>
 8006ec6:	4b6b      	ldr	r3, [pc, #428]	; (8007074 <_dtoa_r+0x63c>)
 8006ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f280 80dc 	bge.w	8007090 <_dtoa_r+0x658>
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f300 80d8 	bgt.w	8007090 <_dtoa_r+0x658>
 8006ee0:	f040 826f 	bne.w	80073c2 <_dtoa_r+0x98a>
 8006ee4:	4b68      	ldr	r3, [pc, #416]	; (8007088 <_dtoa_r+0x650>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fb84 	bl	80005f8 <__aeabi_dmul>
 8006ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ef4:	f7f9 fe06 	bl	8000b04 <__aeabi_dcmpge>
 8006ef8:	9e04      	ldr	r6, [sp, #16]
 8006efa:	4637      	mov	r7, r6
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f040 8245 	bne.w	800738c <_dtoa_r+0x954>
 8006f02:	9d00      	ldr	r5, [sp, #0]
 8006f04:	2331      	movs	r3, #49	; 0x31
 8006f06:	f805 3b01 	strb.w	r3, [r5], #1
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e241      	b.n	8007394 <_dtoa_r+0x95c>
 8006f10:	07f2      	lsls	r2, r6, #31
 8006f12:	d505      	bpl.n	8006f20 <_dtoa_r+0x4e8>
 8006f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f18:	f7f9 fb6e 	bl	80005f8 <__aeabi_dmul>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	2301      	movs	r3, #1
 8006f20:	1076      	asrs	r6, r6, #1
 8006f22:	3708      	adds	r7, #8
 8006f24:	e773      	b.n	8006e0e <_dtoa_r+0x3d6>
 8006f26:	2502      	movs	r5, #2
 8006f28:	e775      	b.n	8006e16 <_dtoa_r+0x3de>
 8006f2a:	9e04      	ldr	r6, [sp, #16]
 8006f2c:	465f      	mov	r7, fp
 8006f2e:	e792      	b.n	8006e56 <_dtoa_r+0x41e>
 8006f30:	9900      	ldr	r1, [sp, #0]
 8006f32:	4b50      	ldr	r3, [pc, #320]	; (8007074 <_dtoa_r+0x63c>)
 8006f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f38:	4431      	add	r1, r6
 8006f3a:	9102      	str	r1, [sp, #8]
 8006f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f3e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f42:	eef0 9a67 	vmov.f32	s19, s15
 8006f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	d044      	beq.n	8006fdc <_dtoa_r+0x5a4>
 8006f52:	494e      	ldr	r1, [pc, #312]	; (800708c <_dtoa_r+0x654>)
 8006f54:	2000      	movs	r0, #0
 8006f56:	f7f9 fc79 	bl	800084c <__aeabi_ddiv>
 8006f5a:	ec53 2b19 	vmov	r2, r3, d9
 8006f5e:	f7f9 f993 	bl	8000288 <__aeabi_dsub>
 8006f62:	9d00      	ldr	r5, [sp, #0]
 8006f64:	ec41 0b19 	vmov	d9, r0, r1
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f7f9 fdf4 	bl	8000b58 <__aeabi_d2iz>
 8006f70:	4606      	mov	r6, r0
 8006f72:	f7f9 fad7 	bl	8000524 <__aeabi_i2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 f983 	bl	8000288 <__aeabi_dsub>
 8006f82:	3630      	adds	r6, #48	; 0x30
 8006f84:	f805 6b01 	strb.w	r6, [r5], #1
 8006f88:	ec53 2b19 	vmov	r2, r3, d9
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	4689      	mov	r9, r1
 8006f90:	f7f9 fda4 	bl	8000adc <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d164      	bne.n	8007062 <_dtoa_r+0x62a>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	4937      	ldr	r1, [pc, #220]	; (800707c <_dtoa_r+0x644>)
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7f9 f972 	bl	8000288 <__aeabi_dsub>
 8006fa4:	ec53 2b19 	vmov	r2, r3, d9
 8006fa8:	f7f9 fd98 	bl	8000adc <__aeabi_dcmplt>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f040 80b6 	bne.w	800711e <_dtoa_r+0x6e6>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	f43f af7c 	beq.w	8006eb2 <_dtoa_r+0x47a>
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <_dtoa_r+0x648>)
 8006fbc:	ec51 0b19 	vmov	r0, r1, d9
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f7f9 fb19 	bl	80005f8 <__aeabi_dmul>
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <_dtoa_r+0x648>)
 8006fc8:	ec41 0b19 	vmov	d9, r0, r1
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 fb11 	bl	80005f8 <__aeabi_dmul>
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	e7c5      	b.n	8006f68 <_dtoa_r+0x530>
 8006fdc:	ec51 0b17 	vmov	r0, r1, d7
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	9d00      	ldr	r5, [sp, #0]
 8006fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fea:	ec41 0b19 	vmov	d9, r0, r1
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	f7f9 fdb1 	bl	8000b58 <__aeabi_d2iz>
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	f7f9 fa94 	bl	8000524 <__aeabi_i2d>
 8006ffc:	3630      	adds	r6, #48	; 0x30
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	f805 6b01 	strb.w	r6, [r5], #1
 800700e:	9b02      	ldr	r3, [sp, #8]
 8007010:	429d      	cmp	r5, r3
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	d124      	bne.n	8007066 <_dtoa_r+0x62e>
 800701c:	4b1b      	ldr	r3, [pc, #108]	; (800708c <_dtoa_r+0x654>)
 800701e:	ec51 0b19 	vmov	r0, r1, d9
 8007022:	f7f9 f933 	bl	800028c <__adddf3>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 fd73 	bl	8000b18 <__aeabi_dcmpgt>
 8007032:	2800      	cmp	r0, #0
 8007034:	d173      	bne.n	800711e <_dtoa_r+0x6e6>
 8007036:	ec53 2b19 	vmov	r2, r3, d9
 800703a:	4914      	ldr	r1, [pc, #80]	; (800708c <_dtoa_r+0x654>)
 800703c:	2000      	movs	r0, #0
 800703e:	f7f9 f923 	bl	8000288 <__aeabi_dsub>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f af2f 	beq.w	8006eb2 <_dtoa_r+0x47a>
 8007054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007056:	1e6b      	subs	r3, r5, #1
 8007058:	930f      	str	r3, [sp, #60]	; 0x3c
 800705a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d0f8      	beq.n	8007054 <_dtoa_r+0x61c>
 8007062:	46bb      	mov	fp, r7
 8007064:	e04a      	b.n	80070fc <_dtoa_r+0x6c4>
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <_dtoa_r+0x648>)
 8007068:	f7f9 fac6 	bl	80005f8 <__aeabi_dmul>
 800706c:	4680      	mov	r8, r0
 800706e:	4689      	mov	r9, r1
 8007070:	e7bd      	b.n	8006fee <_dtoa_r+0x5b6>
 8007072:	bf00      	nop
 8007074:	0800a520 	.word	0x0800a520
 8007078:	0800a4f8 	.word	0x0800a4f8
 800707c:	3ff00000 	.word	0x3ff00000
 8007080:	40240000 	.word	0x40240000
 8007084:	401c0000 	.word	0x401c0000
 8007088:	40140000 	.word	0x40140000
 800708c:	3fe00000 	.word	0x3fe00000
 8007090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007094:	9d00      	ldr	r5, [sp, #0]
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fbd5 	bl	800084c <__aeabi_ddiv>
 80070a2:	f7f9 fd59 	bl	8000b58 <__aeabi_d2iz>
 80070a6:	9001      	str	r0, [sp, #4]
 80070a8:	f7f9 fa3c 	bl	8000524 <__aeabi_i2d>
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	f7f9 faa2 	bl	80005f8 <__aeabi_dmul>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 f8e4 	bl	8000288 <__aeabi_dsub>
 80070c0:	9e01      	ldr	r6, [sp, #4]
 80070c2:	9f04      	ldr	r7, [sp, #16]
 80070c4:	3630      	adds	r6, #48	; 0x30
 80070c6:	f805 6b01 	strb.w	r6, [r5], #1
 80070ca:	9e00      	ldr	r6, [sp, #0]
 80070cc:	1bae      	subs	r6, r5, r6
 80070ce:	42b7      	cmp	r7, r6
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	d134      	bne.n	8007140 <_dtoa_r+0x708>
 80070d6:	f7f9 f8d9 	bl	800028c <__adddf3>
 80070da:	4642      	mov	r2, r8
 80070dc:	464b      	mov	r3, r9
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	f7f9 fd19 	bl	8000b18 <__aeabi_dcmpgt>
 80070e6:	b9c8      	cbnz	r0, 800711c <_dtoa_r+0x6e4>
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f4:	b110      	cbz	r0, 80070fc <_dtoa_r+0x6c4>
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d40f      	bmi.n	800711c <_dtoa_r+0x6e4>
 80070fc:	4651      	mov	r1, sl
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fbcc 	bl	800789c <_Bfree>
 8007104:	2300      	movs	r3, #0
 8007106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007108:	702b      	strb	r3, [r5, #0]
 800710a:	f10b 0301 	add.w	r3, fp, #1
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007112:	2b00      	cmp	r3, #0
 8007114:	f43f ace2 	beq.w	8006adc <_dtoa_r+0xa4>
 8007118:	601d      	str	r5, [r3, #0]
 800711a:	e4df      	b.n	8006adc <_dtoa_r+0xa4>
 800711c:	465f      	mov	r7, fp
 800711e:	462b      	mov	r3, r5
 8007120:	461d      	mov	r5, r3
 8007122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007126:	2a39      	cmp	r2, #57	; 0x39
 8007128:	d106      	bne.n	8007138 <_dtoa_r+0x700>
 800712a:	9a00      	ldr	r2, [sp, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d1f7      	bne.n	8007120 <_dtoa_r+0x6e8>
 8007130:	9900      	ldr	r1, [sp, #0]
 8007132:	2230      	movs	r2, #48	; 0x30
 8007134:	3701      	adds	r7, #1
 8007136:	700a      	strb	r2, [r1, #0]
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	3201      	adds	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e790      	b.n	8007062 <_dtoa_r+0x62a>
 8007140:	4ba3      	ldr	r3, [pc, #652]	; (80073d0 <_dtoa_r+0x998>)
 8007142:	2200      	movs	r2, #0
 8007144:	f7f9 fa58 	bl	80005f8 <__aeabi_dmul>
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	f7f9 fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007154:	2800      	cmp	r0, #0
 8007156:	d09e      	beq.n	8007096 <_dtoa_r+0x65e>
 8007158:	e7d0      	b.n	80070fc <_dtoa_r+0x6c4>
 800715a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800715c:	2a00      	cmp	r2, #0
 800715e:	f000 80ca 	beq.w	80072f6 <_dtoa_r+0x8be>
 8007162:	9a07      	ldr	r2, [sp, #28]
 8007164:	2a01      	cmp	r2, #1
 8007166:	f300 80ad 	bgt.w	80072c4 <_dtoa_r+0x88c>
 800716a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716c:	2a00      	cmp	r2, #0
 800716e:	f000 80a5 	beq.w	80072bc <_dtoa_r+0x884>
 8007172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007176:	9e08      	ldr	r6, [sp, #32]
 8007178:	9d05      	ldr	r5, [sp, #20]
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	441a      	add	r2, r3
 800717e:	9205      	str	r2, [sp, #20]
 8007180:	9a06      	ldr	r2, [sp, #24]
 8007182:	2101      	movs	r1, #1
 8007184:	441a      	add	r2, r3
 8007186:	4620      	mov	r0, r4
 8007188:	9206      	str	r2, [sp, #24]
 800718a:	f000 fc87 	bl	8007a9c <__i2b>
 800718e:	4607      	mov	r7, r0
 8007190:	b165      	cbz	r5, 80071ac <_dtoa_r+0x774>
 8007192:	9b06      	ldr	r3, [sp, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dd09      	ble.n	80071ac <_dtoa_r+0x774>
 8007198:	42ab      	cmp	r3, r5
 800719a:	9a05      	ldr	r2, [sp, #20]
 800719c:	bfa8      	it	ge
 800719e:	462b      	movge	r3, r5
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	9205      	str	r2, [sp, #20]
 80071a4:	9a06      	ldr	r2, [sp, #24]
 80071a6:	1aed      	subs	r5, r5, r3
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	9306      	str	r3, [sp, #24]
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	b1f3      	cbz	r3, 80071ee <_dtoa_r+0x7b6>
 80071b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 80a3 	beq.w	80072fe <_dtoa_r+0x8c6>
 80071b8:	2e00      	cmp	r6, #0
 80071ba:	dd10      	ble.n	80071de <_dtoa_r+0x7a6>
 80071bc:	4639      	mov	r1, r7
 80071be:	4632      	mov	r2, r6
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fd2b 	bl	8007c1c <__pow5mult>
 80071c6:	4652      	mov	r2, sl
 80071c8:	4601      	mov	r1, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fc7b 	bl	8007ac8 <__multiply>
 80071d2:	4651      	mov	r1, sl
 80071d4:	4680      	mov	r8, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fb60 	bl	800789c <_Bfree>
 80071dc:	46c2      	mov	sl, r8
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	1b9a      	subs	r2, r3, r6
 80071e2:	d004      	beq.n	80071ee <_dtoa_r+0x7b6>
 80071e4:	4651      	mov	r1, sl
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fd18 	bl	8007c1c <__pow5mult>
 80071ec:	4682      	mov	sl, r0
 80071ee:	2101      	movs	r1, #1
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fc53 	bl	8007a9c <__i2b>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	4606      	mov	r6, r0
 80071fc:	f340 8081 	ble.w	8007302 <_dtoa_r+0x8ca>
 8007200:	461a      	mov	r2, r3
 8007202:	4601      	mov	r1, r0
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fd09 	bl	8007c1c <__pow5mult>
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	2b01      	cmp	r3, #1
 800720e:	4606      	mov	r6, r0
 8007210:	dd7a      	ble.n	8007308 <_dtoa_r+0x8d0>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	6933      	ldr	r3, [r6, #16]
 8007218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800721c:	6918      	ldr	r0, [r3, #16]
 800721e:	f000 fbef 	bl	8007a00 <__hi0bits>
 8007222:	f1c0 0020 	rsb	r0, r0, #32
 8007226:	9b06      	ldr	r3, [sp, #24]
 8007228:	4418      	add	r0, r3
 800722a:	f010 001f 	ands.w	r0, r0, #31
 800722e:	f000 8094 	beq.w	800735a <_dtoa_r+0x922>
 8007232:	f1c0 0320 	rsb	r3, r0, #32
 8007236:	2b04      	cmp	r3, #4
 8007238:	f340 8085 	ble.w	8007346 <_dtoa_r+0x90e>
 800723c:	9b05      	ldr	r3, [sp, #20]
 800723e:	f1c0 001c 	rsb	r0, r0, #28
 8007242:	4403      	add	r3, r0
 8007244:	9305      	str	r3, [sp, #20]
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	4403      	add	r3, r0
 800724a:	4405      	add	r5, r0
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	9b05      	ldr	r3, [sp, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	dd05      	ble.n	8007260 <_dtoa_r+0x828>
 8007254:	4651      	mov	r1, sl
 8007256:	461a      	mov	r2, r3
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fd39 	bl	8007cd0 <__lshift>
 800725e:	4682      	mov	sl, r0
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dd05      	ble.n	8007272 <_dtoa_r+0x83a>
 8007266:	4631      	mov	r1, r6
 8007268:	461a      	mov	r2, r3
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fd30 	bl	8007cd0 <__lshift>
 8007270:	4606      	mov	r6, r0
 8007272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d072      	beq.n	800735e <_dtoa_r+0x926>
 8007278:	4631      	mov	r1, r6
 800727a:	4650      	mov	r0, sl
 800727c:	f000 fd94 	bl	8007da8 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	da6c      	bge.n	800735e <_dtoa_r+0x926>
 8007284:	2300      	movs	r3, #0
 8007286:	4651      	mov	r1, sl
 8007288:	220a      	movs	r2, #10
 800728a:	4620      	mov	r0, r4
 800728c:	f000 fb28 	bl	80078e0 <__multadd>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007296:	4682      	mov	sl, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 81b0 	beq.w	80075fe <_dtoa_r+0xbc6>
 800729e:	2300      	movs	r3, #0
 80072a0:	4639      	mov	r1, r7
 80072a2:	220a      	movs	r2, #10
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fb1b 	bl	80078e0 <__multadd>
 80072aa:	9b01      	ldr	r3, [sp, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	4607      	mov	r7, r0
 80072b0:	f300 8096 	bgt.w	80073e0 <_dtoa_r+0x9a8>
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dc59      	bgt.n	800736e <_dtoa_r+0x936>
 80072ba:	e091      	b.n	80073e0 <_dtoa_r+0x9a8>
 80072bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072c2:	e758      	b.n	8007176 <_dtoa_r+0x73e>
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	1e5e      	subs	r6, r3, #1
 80072c8:	9b08      	ldr	r3, [sp, #32]
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfbf      	itttt	lt
 80072ce:	9b08      	ldrlt	r3, [sp, #32]
 80072d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072d2:	9608      	strlt	r6, [sp, #32]
 80072d4:	1af3      	sublt	r3, r6, r3
 80072d6:	bfb4      	ite	lt
 80072d8:	18d2      	addlt	r2, r2, r3
 80072da:	1b9e      	subge	r6, r3, r6
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	bfbc      	itt	lt
 80072e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072e2:	2600      	movlt	r6, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfb7      	itett	lt
 80072e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072f0:	1a9d      	sublt	r5, r3, r2
 80072f2:	2300      	movlt	r3, #0
 80072f4:	e741      	b.n	800717a <_dtoa_r+0x742>
 80072f6:	9e08      	ldr	r6, [sp, #32]
 80072f8:	9d05      	ldr	r5, [sp, #20]
 80072fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072fc:	e748      	b.n	8007190 <_dtoa_r+0x758>
 80072fe:	9a08      	ldr	r2, [sp, #32]
 8007300:	e770      	b.n	80071e4 <_dtoa_r+0x7ac>
 8007302:	9b07      	ldr	r3, [sp, #28]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dc19      	bgt.n	800733c <_dtoa_r+0x904>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	b9bb      	cbnz	r3, 800733c <_dtoa_r+0x904>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007312:	b99b      	cbnz	r3, 800733c <_dtoa_r+0x904>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	b183      	cbz	r3, 8007342 <_dtoa_r+0x90a>
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	3301      	adds	r3, #1
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	f04f 0801 	mov.w	r8, #1
 8007330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f af6f 	bne.w	8007216 <_dtoa_r+0x7de>
 8007338:	2001      	movs	r0, #1
 800733a:	e774      	b.n	8007226 <_dtoa_r+0x7ee>
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	e7f6      	b.n	8007330 <_dtoa_r+0x8f8>
 8007342:	4698      	mov	r8, r3
 8007344:	e7f4      	b.n	8007330 <_dtoa_r+0x8f8>
 8007346:	d082      	beq.n	800724e <_dtoa_r+0x816>
 8007348:	9a05      	ldr	r2, [sp, #20]
 800734a:	331c      	adds	r3, #28
 800734c:	441a      	add	r2, r3
 800734e:	9205      	str	r2, [sp, #20]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	441a      	add	r2, r3
 8007354:	441d      	add	r5, r3
 8007356:	9206      	str	r2, [sp, #24]
 8007358:	e779      	b.n	800724e <_dtoa_r+0x816>
 800735a:	4603      	mov	r3, r0
 800735c:	e7f4      	b.n	8007348 <_dtoa_r+0x910>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc37      	bgt.n	80073d4 <_dtoa_r+0x99c>
 8007364:	9b07      	ldr	r3, [sp, #28]
 8007366:	2b02      	cmp	r3, #2
 8007368:	dd34      	ble.n	80073d4 <_dtoa_r+0x99c>
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	b963      	cbnz	r3, 800738c <_dtoa_r+0x954>
 8007372:	4631      	mov	r1, r6
 8007374:	2205      	movs	r2, #5
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fab2 	bl	80078e0 <__multadd>
 800737c:	4601      	mov	r1, r0
 800737e:	4606      	mov	r6, r0
 8007380:	4650      	mov	r0, sl
 8007382:	f000 fd11 	bl	8007da8 <__mcmp>
 8007386:	2800      	cmp	r0, #0
 8007388:	f73f adbb 	bgt.w	8006f02 <_dtoa_r+0x4ca>
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	9d00      	ldr	r5, [sp, #0]
 8007390:	ea6f 0b03 	mvn.w	fp, r3
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	4631      	mov	r1, r6
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fa7e 	bl	800789c <_Bfree>
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	f43f aeab 	beq.w	80070fc <_dtoa_r+0x6c4>
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	d005      	beq.n	80073b8 <_dtoa_r+0x980>
 80073ac:	45b8      	cmp	r8, r7
 80073ae:	d003      	beq.n	80073b8 <_dtoa_r+0x980>
 80073b0:	4641      	mov	r1, r8
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fa72 	bl	800789c <_Bfree>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fa6e 	bl	800789c <_Bfree>
 80073c0:	e69c      	b.n	80070fc <_dtoa_r+0x6c4>
 80073c2:	2600      	movs	r6, #0
 80073c4:	4637      	mov	r7, r6
 80073c6:	e7e1      	b.n	800738c <_dtoa_r+0x954>
 80073c8:	46bb      	mov	fp, r7
 80073ca:	4637      	mov	r7, r6
 80073cc:	e599      	b.n	8006f02 <_dtoa_r+0x4ca>
 80073ce:	bf00      	nop
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80c8 	beq.w	800756c <_dtoa_r+0xb34>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x9b8>
 80073e4:	4639      	mov	r1, r7
 80073e6:	462a      	mov	r2, r5
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fc71 	bl	8007cd0 <__lshift>
 80073ee:	4607      	mov	r7, r0
 80073f0:	f1b8 0f00 	cmp.w	r8, #0
 80073f4:	d05b      	beq.n	80074ae <_dtoa_r+0xa76>
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fa0f 	bl	800781c <_Balloc>
 80073fe:	4605      	mov	r5, r0
 8007400:	b928      	cbnz	r0, 800740e <_dtoa_r+0x9d6>
 8007402:	4b83      	ldr	r3, [pc, #524]	; (8007610 <_dtoa_r+0xbd8>)
 8007404:	4602      	mov	r2, r0
 8007406:	f240 21ef 	movw	r1, #751	; 0x2ef
 800740a:	f7ff bb2e 	b.w	8006a6a <_dtoa_r+0x32>
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	3202      	adds	r2, #2
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	f107 010c 	add.w	r1, r7, #12
 8007418:	300c      	adds	r0, #12
 800741a:	f002 f95f 	bl	80096dc <memcpy>
 800741e:	2201      	movs	r2, #1
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fc54 	bl	8007cd0 <__lshift>
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007432:	4413      	add	r3, r2
 8007434:	9308      	str	r3, [sp, #32]
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	46b8      	mov	r8, r7
 800743e:	9306      	str	r3, [sp, #24]
 8007440:	4607      	mov	r7, r0
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	4631      	mov	r1, r6
 8007446:	3b01      	subs	r3, #1
 8007448:	4650      	mov	r0, sl
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f7ff fa6a 	bl	8006924 <quorem>
 8007450:	4641      	mov	r1, r8
 8007452:	9002      	str	r0, [sp, #8]
 8007454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007458:	4650      	mov	r0, sl
 800745a:	f000 fca5 	bl	8007da8 <__mcmp>
 800745e:	463a      	mov	r2, r7
 8007460:	9005      	str	r0, [sp, #20]
 8007462:	4631      	mov	r1, r6
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fcbb 	bl	8007de0 <__mdiff>
 800746a:	68c2      	ldr	r2, [r0, #12]
 800746c:	4605      	mov	r5, r0
 800746e:	bb02      	cbnz	r2, 80074b2 <_dtoa_r+0xa7a>
 8007470:	4601      	mov	r1, r0
 8007472:	4650      	mov	r0, sl
 8007474:	f000 fc98 	bl	8007da8 <__mcmp>
 8007478:	4602      	mov	r2, r0
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	9209      	str	r2, [sp, #36]	; 0x24
 8007480:	f000 fa0c 	bl	800789c <_Bfree>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007488:	9d04      	ldr	r5, [sp, #16]
 800748a:	ea43 0102 	orr.w	r1, r3, r2
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	4319      	orrs	r1, r3
 8007492:	d110      	bne.n	80074b6 <_dtoa_r+0xa7e>
 8007494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007498:	d029      	beq.n	80074ee <_dtoa_r+0xab6>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd02      	ble.n	80074a6 <_dtoa_r+0xa6e>
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	f883 9000 	strb.w	r9, [r3]
 80074ac:	e774      	b.n	8007398 <_dtoa_r+0x960>
 80074ae:	4638      	mov	r0, r7
 80074b0:	e7ba      	b.n	8007428 <_dtoa_r+0x9f0>
 80074b2:	2201      	movs	r2, #1
 80074b4:	e7e1      	b.n	800747a <_dtoa_r+0xa42>
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db04      	blt.n	80074c6 <_dtoa_r+0xa8e>
 80074bc:	9907      	ldr	r1, [sp, #28]
 80074be:	430b      	orrs	r3, r1
 80074c0:	9906      	ldr	r1, [sp, #24]
 80074c2:	430b      	orrs	r3, r1
 80074c4:	d120      	bne.n	8007508 <_dtoa_r+0xad0>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	dded      	ble.n	80074a6 <_dtoa_r+0xa6e>
 80074ca:	4651      	mov	r1, sl
 80074cc:	2201      	movs	r2, #1
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fbfe 	bl	8007cd0 <__lshift>
 80074d4:	4631      	mov	r1, r6
 80074d6:	4682      	mov	sl, r0
 80074d8:	f000 fc66 	bl	8007da8 <__mcmp>
 80074dc:	2800      	cmp	r0, #0
 80074de:	dc03      	bgt.n	80074e8 <_dtoa_r+0xab0>
 80074e0:	d1e1      	bne.n	80074a6 <_dtoa_r+0xa6e>
 80074e2:	f019 0f01 	tst.w	r9, #1
 80074e6:	d0de      	beq.n	80074a6 <_dtoa_r+0xa6e>
 80074e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074ec:	d1d8      	bne.n	80074a0 <_dtoa_r+0xa68>
 80074ee:	9a01      	ldr	r2, [sp, #4]
 80074f0:	2339      	movs	r3, #57	; 0x39
 80074f2:	7013      	strb	r3, [r2, #0]
 80074f4:	462b      	mov	r3, r5
 80074f6:	461d      	mov	r5, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074fe:	2a39      	cmp	r2, #57	; 0x39
 8007500:	d06c      	beq.n	80075dc <_dtoa_r+0xba4>
 8007502:	3201      	adds	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e747      	b.n	8007398 <_dtoa_r+0x960>
 8007508:	2a00      	cmp	r2, #0
 800750a:	dd07      	ble.n	800751c <_dtoa_r+0xae4>
 800750c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007510:	d0ed      	beq.n	80074ee <_dtoa_r+0xab6>
 8007512:	9a01      	ldr	r2, [sp, #4]
 8007514:	f109 0301 	add.w	r3, r9, #1
 8007518:	7013      	strb	r3, [r2, #0]
 800751a:	e73d      	b.n	8007398 <_dtoa_r+0x960>
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	9a08      	ldr	r2, [sp, #32]
 8007520:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007524:	4293      	cmp	r3, r2
 8007526:	d043      	beq.n	80075b0 <_dtoa_r+0xb78>
 8007528:	4651      	mov	r1, sl
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f9d6 	bl	80078e0 <__multadd>
 8007534:	45b8      	cmp	r8, r7
 8007536:	4682      	mov	sl, r0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	f04f 020a 	mov.w	r2, #10
 8007540:	4641      	mov	r1, r8
 8007542:	4620      	mov	r0, r4
 8007544:	d107      	bne.n	8007556 <_dtoa_r+0xb1e>
 8007546:	f000 f9cb 	bl	80078e0 <__multadd>
 800754a:	4680      	mov	r8, r0
 800754c:	4607      	mov	r7, r0
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	e775      	b.n	8007442 <_dtoa_r+0xa0a>
 8007556:	f000 f9c3 	bl	80078e0 <__multadd>
 800755a:	4639      	mov	r1, r7
 800755c:	4680      	mov	r8, r0
 800755e:	2300      	movs	r3, #0
 8007560:	220a      	movs	r2, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f9bc 	bl	80078e0 <__multadd>
 8007568:	4607      	mov	r7, r0
 800756a:	e7f0      	b.n	800754e <_dtoa_r+0xb16>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	9d00      	ldr	r5, [sp, #0]
 8007572:	4631      	mov	r1, r6
 8007574:	4650      	mov	r0, sl
 8007576:	f7ff f9d5 	bl	8006924 <quorem>
 800757a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	f805 9b01 	strb.w	r9, [r5], #1
 8007584:	1aea      	subs	r2, r5, r3
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	4293      	cmp	r3, r2
 800758a:	dd07      	ble.n	800759c <_dtoa_r+0xb64>
 800758c:	4651      	mov	r1, sl
 800758e:	2300      	movs	r3, #0
 8007590:	220a      	movs	r2, #10
 8007592:	4620      	mov	r0, r4
 8007594:	f000 f9a4 	bl	80078e0 <__multadd>
 8007598:	4682      	mov	sl, r0
 800759a:	e7ea      	b.n	8007572 <_dtoa_r+0xb3a>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfc8      	it	gt
 80075a2:	461d      	movgt	r5, r3
 80075a4:	9b00      	ldr	r3, [sp, #0]
 80075a6:	bfd8      	it	le
 80075a8:	2501      	movle	r5, #1
 80075aa:	441d      	add	r5, r3
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	4651      	mov	r1, sl
 80075b2:	2201      	movs	r2, #1
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fb8b 	bl	8007cd0 <__lshift>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4682      	mov	sl, r0
 80075be:	f000 fbf3 	bl	8007da8 <__mcmp>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	dc96      	bgt.n	80074f4 <_dtoa_r+0xabc>
 80075c6:	d102      	bne.n	80075ce <_dtoa_r+0xb96>
 80075c8:	f019 0f01 	tst.w	r9, #1
 80075cc:	d192      	bne.n	80074f4 <_dtoa_r+0xabc>
 80075ce:	462b      	mov	r3, r5
 80075d0:	461d      	mov	r5, r3
 80075d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075d6:	2a30      	cmp	r2, #48	; 0x30
 80075d8:	d0fa      	beq.n	80075d0 <_dtoa_r+0xb98>
 80075da:	e6dd      	b.n	8007398 <_dtoa_r+0x960>
 80075dc:	9a00      	ldr	r2, [sp, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d189      	bne.n	80074f6 <_dtoa_r+0xabe>
 80075e2:	f10b 0b01 	add.w	fp, fp, #1
 80075e6:	2331      	movs	r3, #49	; 0x31
 80075e8:	e796      	b.n	8007518 <_dtoa_r+0xae0>
 80075ea:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <_dtoa_r+0xbdc>)
 80075ec:	f7ff ba99 	b.w	8006b22 <_dtoa_r+0xea>
 80075f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f47f aa6d 	bne.w	8006ad2 <_dtoa_r+0x9a>
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_dtoa_r+0xbe0>)
 80075fa:	f7ff ba92 	b.w	8006b22 <_dtoa_r+0xea>
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dcb5      	bgt.n	8007570 <_dtoa_r+0xb38>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	2b02      	cmp	r3, #2
 8007608:	f73f aeb1 	bgt.w	800736e <_dtoa_r+0x936>
 800760c:	e7b0      	b.n	8007570 <_dtoa_r+0xb38>
 800760e:	bf00      	nop
 8007610:	0800a48c 	.word	0x0800a48c
 8007614:	0800a3e7 	.word	0x0800a3e7
 8007618:	0800a410 	.word	0x0800a410

0800761c <_free_r>:
 800761c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761e:	2900      	cmp	r1, #0
 8007620:	d044      	beq.n	80076ac <_free_r+0x90>
 8007622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007626:	9001      	str	r0, [sp, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f1a1 0404 	sub.w	r4, r1, #4
 800762e:	bfb8      	it	lt
 8007630:	18e4      	addlt	r4, r4, r3
 8007632:	f000 f8e7 	bl	8007804 <__malloc_lock>
 8007636:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <_free_r+0x94>)
 8007638:	9801      	ldr	r0, [sp, #4]
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	b933      	cbnz	r3, 800764c <_free_r+0x30>
 800763e:	6063      	str	r3, [r4, #4]
 8007640:	6014      	str	r4, [r2, #0]
 8007642:	b003      	add	sp, #12
 8007644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007648:	f000 b8e2 	b.w	8007810 <__malloc_unlock>
 800764c:	42a3      	cmp	r3, r4
 800764e:	d908      	bls.n	8007662 <_free_r+0x46>
 8007650:	6825      	ldr	r5, [r4, #0]
 8007652:	1961      	adds	r1, r4, r5
 8007654:	428b      	cmp	r3, r1
 8007656:	bf01      	itttt	eq
 8007658:	6819      	ldreq	r1, [r3, #0]
 800765a:	685b      	ldreq	r3, [r3, #4]
 800765c:	1949      	addeq	r1, r1, r5
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	e7ed      	b.n	800763e <_free_r+0x22>
 8007662:	461a      	mov	r2, r3
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	b10b      	cbz	r3, 800766c <_free_r+0x50>
 8007668:	42a3      	cmp	r3, r4
 800766a:	d9fa      	bls.n	8007662 <_free_r+0x46>
 800766c:	6811      	ldr	r1, [r2, #0]
 800766e:	1855      	adds	r5, r2, r1
 8007670:	42a5      	cmp	r5, r4
 8007672:	d10b      	bne.n	800768c <_free_r+0x70>
 8007674:	6824      	ldr	r4, [r4, #0]
 8007676:	4421      	add	r1, r4
 8007678:	1854      	adds	r4, r2, r1
 800767a:	42a3      	cmp	r3, r4
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	d1e0      	bne.n	8007642 <_free_r+0x26>
 8007680:	681c      	ldr	r4, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	6053      	str	r3, [r2, #4]
 8007686:	440c      	add	r4, r1
 8007688:	6014      	str	r4, [r2, #0]
 800768a:	e7da      	b.n	8007642 <_free_r+0x26>
 800768c:	d902      	bls.n	8007694 <_free_r+0x78>
 800768e:	230c      	movs	r3, #12
 8007690:	6003      	str	r3, [r0, #0]
 8007692:	e7d6      	b.n	8007642 <_free_r+0x26>
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	1961      	adds	r1, r4, r5
 8007698:	428b      	cmp	r3, r1
 800769a:	bf04      	itt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	bf04      	itt	eq
 80076a4:	1949      	addeq	r1, r1, r5
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	6054      	str	r4, [r2, #4]
 80076aa:	e7ca      	b.n	8007642 <_free_r+0x26>
 80076ac:	b003      	add	sp, #12
 80076ae:	bd30      	pop	{r4, r5, pc}
 80076b0:	2000062c 	.word	0x2000062c

080076b4 <malloc>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <malloc+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 b823 	b.w	8007704 <_malloc_r>
 80076be:	bf00      	nop
 80076c0:	200000a0 	.word	0x200000a0

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0e      	ldr	r6, [pc, #56]	; (8007700 <sbrk_aligned+0x3c>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f001 fff4 	bl	80096bc <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f001 ffef 	bl	80096bc <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d00a      	beq.n	80076f8 <sbrk_aligned+0x34>
 80076e2:	1cc4      	adds	r4, r0, #3
 80076e4:	f024 0403 	bic.w	r4, r4, #3
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d007      	beq.n	80076fc <sbrk_aligned+0x38>
 80076ec:	1a21      	subs	r1, r4, r0
 80076ee:	4628      	mov	r0, r5
 80076f0:	f001 ffe4 	bl	80096bc <_sbrk_r>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d101      	bne.n	80076fc <sbrk_aligned+0x38>
 80076f8:	f04f 34ff 	mov.w	r4, #4294967295
 80076fc:	4620      	mov	r0, r4
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	20000630 	.word	0x20000630

08007704 <_malloc_r>:
 8007704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007708:	1ccd      	adds	r5, r1, #3
 800770a:	f025 0503 	bic.w	r5, r5, #3
 800770e:	3508      	adds	r5, #8
 8007710:	2d0c      	cmp	r5, #12
 8007712:	bf38      	it	cc
 8007714:	250c      	movcc	r5, #12
 8007716:	2d00      	cmp	r5, #0
 8007718:	4607      	mov	r7, r0
 800771a:	db01      	blt.n	8007720 <_malloc_r+0x1c>
 800771c:	42a9      	cmp	r1, r5
 800771e:	d905      	bls.n	800772c <_malloc_r+0x28>
 8007720:	230c      	movs	r3, #12
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	2600      	movs	r6, #0
 8007726:	4630      	mov	r0, r6
 8007728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007800 <_malloc_r+0xfc>
 8007730:	f000 f868 	bl	8007804 <__malloc_lock>
 8007734:	f8d8 3000 	ldr.w	r3, [r8]
 8007738:	461c      	mov	r4, r3
 800773a:	bb5c      	cbnz	r4, 8007794 <_malloc_r+0x90>
 800773c:	4629      	mov	r1, r5
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff ffc0 	bl	80076c4 <sbrk_aligned>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	4604      	mov	r4, r0
 8007748:	d155      	bne.n	80077f6 <_malloc_r+0xf2>
 800774a:	f8d8 4000 	ldr.w	r4, [r8]
 800774e:	4626      	mov	r6, r4
 8007750:	2e00      	cmp	r6, #0
 8007752:	d145      	bne.n	80077e0 <_malloc_r+0xdc>
 8007754:	2c00      	cmp	r4, #0
 8007756:	d048      	beq.n	80077ea <_malloc_r+0xe6>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	4631      	mov	r1, r6
 800775c:	4638      	mov	r0, r7
 800775e:	eb04 0903 	add.w	r9, r4, r3
 8007762:	f001 ffab 	bl	80096bc <_sbrk_r>
 8007766:	4581      	cmp	r9, r0
 8007768:	d13f      	bne.n	80077ea <_malloc_r+0xe6>
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	1a6d      	subs	r5, r5, r1
 800776e:	4629      	mov	r1, r5
 8007770:	4638      	mov	r0, r7
 8007772:	f7ff ffa7 	bl	80076c4 <sbrk_aligned>
 8007776:	3001      	adds	r0, #1
 8007778:	d037      	beq.n	80077ea <_malloc_r+0xe6>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	442b      	add	r3, r5
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	f8d8 3000 	ldr.w	r3, [r8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d038      	beq.n	80077fa <_malloc_r+0xf6>
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	42a2      	cmp	r2, r4
 800778c:	d12b      	bne.n	80077e6 <_malloc_r+0xe2>
 800778e:	2200      	movs	r2, #0
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	e00f      	b.n	80077b4 <_malloc_r+0xb0>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	1b52      	subs	r2, r2, r5
 8007798:	d41f      	bmi.n	80077da <_malloc_r+0xd6>
 800779a:	2a0b      	cmp	r2, #11
 800779c:	d917      	bls.n	80077ce <_malloc_r+0xca>
 800779e:	1961      	adds	r1, r4, r5
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	6025      	str	r5, [r4, #0]
 80077a4:	bf18      	it	ne
 80077a6:	6059      	strne	r1, [r3, #4]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	bf08      	it	eq
 80077ac:	f8c8 1000 	streq.w	r1, [r8]
 80077b0:	5162      	str	r2, [r4, r5]
 80077b2:	604b      	str	r3, [r1, #4]
 80077b4:	4638      	mov	r0, r7
 80077b6:	f104 060b 	add.w	r6, r4, #11
 80077ba:	f000 f829 	bl	8007810 <__malloc_unlock>
 80077be:	f026 0607 	bic.w	r6, r6, #7
 80077c2:	1d23      	adds	r3, r4, #4
 80077c4:	1af2      	subs	r2, r6, r3
 80077c6:	d0ae      	beq.n	8007726 <_malloc_r+0x22>
 80077c8:	1b9b      	subs	r3, r3, r6
 80077ca:	50a3      	str	r3, [r4, r2]
 80077cc:	e7ab      	b.n	8007726 <_malloc_r+0x22>
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	6862      	ldr	r2, [r4, #4]
 80077d2:	d1dd      	bne.n	8007790 <_malloc_r+0x8c>
 80077d4:	f8c8 2000 	str.w	r2, [r8]
 80077d8:	e7ec      	b.n	80077b4 <_malloc_r+0xb0>
 80077da:	4623      	mov	r3, r4
 80077dc:	6864      	ldr	r4, [r4, #4]
 80077de:	e7ac      	b.n	800773a <_malloc_r+0x36>
 80077e0:	4634      	mov	r4, r6
 80077e2:	6876      	ldr	r6, [r6, #4]
 80077e4:	e7b4      	b.n	8007750 <_malloc_r+0x4c>
 80077e6:	4613      	mov	r3, r2
 80077e8:	e7cc      	b.n	8007784 <_malloc_r+0x80>
 80077ea:	230c      	movs	r3, #12
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f000 f80e 	bl	8007810 <__malloc_unlock>
 80077f4:	e797      	b.n	8007726 <_malloc_r+0x22>
 80077f6:	6025      	str	r5, [r4, #0]
 80077f8:	e7dc      	b.n	80077b4 <_malloc_r+0xb0>
 80077fa:	605b      	str	r3, [r3, #4]
 80077fc:	deff      	udf	#255	; 0xff
 80077fe:	bf00      	nop
 8007800:	2000062c 	.word	0x2000062c

08007804 <__malloc_lock>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__malloc_lock+0x8>)
 8007806:	f7ff b884 	b.w	8006912 <__retarget_lock_acquire_recursive>
 800780a:	bf00      	nop
 800780c:	20000628 	.word	0x20000628

08007810 <__malloc_unlock>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__malloc_unlock+0x8>)
 8007812:	f7ff b87f 	b.w	8006914 <__retarget_lock_release_recursive>
 8007816:	bf00      	nop
 8007818:	20000628 	.word	0x20000628

0800781c <_Balloc>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	69c6      	ldr	r6, [r0, #28]
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	b976      	cbnz	r6, 8007844 <_Balloc+0x28>
 8007826:	2010      	movs	r0, #16
 8007828:	f7ff ff44 	bl	80076b4 <malloc>
 800782c:	4602      	mov	r2, r0
 800782e:	61e0      	str	r0, [r4, #28]
 8007830:	b920      	cbnz	r0, 800783c <_Balloc+0x20>
 8007832:	4b18      	ldr	r3, [pc, #96]	; (8007894 <_Balloc+0x78>)
 8007834:	4818      	ldr	r0, [pc, #96]	; (8007898 <_Balloc+0x7c>)
 8007836:	216b      	movs	r1, #107	; 0x6b
 8007838:	f001 ff66 	bl	8009708 <__assert_func>
 800783c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007840:	6006      	str	r6, [r0, #0]
 8007842:	60c6      	str	r6, [r0, #12]
 8007844:	69e6      	ldr	r6, [r4, #28]
 8007846:	68f3      	ldr	r3, [r6, #12]
 8007848:	b183      	cbz	r3, 800786c <_Balloc+0x50>
 800784a:	69e3      	ldr	r3, [r4, #28]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007852:	b9b8      	cbnz	r0, 8007884 <_Balloc+0x68>
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f605 	lsl.w	r6, r1, r5
 800785a:	1d72      	adds	r2, r6, #5
 800785c:	0092      	lsls	r2, r2, #2
 800785e:	4620      	mov	r0, r4
 8007860:	f001 ff70 	bl	8009744 <_calloc_r>
 8007864:	b160      	cbz	r0, 8007880 <_Balloc+0x64>
 8007866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800786a:	e00e      	b.n	800788a <_Balloc+0x6e>
 800786c:	2221      	movs	r2, #33	; 0x21
 800786e:	2104      	movs	r1, #4
 8007870:	4620      	mov	r0, r4
 8007872:	f001 ff67 	bl	8009744 <_calloc_r>
 8007876:	69e3      	ldr	r3, [r4, #28]
 8007878:	60f0      	str	r0, [r6, #12]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e4      	bne.n	800784a <_Balloc+0x2e>
 8007880:	2000      	movs	r0, #0
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	6802      	ldr	r2, [r0, #0]
 8007886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800788a:	2300      	movs	r3, #0
 800788c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007890:	e7f7      	b.n	8007882 <_Balloc+0x66>
 8007892:	bf00      	nop
 8007894:	0800a41d 	.word	0x0800a41d
 8007898:	0800a49d 	.word	0x0800a49d

0800789c <_Bfree>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	69c6      	ldr	r6, [r0, #28]
 80078a0:	4605      	mov	r5, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b976      	cbnz	r6, 80078c4 <_Bfree+0x28>
 80078a6:	2010      	movs	r0, #16
 80078a8:	f7ff ff04 	bl	80076b4 <malloc>
 80078ac:	4602      	mov	r2, r0
 80078ae:	61e8      	str	r0, [r5, #28]
 80078b0:	b920      	cbnz	r0, 80078bc <_Bfree+0x20>
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <_Bfree+0x3c>)
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <_Bfree+0x40>)
 80078b6:	218f      	movs	r1, #143	; 0x8f
 80078b8:	f001 ff26 	bl	8009708 <__assert_func>
 80078bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c0:	6006      	str	r6, [r0, #0]
 80078c2:	60c6      	str	r6, [r0, #12]
 80078c4:	b13c      	cbz	r4, 80078d6 <_Bfree+0x3a>
 80078c6:	69eb      	ldr	r3, [r5, #28]
 80078c8:	6862      	ldr	r2, [r4, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d0:	6021      	str	r1, [r4, #0]
 80078d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	0800a41d 	.word	0x0800a41d
 80078dc:	0800a49d 	.word	0x0800a49d

080078e0 <__multadd>:
 80078e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	690d      	ldr	r5, [r1, #16]
 80078e6:	4607      	mov	r7, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	461e      	mov	r6, r3
 80078ec:	f101 0c14 	add.w	ip, r1, #20
 80078f0:	2000      	movs	r0, #0
 80078f2:	f8dc 3000 	ldr.w	r3, [ip]
 80078f6:	b299      	uxth	r1, r3
 80078f8:	fb02 6101 	mla	r1, r2, r1, r6
 80078fc:	0c1e      	lsrs	r6, r3, #16
 80078fe:	0c0b      	lsrs	r3, r1, #16
 8007900:	fb02 3306 	mla	r3, r2, r6, r3
 8007904:	b289      	uxth	r1, r1
 8007906:	3001      	adds	r0, #1
 8007908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800790c:	4285      	cmp	r5, r0
 800790e:	f84c 1b04 	str.w	r1, [ip], #4
 8007912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007916:	dcec      	bgt.n	80078f2 <__multadd+0x12>
 8007918:	b30e      	cbz	r6, 800795e <__multadd+0x7e>
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	42ab      	cmp	r3, r5
 800791e:	dc19      	bgt.n	8007954 <__multadd+0x74>
 8007920:	6861      	ldr	r1, [r4, #4]
 8007922:	4638      	mov	r0, r7
 8007924:	3101      	adds	r1, #1
 8007926:	f7ff ff79 	bl	800781c <_Balloc>
 800792a:	4680      	mov	r8, r0
 800792c:	b928      	cbnz	r0, 800793a <__multadd+0x5a>
 800792e:	4602      	mov	r2, r0
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <__multadd+0x84>)
 8007932:	480d      	ldr	r0, [pc, #52]	; (8007968 <__multadd+0x88>)
 8007934:	21ba      	movs	r1, #186	; 0xba
 8007936:	f001 fee7 	bl	8009708 <__assert_func>
 800793a:	6922      	ldr	r2, [r4, #16]
 800793c:	3202      	adds	r2, #2
 800793e:	f104 010c 	add.w	r1, r4, #12
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	300c      	adds	r0, #12
 8007946:	f001 fec9 	bl	80096dc <memcpy>
 800794a:	4621      	mov	r1, r4
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff ffa5 	bl	800789c <_Bfree>
 8007952:	4644      	mov	r4, r8
 8007954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007958:	3501      	adds	r5, #1
 800795a:	615e      	str	r6, [r3, #20]
 800795c:	6125      	str	r5, [r4, #16]
 800795e:	4620      	mov	r0, r4
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	0800a48c 	.word	0x0800a48c
 8007968:	0800a49d 	.word	0x0800a49d

0800796c <__s2b>:
 800796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007970:	460c      	mov	r4, r1
 8007972:	4615      	mov	r5, r2
 8007974:	461f      	mov	r7, r3
 8007976:	2209      	movs	r2, #9
 8007978:	3308      	adds	r3, #8
 800797a:	4606      	mov	r6, r0
 800797c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007980:	2100      	movs	r1, #0
 8007982:	2201      	movs	r2, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	db09      	blt.n	800799c <__s2b+0x30>
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ff47 	bl	800781c <_Balloc>
 800798e:	b940      	cbnz	r0, 80079a2 <__s2b+0x36>
 8007990:	4602      	mov	r2, r0
 8007992:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <__s2b+0x8c>)
 8007994:	4819      	ldr	r0, [pc, #100]	; (80079fc <__s2b+0x90>)
 8007996:	21d3      	movs	r1, #211	; 0xd3
 8007998:	f001 feb6 	bl	8009708 <__assert_func>
 800799c:	0052      	lsls	r2, r2, #1
 800799e:	3101      	adds	r1, #1
 80079a0:	e7f0      	b.n	8007984 <__s2b+0x18>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	6143      	str	r3, [r0, #20]
 80079a6:	2d09      	cmp	r5, #9
 80079a8:	f04f 0301 	mov.w	r3, #1
 80079ac:	6103      	str	r3, [r0, #16]
 80079ae:	dd16      	ble.n	80079de <__s2b+0x72>
 80079b0:	f104 0909 	add.w	r9, r4, #9
 80079b4:	46c8      	mov	r8, r9
 80079b6:	442c      	add	r4, r5
 80079b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079bc:	4601      	mov	r1, r0
 80079be:	3b30      	subs	r3, #48	; 0x30
 80079c0:	220a      	movs	r2, #10
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ff8c 	bl	80078e0 <__multadd>
 80079c8:	45a0      	cmp	r8, r4
 80079ca:	d1f5      	bne.n	80079b8 <__s2b+0x4c>
 80079cc:	f1a5 0408 	sub.w	r4, r5, #8
 80079d0:	444c      	add	r4, r9
 80079d2:	1b2d      	subs	r5, r5, r4
 80079d4:	1963      	adds	r3, r4, r5
 80079d6:	42bb      	cmp	r3, r7
 80079d8:	db04      	blt.n	80079e4 <__s2b+0x78>
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	340a      	adds	r4, #10
 80079e0:	2509      	movs	r5, #9
 80079e2:	e7f6      	b.n	80079d2 <__s2b+0x66>
 80079e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079e8:	4601      	mov	r1, r0
 80079ea:	3b30      	subs	r3, #48	; 0x30
 80079ec:	220a      	movs	r2, #10
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff76 	bl	80078e0 <__multadd>
 80079f4:	e7ee      	b.n	80079d4 <__s2b+0x68>
 80079f6:	bf00      	nop
 80079f8:	0800a48c 	.word	0x0800a48c
 80079fc:	0800a49d 	.word	0x0800a49d

08007a00 <__hi0bits>:
 8007a00:	0c03      	lsrs	r3, r0, #16
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	b9d3      	cbnz	r3, 8007a3c <__hi0bits+0x3c>
 8007a06:	0400      	lsls	r0, r0, #16
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a0e:	bf04      	itt	eq
 8007a10:	0200      	lsleq	r0, r0, #8
 8007a12:	3308      	addeq	r3, #8
 8007a14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a18:	bf04      	itt	eq
 8007a1a:	0100      	lsleq	r0, r0, #4
 8007a1c:	3304      	addeq	r3, #4
 8007a1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a22:	bf04      	itt	eq
 8007a24:	0080      	lsleq	r0, r0, #2
 8007a26:	3302      	addeq	r3, #2
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	db05      	blt.n	8007a38 <__hi0bits+0x38>
 8007a2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a30:	f103 0301 	add.w	r3, r3, #1
 8007a34:	bf08      	it	eq
 8007a36:	2320      	moveq	r3, #32
 8007a38:	4618      	mov	r0, r3
 8007a3a:	4770      	bx	lr
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e7e4      	b.n	8007a0a <__hi0bits+0xa>

08007a40 <__lo0bits>:
 8007a40:	6803      	ldr	r3, [r0, #0]
 8007a42:	f013 0207 	ands.w	r2, r3, #7
 8007a46:	d00c      	beq.n	8007a62 <__lo0bits+0x22>
 8007a48:	07d9      	lsls	r1, r3, #31
 8007a4a:	d422      	bmi.n	8007a92 <__lo0bits+0x52>
 8007a4c:	079a      	lsls	r2, r3, #30
 8007a4e:	bf49      	itett	mi
 8007a50:	085b      	lsrmi	r3, r3, #1
 8007a52:	089b      	lsrpl	r3, r3, #2
 8007a54:	6003      	strmi	r3, [r0, #0]
 8007a56:	2201      	movmi	r2, #1
 8007a58:	bf5c      	itt	pl
 8007a5a:	6003      	strpl	r3, [r0, #0]
 8007a5c:	2202      	movpl	r2, #2
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4770      	bx	lr
 8007a62:	b299      	uxth	r1, r3
 8007a64:	b909      	cbnz	r1, 8007a6a <__lo0bits+0x2a>
 8007a66:	0c1b      	lsrs	r3, r3, #16
 8007a68:	2210      	movs	r2, #16
 8007a6a:	b2d9      	uxtb	r1, r3
 8007a6c:	b909      	cbnz	r1, 8007a72 <__lo0bits+0x32>
 8007a6e:	3208      	adds	r2, #8
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	0719      	lsls	r1, r3, #28
 8007a74:	bf04      	itt	eq
 8007a76:	091b      	lsreq	r3, r3, #4
 8007a78:	3204      	addeq	r2, #4
 8007a7a:	0799      	lsls	r1, r3, #30
 8007a7c:	bf04      	itt	eq
 8007a7e:	089b      	lsreq	r3, r3, #2
 8007a80:	3202      	addeq	r2, #2
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d403      	bmi.n	8007a8e <__lo0bits+0x4e>
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	f102 0201 	add.w	r2, r2, #1
 8007a8c:	d003      	beq.n	8007a96 <__lo0bits+0x56>
 8007a8e:	6003      	str	r3, [r0, #0]
 8007a90:	e7e5      	b.n	8007a5e <__lo0bits+0x1e>
 8007a92:	2200      	movs	r2, #0
 8007a94:	e7e3      	b.n	8007a5e <__lo0bits+0x1e>
 8007a96:	2220      	movs	r2, #32
 8007a98:	e7e1      	b.n	8007a5e <__lo0bits+0x1e>
	...

08007a9c <__i2b>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	f7ff febb 	bl	800781c <_Balloc>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <__i2b+0x1a>
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <__i2b+0x24>)
 8007aac:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <__i2b+0x28>)
 8007aae:	f240 1145 	movw	r1, #325	; 0x145
 8007ab2:	f001 fe29 	bl	8009708 <__assert_func>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	6144      	str	r4, [r0, #20]
 8007aba:	6103      	str	r3, [r0, #16]
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	bf00      	nop
 8007ac0:	0800a48c 	.word	0x0800a48c
 8007ac4:	0800a49d 	.word	0x0800a49d

08007ac8 <__multiply>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4691      	mov	r9, r2
 8007ace:	690a      	ldr	r2, [r1, #16]
 8007ad0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bfb8      	it	lt
 8007ad8:	460b      	movlt	r3, r1
 8007ada:	460c      	mov	r4, r1
 8007adc:	bfbc      	itt	lt
 8007ade:	464c      	movlt	r4, r9
 8007ae0:	4699      	movlt	r9, r3
 8007ae2:	6927      	ldr	r7, [r4, #16]
 8007ae4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	6861      	ldr	r1, [r4, #4]
 8007aec:	eb07 060a 	add.w	r6, r7, sl
 8007af0:	42b3      	cmp	r3, r6
 8007af2:	b085      	sub	sp, #20
 8007af4:	bfb8      	it	lt
 8007af6:	3101      	addlt	r1, #1
 8007af8:	f7ff fe90 	bl	800781c <_Balloc>
 8007afc:	b930      	cbnz	r0, 8007b0c <__multiply+0x44>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <__multiply+0x14c>)
 8007b02:	4845      	ldr	r0, [pc, #276]	; (8007c18 <__multiply+0x150>)
 8007b04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b08:	f001 fdfe 	bl	8009708 <__assert_func>
 8007b0c:	f100 0514 	add.w	r5, r0, #20
 8007b10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b14:	462b      	mov	r3, r5
 8007b16:	2200      	movs	r2, #0
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	d321      	bcc.n	8007b60 <__multiply+0x98>
 8007b1c:	f104 0314 	add.w	r3, r4, #20
 8007b20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b24:	f109 0314 	add.w	r3, r9, #20
 8007b28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	1b3a      	subs	r2, r7, r4
 8007b30:	3a15      	subs	r2, #21
 8007b32:	f022 0203 	bic.w	r2, r2, #3
 8007b36:	3204      	adds	r2, #4
 8007b38:	f104 0115 	add.w	r1, r4, #21
 8007b3c:	428f      	cmp	r7, r1
 8007b3e:	bf38      	it	cc
 8007b40:	2204      	movcc	r2, #4
 8007b42:	9201      	str	r2, [sp, #4]
 8007b44:	9a02      	ldr	r2, [sp, #8]
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d80c      	bhi.n	8007b66 <__multiply+0x9e>
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	dd03      	ble.n	8007b58 <__multiply+0x90>
 8007b50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d05b      	beq.n	8007c10 <__multiply+0x148>
 8007b58:	6106      	str	r6, [r0, #16]
 8007b5a:	b005      	add	sp, #20
 8007b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b60:	f843 2b04 	str.w	r2, [r3], #4
 8007b64:	e7d8      	b.n	8007b18 <__multiply+0x50>
 8007b66:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b6a:	f1ba 0f00 	cmp.w	sl, #0
 8007b6e:	d024      	beq.n	8007bba <__multiply+0xf2>
 8007b70:	f104 0e14 	add.w	lr, r4, #20
 8007b74:	46a9      	mov	r9, r5
 8007b76:	f04f 0c00 	mov.w	ip, #0
 8007b7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b7e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b82:	fa1f fb82 	uxth.w	fp, r2
 8007b86:	b289      	uxth	r1, r1
 8007b88:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b90:	f8d9 2000 	ldr.w	r2, [r9]
 8007b94:	4461      	add	r1, ip
 8007b96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ba8:	4577      	cmp	r7, lr
 8007baa:	f849 1b04 	str.w	r1, [r9], #4
 8007bae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bb2:	d8e2      	bhi.n	8007b7a <__multiply+0xb2>
 8007bb4:	9a01      	ldr	r2, [sp, #4]
 8007bb6:	f845 c002 	str.w	ip, [r5, r2]
 8007bba:	9a03      	ldr	r2, [sp, #12]
 8007bbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	d021      	beq.n	8007c0c <__multiply+0x144>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	f104 0c14 	add.w	ip, r4, #20
 8007bce:	46ae      	mov	lr, r5
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bdc:	fb09 220b 	mla	r2, r9, fp, r2
 8007be0:	4452      	add	r2, sl
 8007be2:	b289      	uxth	r1, r1
 8007be4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007be8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bf4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bf8:	fb09 110a 	mla	r1, r9, sl, r1
 8007bfc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c00:	4567      	cmp	r7, ip
 8007c02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c06:	d8e5      	bhi.n	8007bd4 <__multiply+0x10c>
 8007c08:	9a01      	ldr	r2, [sp, #4]
 8007c0a:	50a9      	str	r1, [r5, r2]
 8007c0c:	3504      	adds	r5, #4
 8007c0e:	e799      	b.n	8007b44 <__multiply+0x7c>
 8007c10:	3e01      	subs	r6, #1
 8007c12:	e79b      	b.n	8007b4c <__multiply+0x84>
 8007c14:	0800a48c 	.word	0x0800a48c
 8007c18:	0800a49d 	.word	0x0800a49d

08007c1c <__pow5mult>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	4615      	mov	r5, r2
 8007c22:	f012 0203 	ands.w	r2, r2, #3
 8007c26:	4606      	mov	r6, r0
 8007c28:	460f      	mov	r7, r1
 8007c2a:	d007      	beq.n	8007c3c <__pow5mult+0x20>
 8007c2c:	4c25      	ldr	r4, [pc, #148]	; (8007cc4 <__pow5mult+0xa8>)
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	2300      	movs	r3, #0
 8007c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c36:	f7ff fe53 	bl	80078e0 <__multadd>
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	10ad      	asrs	r5, r5, #2
 8007c3e:	d03d      	beq.n	8007cbc <__pow5mult+0xa0>
 8007c40:	69f4      	ldr	r4, [r6, #28]
 8007c42:	b97c      	cbnz	r4, 8007c64 <__pow5mult+0x48>
 8007c44:	2010      	movs	r0, #16
 8007c46:	f7ff fd35 	bl	80076b4 <malloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	61f0      	str	r0, [r6, #28]
 8007c4e:	b928      	cbnz	r0, 8007c5c <__pow5mult+0x40>
 8007c50:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <__pow5mult+0xac>)
 8007c52:	481e      	ldr	r0, [pc, #120]	; (8007ccc <__pow5mult+0xb0>)
 8007c54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c58:	f001 fd56 	bl	8009708 <__assert_func>
 8007c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c60:	6004      	str	r4, [r0, #0]
 8007c62:	60c4      	str	r4, [r0, #12]
 8007c64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c6c:	b94c      	cbnz	r4, 8007c82 <__pow5mult+0x66>
 8007c6e:	f240 2171 	movw	r1, #625	; 0x271
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ff12 	bl	8007a9c <__i2b>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c7e:	4604      	mov	r4, r0
 8007c80:	6003      	str	r3, [r0, #0]
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	07eb      	lsls	r3, r5, #31
 8007c88:	d50a      	bpl.n	8007ca0 <__pow5mult+0x84>
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ff1a 	bl	8007ac8 <__multiply>
 8007c94:	4639      	mov	r1, r7
 8007c96:	4680      	mov	r8, r0
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff fdff 	bl	800789c <_Bfree>
 8007c9e:	4647      	mov	r7, r8
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	d00b      	beq.n	8007cbc <__pow5mult+0xa0>
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	b938      	cbnz	r0, 8007cb8 <__pow5mult+0x9c>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4621      	mov	r1, r4
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ff0b 	bl	8007ac8 <__multiply>
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	f8c0 9000 	str.w	r9, [r0]
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e7e4      	b.n	8007c86 <__pow5mult+0x6a>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800a5e8 	.word	0x0800a5e8
 8007cc8:	0800a41d 	.word	0x0800a41d
 8007ccc:	0800a49d 	.word	0x0800a49d

08007cd0 <__lshift>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	6849      	ldr	r1, [r1, #4]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	4691      	mov	r9, r2
 8007ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce8:	f108 0601 	add.w	r6, r8, #1
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	db0b      	blt.n	8007d08 <__lshift+0x38>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fd93 	bl	800781c <_Balloc>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b948      	cbnz	r0, 8007d0e <__lshift+0x3e>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b28      	ldr	r3, [pc, #160]	; (8007da0 <__lshift+0xd0>)
 8007cfe:	4829      	ldr	r0, [pc, #164]	; (8007da4 <__lshift+0xd4>)
 8007d00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d04:	f001 fd00 	bl	8009708 <__assert_func>
 8007d08:	3101      	adds	r1, #1
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	e7ee      	b.n	8007cec <__lshift+0x1c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f100 0114 	add.w	r1, r0, #20
 8007d14:	f100 0210 	add.w	r2, r0, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4553      	cmp	r3, sl
 8007d1c:	db33      	blt.n	8007d86 <__lshift+0xb6>
 8007d1e:	6920      	ldr	r0, [r4, #16]
 8007d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d24:	f104 0314 	add.w	r3, r4, #20
 8007d28:	f019 091f 	ands.w	r9, r9, #31
 8007d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d34:	d02b      	beq.n	8007d8e <__lshift+0xbe>
 8007d36:	f1c9 0e20 	rsb	lr, r9, #32
 8007d3a:	468a      	mov	sl, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	fa00 f009 	lsl.w	r0, r0, r9
 8007d44:	4310      	orrs	r0, r2
 8007d46:	f84a 0b04 	str.w	r0, [sl], #4
 8007d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4e:	459c      	cmp	ip, r3
 8007d50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d54:	d8f3      	bhi.n	8007d3e <__lshift+0x6e>
 8007d56:	ebac 0304 	sub.w	r3, ip, r4
 8007d5a:	3b15      	subs	r3, #21
 8007d5c:	f023 0303 	bic.w	r3, r3, #3
 8007d60:	3304      	adds	r3, #4
 8007d62:	f104 0015 	add.w	r0, r4, #21
 8007d66:	4584      	cmp	ip, r0
 8007d68:	bf38      	it	cc
 8007d6a:	2304      	movcc	r3, #4
 8007d6c:	50ca      	str	r2, [r1, r3]
 8007d6e:	b10a      	cbz	r2, 8007d74 <__lshift+0xa4>
 8007d70:	f108 0602 	add.w	r6, r8, #2
 8007d74:	3e01      	subs	r6, #1
 8007d76:	4638      	mov	r0, r7
 8007d78:	612e      	str	r6, [r5, #16]
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	f7ff fd8e 	bl	800789c <_Bfree>
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	e7c5      	b.n	8007d1a <__lshift+0x4a>
 8007d8e:	3904      	subs	r1, #4
 8007d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d98:	459c      	cmp	ip, r3
 8007d9a:	d8f9      	bhi.n	8007d90 <__lshift+0xc0>
 8007d9c:	e7ea      	b.n	8007d74 <__lshift+0xa4>
 8007d9e:	bf00      	nop
 8007da0:	0800a48c 	.word	0x0800a48c
 8007da4:	0800a49d 	.word	0x0800a49d

08007da8 <__mcmp>:
 8007da8:	b530      	push	{r4, r5, lr}
 8007daa:	6902      	ldr	r2, [r0, #16]
 8007dac:	690c      	ldr	r4, [r1, #16]
 8007dae:	1b12      	subs	r2, r2, r4
 8007db0:	d10e      	bne.n	8007dd0 <__mcmp+0x28>
 8007db2:	f100 0314 	add.w	r3, r0, #20
 8007db6:	3114      	adds	r1, #20
 8007db8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007dbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007dc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007dc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dc8:	42a5      	cmp	r5, r4
 8007dca:	d003      	beq.n	8007dd4 <__mcmp+0x2c>
 8007dcc:	d305      	bcc.n	8007dda <__mcmp+0x32>
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	bd30      	pop	{r4, r5, pc}
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d3f3      	bcc.n	8007dc0 <__mcmp+0x18>
 8007dd8:	e7fa      	b.n	8007dd0 <__mcmp+0x28>
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	e7f7      	b.n	8007dd0 <__mcmp+0x28>

08007de0 <__mdiff>:
 8007de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	460c      	mov	r4, r1
 8007de6:	4606      	mov	r6, r0
 8007de8:	4611      	mov	r1, r2
 8007dea:	4620      	mov	r0, r4
 8007dec:	4690      	mov	r8, r2
 8007dee:	f7ff ffdb 	bl	8007da8 <__mcmp>
 8007df2:	1e05      	subs	r5, r0, #0
 8007df4:	d110      	bne.n	8007e18 <__mdiff+0x38>
 8007df6:	4629      	mov	r1, r5
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff fd0f 	bl	800781c <_Balloc>
 8007dfe:	b930      	cbnz	r0, 8007e0e <__mdiff+0x2e>
 8007e00:	4b3a      	ldr	r3, [pc, #232]	; (8007eec <__mdiff+0x10c>)
 8007e02:	4602      	mov	r2, r0
 8007e04:	f240 2137 	movw	r1, #567	; 0x237
 8007e08:	4839      	ldr	r0, [pc, #228]	; (8007ef0 <__mdiff+0x110>)
 8007e0a:	f001 fc7d 	bl	8009708 <__assert_func>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	bfa4      	itt	ge
 8007e1a:	4643      	movge	r3, r8
 8007e1c:	46a0      	movge	r8, r4
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e24:	bfa6      	itte	ge
 8007e26:	461c      	movge	r4, r3
 8007e28:	2500      	movge	r5, #0
 8007e2a:	2501      	movlt	r5, #1
 8007e2c:	f7ff fcf6 	bl	800781c <_Balloc>
 8007e30:	b920      	cbnz	r0, 8007e3c <__mdiff+0x5c>
 8007e32:	4b2e      	ldr	r3, [pc, #184]	; (8007eec <__mdiff+0x10c>)
 8007e34:	4602      	mov	r2, r0
 8007e36:	f240 2145 	movw	r1, #581	; 0x245
 8007e3a:	e7e5      	b.n	8007e08 <__mdiff+0x28>
 8007e3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e40:	6926      	ldr	r6, [r4, #16]
 8007e42:	60c5      	str	r5, [r0, #12]
 8007e44:	f104 0914 	add.w	r9, r4, #20
 8007e48:	f108 0514 	add.w	r5, r8, #20
 8007e4c:	f100 0e14 	add.w	lr, r0, #20
 8007e50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e58:	f108 0210 	add.w	r2, r8, #16
 8007e5c:	46f2      	mov	sl, lr
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e68:	fa11 f88b 	uxtah	r8, r1, fp
 8007e6c:	b299      	uxth	r1, r3
 8007e6e:	0c1b      	lsrs	r3, r3, #16
 8007e70:	eba8 0801 	sub.w	r8, r8, r1
 8007e74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e7c:	fa1f f888 	uxth.w	r8, r8
 8007e80:	1419      	asrs	r1, r3, #16
 8007e82:	454e      	cmp	r6, r9
 8007e84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e88:	f84a 3b04 	str.w	r3, [sl], #4
 8007e8c:	d8e8      	bhi.n	8007e60 <__mdiff+0x80>
 8007e8e:	1b33      	subs	r3, r6, r4
 8007e90:	3b15      	subs	r3, #21
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	3304      	adds	r3, #4
 8007e98:	3415      	adds	r4, #21
 8007e9a:	42a6      	cmp	r6, r4
 8007e9c:	bf38      	it	cc
 8007e9e:	2304      	movcc	r3, #4
 8007ea0:	441d      	add	r5, r3
 8007ea2:	4473      	add	r3, lr
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	462e      	mov	r6, r5
 8007ea8:	4566      	cmp	r6, ip
 8007eaa:	d30e      	bcc.n	8007eca <__mdiff+0xea>
 8007eac:	f10c 0203 	add.w	r2, ip, #3
 8007eb0:	1b52      	subs	r2, r2, r5
 8007eb2:	f022 0203 	bic.w	r2, r2, #3
 8007eb6:	3d03      	subs	r5, #3
 8007eb8:	45ac      	cmp	ip, r5
 8007eba:	bf38      	it	cc
 8007ebc:	2200      	movcc	r2, #0
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ec4:	b17a      	cbz	r2, 8007ee6 <__mdiff+0x106>
 8007ec6:	6107      	str	r7, [r0, #16]
 8007ec8:	e7a4      	b.n	8007e14 <__mdiff+0x34>
 8007eca:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ece:	fa11 f288 	uxtah	r2, r1, r8
 8007ed2:	1414      	asrs	r4, r2, #16
 8007ed4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ede:	f84e 2b04 	str.w	r2, [lr], #4
 8007ee2:	1421      	asrs	r1, r4, #16
 8007ee4:	e7e0      	b.n	8007ea8 <__mdiff+0xc8>
 8007ee6:	3f01      	subs	r7, #1
 8007ee8:	e7ea      	b.n	8007ec0 <__mdiff+0xe0>
 8007eea:	bf00      	nop
 8007eec:	0800a48c 	.word	0x0800a48c
 8007ef0:	0800a49d 	.word	0x0800a49d

08007ef4 <__ulp>:
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	ed8d 0b00 	vstr	d0, [sp]
 8007efa:	9a01      	ldr	r2, [sp, #4]
 8007efc:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <__ulp+0x48>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc08      	bgt.n	8007f1a <__ulp+0x26>
 8007f08:	425b      	negs	r3, r3
 8007f0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007f0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f12:	da04      	bge.n	8007f1e <__ulp+0x2a>
 8007f14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f18:	4113      	asrs	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	e008      	b.n	8007f30 <__ulp+0x3c>
 8007f1e:	f1a2 0314 	sub.w	r3, r2, #20
 8007f22:	2b1e      	cmp	r3, #30
 8007f24:	bfda      	itte	le
 8007f26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007f2a:	40da      	lsrle	r2, r3
 8007f2c:	2201      	movgt	r2, #1
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	ec41 0b10 	vmov	d0, r0, r1
 8007f38:	b002      	add	sp, #8
 8007f3a:	4770      	bx	lr
 8007f3c:	7ff00000 	.word	0x7ff00000

08007f40 <__b2d>:
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	6906      	ldr	r6, [r0, #16]
 8007f46:	f100 0814 	add.w	r8, r0, #20
 8007f4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f4e:	1f37      	subs	r7, r6, #4
 8007f50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7ff fd53 	bl	8007a00 <__hi0bits>
 8007f5a:	f1c0 0320 	rsb	r3, r0, #32
 8007f5e:	280a      	cmp	r0, #10
 8007f60:	600b      	str	r3, [r1, #0]
 8007f62:	491b      	ldr	r1, [pc, #108]	; (8007fd0 <__b2d+0x90>)
 8007f64:	dc15      	bgt.n	8007f92 <__b2d+0x52>
 8007f66:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f6e:	45b8      	cmp	r8, r7
 8007f70:	ea43 0501 	orr.w	r5, r3, r1
 8007f74:	bf34      	ite	cc
 8007f76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f7a:	2300      	movcs	r3, #0
 8007f7c:	3015      	adds	r0, #21
 8007f7e:	fa02 f000 	lsl.w	r0, r2, r0
 8007f82:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f86:	4303      	orrs	r3, r0
 8007f88:	461c      	mov	r4, r3
 8007f8a:	ec45 4b10 	vmov	d0, r4, r5
 8007f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f92:	45b8      	cmp	r8, r7
 8007f94:	bf3a      	itte	cc
 8007f96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f9e:	2300      	movcs	r3, #0
 8007fa0:	380b      	subs	r0, #11
 8007fa2:	d012      	beq.n	8007fca <__b2d+0x8a>
 8007fa4:	f1c0 0120 	rsb	r1, r0, #32
 8007fa8:	fa23 f401 	lsr.w	r4, r3, r1
 8007fac:	4082      	lsls	r2, r0
 8007fae:	4322      	orrs	r2, r4
 8007fb0:	4547      	cmp	r7, r8
 8007fb2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007fb6:	bf8c      	ite	hi
 8007fb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007fbc:	2200      	movls	r2, #0
 8007fbe:	4083      	lsls	r3, r0
 8007fc0:	40ca      	lsrs	r2, r1
 8007fc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	e7de      	b.n	8007f88 <__b2d+0x48>
 8007fca:	ea42 0501 	orr.w	r5, r2, r1
 8007fce:	e7db      	b.n	8007f88 <__b2d+0x48>
 8007fd0:	3ff00000 	.word	0x3ff00000

08007fd4 <__d2b>:
 8007fd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	460f      	mov	r7, r1
 8007fda:	2101      	movs	r1, #1
 8007fdc:	ec59 8b10 	vmov	r8, r9, d0
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	f7ff fc1b 	bl	800781c <_Balloc>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	b930      	cbnz	r0, 8007ff8 <__d2b+0x24>
 8007fea:	4602      	mov	r2, r0
 8007fec:	4b24      	ldr	r3, [pc, #144]	; (8008080 <__d2b+0xac>)
 8007fee:	4825      	ldr	r0, [pc, #148]	; (8008084 <__d2b+0xb0>)
 8007ff0:	f240 310f 	movw	r1, #783	; 0x30f
 8007ff4:	f001 fb88 	bl	8009708 <__assert_func>
 8007ff8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008000:	bb2d      	cbnz	r5, 800804e <__d2b+0x7a>
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f1b8 0300 	subs.w	r3, r8, #0
 8008008:	d026      	beq.n	8008058 <__d2b+0x84>
 800800a:	4668      	mov	r0, sp
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	f7ff fd17 	bl	8007a40 <__lo0bits>
 8008012:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008016:	b1e8      	cbz	r0, 8008054 <__d2b+0x80>
 8008018:	f1c0 0320 	rsb	r3, r0, #32
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	430b      	orrs	r3, r1
 8008022:	40c2      	lsrs	r2, r0
 8008024:	6163      	str	r3, [r4, #20]
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	61a3      	str	r3, [r4, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2202      	movne	r2, #2
 8008032:	2201      	moveq	r2, #1
 8008034:	6122      	str	r2, [r4, #16]
 8008036:	b1bd      	cbz	r5, 8008068 <__d2b+0x94>
 8008038:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800803c:	4405      	add	r5, r0
 800803e:	603d      	str	r5, [r7, #0]
 8008040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008044:	6030      	str	r0, [r6, #0]
 8008046:	4620      	mov	r0, r4
 8008048:	b003      	add	sp, #12
 800804a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800804e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008052:	e7d6      	b.n	8008002 <__d2b+0x2e>
 8008054:	6161      	str	r1, [r4, #20]
 8008056:	e7e7      	b.n	8008028 <__d2b+0x54>
 8008058:	a801      	add	r0, sp, #4
 800805a:	f7ff fcf1 	bl	8007a40 <__lo0bits>
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	6163      	str	r3, [r4, #20]
 8008062:	3020      	adds	r0, #32
 8008064:	2201      	movs	r2, #1
 8008066:	e7e5      	b.n	8008034 <__d2b+0x60>
 8008068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800806c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008070:	6038      	str	r0, [r7, #0]
 8008072:	6918      	ldr	r0, [r3, #16]
 8008074:	f7ff fcc4 	bl	8007a00 <__hi0bits>
 8008078:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800807c:	e7e2      	b.n	8008044 <__d2b+0x70>
 800807e:	bf00      	nop
 8008080:	0800a48c 	.word	0x0800a48c
 8008084:	0800a49d 	.word	0x0800a49d

08008088 <__ratio>:
 8008088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4688      	mov	r8, r1
 800808e:	4669      	mov	r1, sp
 8008090:	4681      	mov	r9, r0
 8008092:	f7ff ff55 	bl	8007f40 <__b2d>
 8008096:	a901      	add	r1, sp, #4
 8008098:	4640      	mov	r0, r8
 800809a:	ec55 4b10 	vmov	r4, r5, d0
 800809e:	f7ff ff4f 	bl	8007f40 <__b2d>
 80080a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080aa:	eba3 0c02 	sub.w	ip, r3, r2
 80080ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080b8:	ec51 0b10 	vmov	r0, r1, d0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfd6      	itet	le
 80080c0:	460a      	movle	r2, r1
 80080c2:	462a      	movgt	r2, r5
 80080c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080c8:	468b      	mov	fp, r1
 80080ca:	462f      	mov	r7, r5
 80080cc:	bfd4      	ite	le
 80080ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080d6:	4620      	mov	r0, r4
 80080d8:	ee10 2a10 	vmov	r2, s0
 80080dc:	465b      	mov	r3, fp
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fbb4 	bl	800084c <__aeabi_ddiv>
 80080e4:	ec41 0b10 	vmov	d0, r0, r1
 80080e8:	b003      	add	sp, #12
 80080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080ee <__copybits>:
 80080ee:	3901      	subs	r1, #1
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	1149      	asrs	r1, r1, #5
 80080f4:	6914      	ldr	r4, [r2, #16]
 80080f6:	3101      	adds	r1, #1
 80080f8:	f102 0314 	add.w	r3, r2, #20
 80080fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008104:	1f05      	subs	r5, r0, #4
 8008106:	42a3      	cmp	r3, r4
 8008108:	d30c      	bcc.n	8008124 <__copybits+0x36>
 800810a:	1aa3      	subs	r3, r4, r2
 800810c:	3b11      	subs	r3, #17
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	3211      	adds	r2, #17
 8008114:	42a2      	cmp	r2, r4
 8008116:	bf88      	it	hi
 8008118:	2300      	movhi	r3, #0
 800811a:	4418      	add	r0, r3
 800811c:	2300      	movs	r3, #0
 800811e:	4288      	cmp	r0, r1
 8008120:	d305      	bcc.n	800812e <__copybits+0x40>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f853 6b04 	ldr.w	r6, [r3], #4
 8008128:	f845 6f04 	str.w	r6, [r5, #4]!
 800812c:	e7eb      	b.n	8008106 <__copybits+0x18>
 800812e:	f840 3b04 	str.w	r3, [r0], #4
 8008132:	e7f4      	b.n	800811e <__copybits+0x30>

08008134 <__any_on>:
 8008134:	f100 0214 	add.w	r2, r0, #20
 8008138:	6900      	ldr	r0, [r0, #16]
 800813a:	114b      	asrs	r3, r1, #5
 800813c:	4298      	cmp	r0, r3
 800813e:	b510      	push	{r4, lr}
 8008140:	db11      	blt.n	8008166 <__any_on+0x32>
 8008142:	dd0a      	ble.n	800815a <__any_on+0x26>
 8008144:	f011 011f 	ands.w	r1, r1, #31
 8008148:	d007      	beq.n	800815a <__any_on+0x26>
 800814a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800814e:	fa24 f001 	lsr.w	r0, r4, r1
 8008152:	fa00 f101 	lsl.w	r1, r0, r1
 8008156:	428c      	cmp	r4, r1
 8008158:	d10b      	bne.n	8008172 <__any_on+0x3e>
 800815a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800815e:	4293      	cmp	r3, r2
 8008160:	d803      	bhi.n	800816a <__any_on+0x36>
 8008162:	2000      	movs	r0, #0
 8008164:	bd10      	pop	{r4, pc}
 8008166:	4603      	mov	r3, r0
 8008168:	e7f7      	b.n	800815a <__any_on+0x26>
 800816a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800816e:	2900      	cmp	r1, #0
 8008170:	d0f5      	beq.n	800815e <__any_on+0x2a>
 8008172:	2001      	movs	r0, #1
 8008174:	e7f6      	b.n	8008164 <__any_on+0x30>

08008176 <sulp>:
 8008176:	b570      	push	{r4, r5, r6, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	ec45 4b10 	vmov	d0, r4, r5
 8008180:	4616      	mov	r6, r2
 8008182:	f7ff feb7 	bl	8007ef4 <__ulp>
 8008186:	ec51 0b10 	vmov	r0, r1, d0
 800818a:	b17e      	cbz	r6, 80081ac <sulp+0x36>
 800818c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008190:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd09      	ble.n	80081ac <sulp+0x36>
 8008198:	051b      	lsls	r3, r3, #20
 800819a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800819e:	2400      	movs	r4, #0
 80081a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	f7f8 fa26 	bl	80005f8 <__aeabi_dmul>
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080081b0 <_strtod_l>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	ed2d 8b02 	vpush	{d8}
 80081b8:	b09b      	sub	sp, #108	; 0x6c
 80081ba:	4604      	mov	r4, r0
 80081bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80081be:	2200      	movs	r2, #0
 80081c0:	9216      	str	r2, [sp, #88]	; 0x58
 80081c2:	460d      	mov	r5, r1
 80081c4:	f04f 0800 	mov.w	r8, #0
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	460a      	mov	r2, r1
 80081ce:	9215      	str	r2, [sp, #84]	; 0x54
 80081d0:	7811      	ldrb	r1, [r2, #0]
 80081d2:	292b      	cmp	r1, #43	; 0x2b
 80081d4:	d04c      	beq.n	8008270 <_strtod_l+0xc0>
 80081d6:	d83a      	bhi.n	800824e <_strtod_l+0x9e>
 80081d8:	290d      	cmp	r1, #13
 80081da:	d834      	bhi.n	8008246 <_strtod_l+0x96>
 80081dc:	2908      	cmp	r1, #8
 80081de:	d834      	bhi.n	800824a <_strtod_l+0x9a>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d03d      	beq.n	8008260 <_strtod_l+0xb0>
 80081e4:	2200      	movs	r2, #0
 80081e6:	920a      	str	r2, [sp, #40]	; 0x28
 80081e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80081ea:	7832      	ldrb	r2, [r6, #0]
 80081ec:	2a30      	cmp	r2, #48	; 0x30
 80081ee:	f040 80b4 	bne.w	800835a <_strtod_l+0x1aa>
 80081f2:	7872      	ldrb	r2, [r6, #1]
 80081f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80081f8:	2a58      	cmp	r2, #88	; 0x58
 80081fa:	d170      	bne.n	80082de <_strtod_l+0x12e>
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	ab16      	add	r3, sp, #88	; 0x58
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4a8e      	ldr	r2, [pc, #568]	; (8008440 <_strtod_l+0x290>)
 8008208:	ab17      	add	r3, sp, #92	; 0x5c
 800820a:	a915      	add	r1, sp, #84	; 0x54
 800820c:	4620      	mov	r0, r4
 800820e:	f001 fb17 	bl	8009840 <__gethex>
 8008212:	f010 070f 	ands.w	r7, r0, #15
 8008216:	4605      	mov	r5, r0
 8008218:	d005      	beq.n	8008226 <_strtod_l+0x76>
 800821a:	2f06      	cmp	r7, #6
 800821c:	d12a      	bne.n	8008274 <_strtod_l+0xc4>
 800821e:	3601      	adds	r6, #1
 8008220:	2300      	movs	r3, #0
 8008222:	9615      	str	r6, [sp, #84]	; 0x54
 8008224:	930a      	str	r3, [sp, #40]	; 0x28
 8008226:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008228:	2b00      	cmp	r3, #0
 800822a:	f040 857f 	bne.w	8008d2c <_strtod_l+0xb7c>
 800822e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008230:	b1db      	cbz	r3, 800826a <_strtod_l+0xba>
 8008232:	4642      	mov	r2, r8
 8008234:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008238:	ec43 2b10 	vmov	d0, r2, r3
 800823c:	b01b      	add	sp, #108	; 0x6c
 800823e:	ecbd 8b02 	vpop	{d8}
 8008242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	2920      	cmp	r1, #32
 8008248:	d1cc      	bne.n	80081e4 <_strtod_l+0x34>
 800824a:	3201      	adds	r2, #1
 800824c:	e7bf      	b.n	80081ce <_strtod_l+0x1e>
 800824e:	292d      	cmp	r1, #45	; 0x2d
 8008250:	d1c8      	bne.n	80081e4 <_strtod_l+0x34>
 8008252:	2101      	movs	r1, #1
 8008254:	910a      	str	r1, [sp, #40]	; 0x28
 8008256:	1c51      	adds	r1, r2, #1
 8008258:	9115      	str	r1, [sp, #84]	; 0x54
 800825a:	7852      	ldrb	r2, [r2, #1]
 800825c:	2a00      	cmp	r2, #0
 800825e:	d1c3      	bne.n	80081e8 <_strtod_l+0x38>
 8008260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008262:	9515      	str	r5, [sp, #84]	; 0x54
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 855f 	bne.w	8008d28 <_strtod_l+0xb78>
 800826a:	4642      	mov	r2, r8
 800826c:	464b      	mov	r3, r9
 800826e:	e7e3      	b.n	8008238 <_strtod_l+0x88>
 8008270:	2100      	movs	r1, #0
 8008272:	e7ef      	b.n	8008254 <_strtod_l+0xa4>
 8008274:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008276:	b13a      	cbz	r2, 8008288 <_strtod_l+0xd8>
 8008278:	2135      	movs	r1, #53	; 0x35
 800827a:	a818      	add	r0, sp, #96	; 0x60
 800827c:	f7ff ff37 	bl	80080ee <__copybits>
 8008280:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff fb0a 	bl	800789c <_Bfree>
 8008288:	3f01      	subs	r7, #1
 800828a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800828c:	2f04      	cmp	r7, #4
 800828e:	d806      	bhi.n	800829e <_strtod_l+0xee>
 8008290:	e8df f007 	tbb	[pc, r7]
 8008294:	201d0314 	.word	0x201d0314
 8008298:	14          	.byte	0x14
 8008299:	00          	.byte	0x00
 800829a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800829e:	05e9      	lsls	r1, r5, #23
 80082a0:	bf48      	it	mi
 80082a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80082a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082aa:	0d1b      	lsrs	r3, r3, #20
 80082ac:	051b      	lsls	r3, r3, #20
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1b9      	bne.n	8008226 <_strtod_l+0x76>
 80082b2:	f7fe fb03 	bl	80068bc <__errno>
 80082b6:	2322      	movs	r3, #34	; 0x22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	e7b4      	b.n	8008226 <_strtod_l+0x76>
 80082bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80082c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80082cc:	e7e7      	b.n	800829e <_strtod_l+0xee>
 80082ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008448 <_strtod_l+0x298>
 80082d2:	e7e4      	b.n	800829e <_strtod_l+0xee>
 80082d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80082d8:	f04f 38ff 	mov.w	r8, #4294967295
 80082dc:	e7df      	b.n	800829e <_strtod_l+0xee>
 80082de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	9215      	str	r2, [sp, #84]	; 0x54
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b30      	cmp	r3, #48	; 0x30
 80082e8:	d0f9      	beq.n	80082de <_strtod_l+0x12e>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d09b      	beq.n	8008226 <_strtod_l+0x76>
 80082ee:	2301      	movs	r3, #1
 80082f0:	f04f 0a00 	mov.w	sl, #0
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082fe:	46d3      	mov	fp, sl
 8008300:	220a      	movs	r2, #10
 8008302:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008304:	7806      	ldrb	r6, [r0, #0]
 8008306:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800830a:	b2d9      	uxtb	r1, r3
 800830c:	2909      	cmp	r1, #9
 800830e:	d926      	bls.n	800835e <_strtod_l+0x1ae>
 8008310:	494c      	ldr	r1, [pc, #304]	; (8008444 <_strtod_l+0x294>)
 8008312:	2201      	movs	r2, #1
 8008314:	f001 f9c0 	bl	8009698 <strncmp>
 8008318:	2800      	cmp	r0, #0
 800831a:	d030      	beq.n	800837e <_strtod_l+0x1ce>
 800831c:	2000      	movs	r0, #0
 800831e:	4632      	mov	r2, r6
 8008320:	9005      	str	r0, [sp, #20]
 8008322:	465e      	mov	r6, fp
 8008324:	4603      	mov	r3, r0
 8008326:	2a65      	cmp	r2, #101	; 0x65
 8008328:	d001      	beq.n	800832e <_strtod_l+0x17e>
 800832a:	2a45      	cmp	r2, #69	; 0x45
 800832c:	d113      	bne.n	8008356 <_strtod_l+0x1a6>
 800832e:	b91e      	cbnz	r6, 8008338 <_strtod_l+0x188>
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	4302      	orrs	r2, r0
 8008334:	d094      	beq.n	8008260 <_strtod_l+0xb0>
 8008336:	2600      	movs	r6, #0
 8008338:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800833a:	1c6a      	adds	r2, r5, #1
 800833c:	9215      	str	r2, [sp, #84]	; 0x54
 800833e:	786a      	ldrb	r2, [r5, #1]
 8008340:	2a2b      	cmp	r2, #43	; 0x2b
 8008342:	d074      	beq.n	800842e <_strtod_l+0x27e>
 8008344:	2a2d      	cmp	r2, #45	; 0x2d
 8008346:	d078      	beq.n	800843a <_strtod_l+0x28a>
 8008348:	f04f 0c00 	mov.w	ip, #0
 800834c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008350:	2909      	cmp	r1, #9
 8008352:	d97f      	bls.n	8008454 <_strtod_l+0x2a4>
 8008354:	9515      	str	r5, [sp, #84]	; 0x54
 8008356:	2700      	movs	r7, #0
 8008358:	e09e      	b.n	8008498 <_strtod_l+0x2e8>
 800835a:	2300      	movs	r3, #0
 800835c:	e7c8      	b.n	80082f0 <_strtod_l+0x140>
 800835e:	f1bb 0f08 	cmp.w	fp, #8
 8008362:	bfd8      	it	le
 8008364:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008366:	f100 0001 	add.w	r0, r0, #1
 800836a:	bfda      	itte	le
 800836c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008370:	9309      	strle	r3, [sp, #36]	; 0x24
 8008372:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008376:	f10b 0b01 	add.w	fp, fp, #1
 800837a:	9015      	str	r0, [sp, #84]	; 0x54
 800837c:	e7c1      	b.n	8008302 <_strtod_l+0x152>
 800837e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	9215      	str	r2, [sp, #84]	; 0x54
 8008384:	785a      	ldrb	r2, [r3, #1]
 8008386:	f1bb 0f00 	cmp.w	fp, #0
 800838a:	d037      	beq.n	80083fc <_strtod_l+0x24c>
 800838c:	9005      	str	r0, [sp, #20]
 800838e:	465e      	mov	r6, fp
 8008390:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008394:	2b09      	cmp	r3, #9
 8008396:	d912      	bls.n	80083be <_strtod_l+0x20e>
 8008398:	2301      	movs	r3, #1
 800839a:	e7c4      	b.n	8008326 <_strtod_l+0x176>
 800839c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	9215      	str	r2, [sp, #84]	; 0x54
 80083a2:	785a      	ldrb	r2, [r3, #1]
 80083a4:	3001      	adds	r0, #1
 80083a6:	2a30      	cmp	r2, #48	; 0x30
 80083a8:	d0f8      	beq.n	800839c <_strtod_l+0x1ec>
 80083aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	f200 84c1 	bhi.w	8008d36 <_strtod_l+0xb86>
 80083b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b6:	9005      	str	r0, [sp, #20]
 80083b8:	2000      	movs	r0, #0
 80083ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80083bc:	4606      	mov	r6, r0
 80083be:	3a30      	subs	r2, #48	; 0x30
 80083c0:	f100 0301 	add.w	r3, r0, #1
 80083c4:	d014      	beq.n	80083f0 <_strtod_l+0x240>
 80083c6:	9905      	ldr	r1, [sp, #20]
 80083c8:	4419      	add	r1, r3
 80083ca:	9105      	str	r1, [sp, #20]
 80083cc:	4633      	mov	r3, r6
 80083ce:	eb00 0c06 	add.w	ip, r0, r6
 80083d2:	210a      	movs	r1, #10
 80083d4:	4563      	cmp	r3, ip
 80083d6:	d113      	bne.n	8008400 <_strtod_l+0x250>
 80083d8:	1833      	adds	r3, r6, r0
 80083da:	2b08      	cmp	r3, #8
 80083dc:	f106 0601 	add.w	r6, r6, #1
 80083e0:	4406      	add	r6, r0
 80083e2:	dc1a      	bgt.n	800841a <_strtod_l+0x26a>
 80083e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e6:	230a      	movs	r3, #10
 80083e8:	fb03 2301 	mla	r3, r3, r1, r2
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	2300      	movs	r3, #0
 80083f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083f2:	1c51      	adds	r1, r2, #1
 80083f4:	9115      	str	r1, [sp, #84]	; 0x54
 80083f6:	7852      	ldrb	r2, [r2, #1]
 80083f8:	4618      	mov	r0, r3
 80083fa:	e7c9      	b.n	8008390 <_strtod_l+0x1e0>
 80083fc:	4658      	mov	r0, fp
 80083fe:	e7d2      	b.n	80083a6 <_strtod_l+0x1f6>
 8008400:	2b08      	cmp	r3, #8
 8008402:	f103 0301 	add.w	r3, r3, #1
 8008406:	dc03      	bgt.n	8008410 <_strtod_l+0x260>
 8008408:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800840a:	434f      	muls	r7, r1
 800840c:	9709      	str	r7, [sp, #36]	; 0x24
 800840e:	e7e1      	b.n	80083d4 <_strtod_l+0x224>
 8008410:	2b10      	cmp	r3, #16
 8008412:	bfd8      	it	le
 8008414:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008418:	e7dc      	b.n	80083d4 <_strtod_l+0x224>
 800841a:	2e10      	cmp	r6, #16
 800841c:	bfdc      	itt	le
 800841e:	230a      	movle	r3, #10
 8008420:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008424:	e7e3      	b.n	80083ee <_strtod_l+0x23e>
 8008426:	2300      	movs	r3, #0
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	2301      	movs	r3, #1
 800842c:	e780      	b.n	8008330 <_strtod_l+0x180>
 800842e:	f04f 0c00 	mov.w	ip, #0
 8008432:	1caa      	adds	r2, r5, #2
 8008434:	9215      	str	r2, [sp, #84]	; 0x54
 8008436:	78aa      	ldrb	r2, [r5, #2]
 8008438:	e788      	b.n	800834c <_strtod_l+0x19c>
 800843a:	f04f 0c01 	mov.w	ip, #1
 800843e:	e7f8      	b.n	8008432 <_strtod_l+0x282>
 8008440:	0800a5f8 	.word	0x0800a5f8
 8008444:	0800a5f4 	.word	0x0800a5f4
 8008448:	7ff00000 	.word	0x7ff00000
 800844c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800844e:	1c51      	adds	r1, r2, #1
 8008450:	9115      	str	r1, [sp, #84]	; 0x54
 8008452:	7852      	ldrb	r2, [r2, #1]
 8008454:	2a30      	cmp	r2, #48	; 0x30
 8008456:	d0f9      	beq.n	800844c <_strtod_l+0x29c>
 8008458:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800845c:	2908      	cmp	r1, #8
 800845e:	f63f af7a 	bhi.w	8008356 <_strtod_l+0x1a6>
 8008462:	3a30      	subs	r2, #48	; 0x30
 8008464:	9208      	str	r2, [sp, #32]
 8008466:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008468:	920c      	str	r2, [sp, #48]	; 0x30
 800846a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800846c:	1c57      	adds	r7, r2, #1
 800846e:	9715      	str	r7, [sp, #84]	; 0x54
 8008470:	7852      	ldrb	r2, [r2, #1]
 8008472:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008476:	f1be 0f09 	cmp.w	lr, #9
 800847a:	d938      	bls.n	80084ee <_strtod_l+0x33e>
 800847c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800847e:	1a7f      	subs	r7, r7, r1
 8008480:	2f08      	cmp	r7, #8
 8008482:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008486:	dc03      	bgt.n	8008490 <_strtod_l+0x2e0>
 8008488:	9908      	ldr	r1, [sp, #32]
 800848a:	428f      	cmp	r7, r1
 800848c:	bfa8      	it	ge
 800848e:	460f      	movge	r7, r1
 8008490:	f1bc 0f00 	cmp.w	ip, #0
 8008494:	d000      	beq.n	8008498 <_strtod_l+0x2e8>
 8008496:	427f      	negs	r7, r7
 8008498:	2e00      	cmp	r6, #0
 800849a:	d14f      	bne.n	800853c <_strtod_l+0x38c>
 800849c:	9904      	ldr	r1, [sp, #16]
 800849e:	4301      	orrs	r1, r0
 80084a0:	f47f aec1 	bne.w	8008226 <_strtod_l+0x76>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f47f aedb 	bne.w	8008260 <_strtod_l+0xb0>
 80084aa:	2a69      	cmp	r2, #105	; 0x69
 80084ac:	d029      	beq.n	8008502 <_strtod_l+0x352>
 80084ae:	dc26      	bgt.n	80084fe <_strtod_l+0x34e>
 80084b0:	2a49      	cmp	r2, #73	; 0x49
 80084b2:	d026      	beq.n	8008502 <_strtod_l+0x352>
 80084b4:	2a4e      	cmp	r2, #78	; 0x4e
 80084b6:	f47f aed3 	bne.w	8008260 <_strtod_l+0xb0>
 80084ba:	499b      	ldr	r1, [pc, #620]	; (8008728 <_strtod_l+0x578>)
 80084bc:	a815      	add	r0, sp, #84	; 0x54
 80084be:	f001 fbff 	bl	8009cc0 <__match>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f43f aecc 	beq.w	8008260 <_strtod_l+0xb0>
 80084c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b28      	cmp	r3, #40	; 0x28
 80084ce:	d12f      	bne.n	8008530 <_strtod_l+0x380>
 80084d0:	4996      	ldr	r1, [pc, #600]	; (800872c <_strtod_l+0x57c>)
 80084d2:	aa18      	add	r2, sp, #96	; 0x60
 80084d4:	a815      	add	r0, sp, #84	; 0x54
 80084d6:	f001 fc07 	bl	8009ce8 <__hexnan>
 80084da:	2805      	cmp	r0, #5
 80084dc:	d128      	bne.n	8008530 <_strtod_l+0x380>
 80084de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80084e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80084ec:	e69b      	b.n	8008226 <_strtod_l+0x76>
 80084ee:	9f08      	ldr	r7, [sp, #32]
 80084f0:	210a      	movs	r1, #10
 80084f2:	fb01 2107 	mla	r1, r1, r7, r2
 80084f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80084fa:	9208      	str	r2, [sp, #32]
 80084fc:	e7b5      	b.n	800846a <_strtod_l+0x2ba>
 80084fe:	2a6e      	cmp	r2, #110	; 0x6e
 8008500:	e7d9      	b.n	80084b6 <_strtod_l+0x306>
 8008502:	498b      	ldr	r1, [pc, #556]	; (8008730 <_strtod_l+0x580>)
 8008504:	a815      	add	r0, sp, #84	; 0x54
 8008506:	f001 fbdb 	bl	8009cc0 <__match>
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f aea8 	beq.w	8008260 <_strtod_l+0xb0>
 8008510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008512:	4988      	ldr	r1, [pc, #544]	; (8008734 <_strtod_l+0x584>)
 8008514:	3b01      	subs	r3, #1
 8008516:	a815      	add	r0, sp, #84	; 0x54
 8008518:	9315      	str	r3, [sp, #84]	; 0x54
 800851a:	f001 fbd1 	bl	8009cc0 <__match>
 800851e:	b910      	cbnz	r0, 8008526 <_strtod_l+0x376>
 8008520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008522:	3301      	adds	r3, #1
 8008524:	9315      	str	r3, [sp, #84]	; 0x54
 8008526:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008744 <_strtod_l+0x594>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	e67a      	b.n	8008226 <_strtod_l+0x76>
 8008530:	4881      	ldr	r0, [pc, #516]	; (8008738 <_strtod_l+0x588>)
 8008532:	f001 f8e1 	bl	80096f8 <nan>
 8008536:	ec59 8b10 	vmov	r8, r9, d0
 800853a:	e674      	b.n	8008226 <_strtod_l+0x76>
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008540:	1afb      	subs	r3, r7, r3
 8008542:	f1bb 0f00 	cmp.w	fp, #0
 8008546:	bf08      	it	eq
 8008548:	46b3      	moveq	fp, r6
 800854a:	2e10      	cmp	r6, #16
 800854c:	9308      	str	r3, [sp, #32]
 800854e:	4635      	mov	r5, r6
 8008550:	bfa8      	it	ge
 8008552:	2510      	movge	r5, #16
 8008554:	f7f7 ffd6 	bl	8000504 <__aeabi_ui2d>
 8008558:	2e09      	cmp	r6, #9
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	dd13      	ble.n	8008588 <_strtod_l+0x3d8>
 8008560:	4b76      	ldr	r3, [pc, #472]	; (800873c <_strtod_l+0x58c>)
 8008562:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008566:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800856a:	f7f8 f845 	bl	80005f8 <__aeabi_dmul>
 800856e:	4680      	mov	r8, r0
 8008570:	4650      	mov	r0, sl
 8008572:	4689      	mov	r9, r1
 8008574:	f7f7 ffc6 	bl	8000504 <__aeabi_ui2d>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4640      	mov	r0, r8
 800857e:	4649      	mov	r1, r9
 8008580:	f7f7 fe84 	bl	800028c <__adddf3>
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	2e0f      	cmp	r6, #15
 800858a:	dc38      	bgt.n	80085fe <_strtod_l+0x44e>
 800858c:	9b08      	ldr	r3, [sp, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f43f ae49 	beq.w	8008226 <_strtod_l+0x76>
 8008594:	dd24      	ble.n	80085e0 <_strtod_l+0x430>
 8008596:	2b16      	cmp	r3, #22
 8008598:	dc0b      	bgt.n	80085b2 <_strtod_l+0x402>
 800859a:	4968      	ldr	r1, [pc, #416]	; (800873c <_strtod_l+0x58c>)
 800859c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	f7f8 f826 	bl	80005f8 <__aeabi_dmul>
 80085ac:	4680      	mov	r8, r0
 80085ae:	4689      	mov	r9, r1
 80085b0:	e639      	b.n	8008226 <_strtod_l+0x76>
 80085b2:	9a08      	ldr	r2, [sp, #32]
 80085b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80085b8:	4293      	cmp	r3, r2
 80085ba:	db20      	blt.n	80085fe <_strtod_l+0x44e>
 80085bc:	4c5f      	ldr	r4, [pc, #380]	; (800873c <_strtod_l+0x58c>)
 80085be:	f1c6 060f 	rsb	r6, r6, #15
 80085c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	9b08      	ldr	r3, [sp, #32]
 80085d4:	1b9e      	subs	r6, r3, r6
 80085d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80085da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085de:	e7e3      	b.n	80085a8 <_strtod_l+0x3f8>
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	3316      	adds	r3, #22
 80085e4:	db0b      	blt.n	80085fe <_strtod_l+0x44e>
 80085e6:	9b05      	ldr	r3, [sp, #20]
 80085e8:	1bdf      	subs	r7, r3, r7
 80085ea:	4b54      	ldr	r3, [pc, #336]	; (800873c <_strtod_l+0x58c>)
 80085ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80085f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f8 f928 	bl	800084c <__aeabi_ddiv>
 80085fc:	e7d6      	b.n	80085ac <_strtod_l+0x3fc>
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	1b75      	subs	r5, r6, r5
 8008602:	441d      	add	r5, r3
 8008604:	2d00      	cmp	r5, #0
 8008606:	dd70      	ble.n	80086ea <_strtod_l+0x53a>
 8008608:	f015 030f 	ands.w	r3, r5, #15
 800860c:	d00a      	beq.n	8008624 <_strtod_l+0x474>
 800860e:	494b      	ldr	r1, [pc, #300]	; (800873c <_strtod_l+0x58c>)
 8008610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800861c:	f7f7 ffec 	bl	80005f8 <__aeabi_dmul>
 8008620:	4680      	mov	r8, r0
 8008622:	4689      	mov	r9, r1
 8008624:	f035 050f 	bics.w	r5, r5, #15
 8008628:	d04d      	beq.n	80086c6 <_strtod_l+0x516>
 800862a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800862e:	dd22      	ble.n	8008676 <_strtod_l+0x4c6>
 8008630:	2500      	movs	r5, #0
 8008632:	46ab      	mov	fp, r5
 8008634:	9509      	str	r5, [sp, #36]	; 0x24
 8008636:	9505      	str	r5, [sp, #20]
 8008638:	2322      	movs	r3, #34	; 0x22
 800863a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008744 <_strtod_l+0x594>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	f04f 0800 	mov.w	r8, #0
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	f43f aded 	beq.w	8008226 <_strtod_l+0x76>
 800864c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800864e:	4620      	mov	r0, r4
 8008650:	f7ff f924 	bl	800789c <_Bfree>
 8008654:	9905      	ldr	r1, [sp, #20]
 8008656:	4620      	mov	r0, r4
 8008658:	f7ff f920 	bl	800789c <_Bfree>
 800865c:	4659      	mov	r1, fp
 800865e:	4620      	mov	r0, r4
 8008660:	f7ff f91c 	bl	800789c <_Bfree>
 8008664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008666:	4620      	mov	r0, r4
 8008668:	f7ff f918 	bl	800789c <_Bfree>
 800866c:	4629      	mov	r1, r5
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff f914 	bl	800789c <_Bfree>
 8008674:	e5d7      	b.n	8008226 <_strtod_l+0x76>
 8008676:	4b32      	ldr	r3, [pc, #200]	; (8008740 <_strtod_l+0x590>)
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	2300      	movs	r3, #0
 800867c:	112d      	asrs	r5, r5, #4
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	469a      	mov	sl, r3
 8008684:	2d01      	cmp	r5, #1
 8008686:	dc21      	bgt.n	80086cc <_strtod_l+0x51c>
 8008688:	b10b      	cbz	r3, 800868e <_strtod_l+0x4de>
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	492c      	ldr	r1, [pc, #176]	; (8008740 <_strtod_l+0x590>)
 8008690:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008694:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008698:	4642      	mov	r2, r8
 800869a:	464b      	mov	r3, r9
 800869c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	4b27      	ldr	r3, [pc, #156]	; (8008744 <_strtod_l+0x594>)
 80086a6:	460a      	mov	r2, r1
 80086a8:	400b      	ands	r3, r1
 80086aa:	4927      	ldr	r1, [pc, #156]	; (8008748 <_strtod_l+0x598>)
 80086ac:	428b      	cmp	r3, r1
 80086ae:	4680      	mov	r8, r0
 80086b0:	d8be      	bhi.n	8008630 <_strtod_l+0x480>
 80086b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086b6:	428b      	cmp	r3, r1
 80086b8:	bf86      	itte	hi
 80086ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800874c <_strtod_l+0x59c>
 80086be:	f04f 38ff 	movhi.w	r8, #4294967295
 80086c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80086c6:	2300      	movs	r3, #0
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	e07b      	b.n	80087c4 <_strtod_l+0x614>
 80086cc:	07ea      	lsls	r2, r5, #31
 80086ce:	d505      	bpl.n	80086dc <_strtod_l+0x52c>
 80086d0:	9b04      	ldr	r3, [sp, #16]
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 ff8f 	bl	80005f8 <__aeabi_dmul>
 80086da:	2301      	movs	r3, #1
 80086dc:	9a04      	ldr	r2, [sp, #16]
 80086de:	3208      	adds	r2, #8
 80086e0:	f10a 0a01 	add.w	sl, sl, #1
 80086e4:	106d      	asrs	r5, r5, #1
 80086e6:	9204      	str	r2, [sp, #16]
 80086e8:	e7cc      	b.n	8008684 <_strtod_l+0x4d4>
 80086ea:	d0ec      	beq.n	80086c6 <_strtod_l+0x516>
 80086ec:	426d      	negs	r5, r5
 80086ee:	f015 020f 	ands.w	r2, r5, #15
 80086f2:	d00a      	beq.n	800870a <_strtod_l+0x55a>
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <_strtod_l+0x58c>)
 80086f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fa:	4640      	mov	r0, r8
 80086fc:	4649      	mov	r1, r9
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f7f8 f8a3 	bl	800084c <__aeabi_ddiv>
 8008706:	4680      	mov	r8, r0
 8008708:	4689      	mov	r9, r1
 800870a:	112d      	asrs	r5, r5, #4
 800870c:	d0db      	beq.n	80086c6 <_strtod_l+0x516>
 800870e:	2d1f      	cmp	r5, #31
 8008710:	dd1e      	ble.n	8008750 <_strtod_l+0x5a0>
 8008712:	2500      	movs	r5, #0
 8008714:	46ab      	mov	fp, r5
 8008716:	9509      	str	r5, [sp, #36]	; 0x24
 8008718:	9505      	str	r5, [sp, #20]
 800871a:	2322      	movs	r3, #34	; 0x22
 800871c:	f04f 0800 	mov.w	r8, #0
 8008720:	f04f 0900 	mov.w	r9, #0
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	e78d      	b.n	8008644 <_strtod_l+0x494>
 8008728:	0800a3e4 	.word	0x0800a3e4
 800872c:	0800a60c 	.word	0x0800a60c
 8008730:	0800a3dc 	.word	0x0800a3dc
 8008734:	0800a413 	.word	0x0800a413
 8008738:	0800a79d 	.word	0x0800a79d
 800873c:	0800a520 	.word	0x0800a520
 8008740:	0800a4f8 	.word	0x0800a4f8
 8008744:	7ff00000 	.word	0x7ff00000
 8008748:	7ca00000 	.word	0x7ca00000
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	f015 0310 	ands.w	r3, r5, #16
 8008754:	bf18      	it	ne
 8008756:	236a      	movne	r3, #106	; 0x6a
 8008758:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008afc <_strtod_l+0x94c>
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	2300      	movs	r3, #0
 8008764:	07ea      	lsls	r2, r5, #31
 8008766:	d504      	bpl.n	8008772 <_strtod_l+0x5c2>
 8008768:	e9da 2300 	ldrd	r2, r3, [sl]
 800876c:	f7f7 ff44 	bl	80005f8 <__aeabi_dmul>
 8008770:	2301      	movs	r3, #1
 8008772:	106d      	asrs	r5, r5, #1
 8008774:	f10a 0a08 	add.w	sl, sl, #8
 8008778:	d1f4      	bne.n	8008764 <_strtod_l+0x5b4>
 800877a:	b10b      	cbz	r3, 8008780 <_strtod_l+0x5d0>
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	9b04      	ldr	r3, [sp, #16]
 8008782:	b1bb      	cbz	r3, 80087b4 <_strtod_l+0x604>
 8008784:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008788:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800878c:	2b00      	cmp	r3, #0
 800878e:	4649      	mov	r1, r9
 8008790:	dd10      	ble.n	80087b4 <_strtod_l+0x604>
 8008792:	2b1f      	cmp	r3, #31
 8008794:	f340 811e 	ble.w	80089d4 <_strtod_l+0x824>
 8008798:	2b34      	cmp	r3, #52	; 0x34
 800879a:	bfde      	ittt	le
 800879c:	f04f 33ff 	movle.w	r3, #4294967295
 80087a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80087a4:	4093      	lslle	r3, r2
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	bfcc      	ite	gt
 80087ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80087b0:	ea03 0901 	andle.w	r9, r3, r1
 80087b4:	2200      	movs	r2, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d1a6      	bne.n	8008712 <_strtod_l+0x562>
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ca:	4633      	mov	r3, r6
 80087cc:	465a      	mov	r2, fp
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff f8cc 	bl	800796c <__s2b>
 80087d4:	9009      	str	r0, [sp, #36]	; 0x24
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f af2a 	beq.w	8008630 <_strtod_l+0x480>
 80087dc:	9a08      	ldr	r2, [sp, #32]
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	eba3 0307 	sub.w	r3, r3, r7
 80087e6:	bfa8      	it	ge
 80087e8:	2300      	movge	r3, #0
 80087ea:	930c      	str	r3, [sp, #48]	; 0x30
 80087ec:	2500      	movs	r5, #0
 80087ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087f2:	9312      	str	r3, [sp, #72]	; 0x48
 80087f4:	46ab      	mov	fp, r5
 80087f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f8:	4620      	mov	r0, r4
 80087fa:	6859      	ldr	r1, [r3, #4]
 80087fc:	f7ff f80e 	bl	800781c <_Balloc>
 8008800:	9005      	str	r0, [sp, #20]
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f af18 	beq.w	8008638 <_strtod_l+0x488>
 8008808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	3202      	adds	r2, #2
 800880e:	f103 010c 	add.w	r1, r3, #12
 8008812:	0092      	lsls	r2, r2, #2
 8008814:	300c      	adds	r0, #12
 8008816:	f000 ff61 	bl	80096dc <memcpy>
 800881a:	ec49 8b10 	vmov	d0, r8, r9
 800881e:	aa18      	add	r2, sp, #96	; 0x60
 8008820:	a917      	add	r1, sp, #92	; 0x5c
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff fbd6 	bl	8007fd4 <__d2b>
 8008828:	ec49 8b18 	vmov	d8, r8, r9
 800882c:	9016      	str	r0, [sp, #88]	; 0x58
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af02 	beq.w	8008638 <_strtod_l+0x488>
 8008834:	2101      	movs	r1, #1
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff f930 	bl	8007a9c <__i2b>
 800883c:	4683      	mov	fp, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f aefa 	beq.w	8008638 <_strtod_l+0x488>
 8008844:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008846:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008848:	2e00      	cmp	r6, #0
 800884a:	bfab      	itete	ge
 800884c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800884e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008850:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008852:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008856:	bfac      	ite	ge
 8008858:	eb06 0a03 	addge.w	sl, r6, r3
 800885c:	1b9f      	sublt	r7, r3, r6
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	1af6      	subs	r6, r6, r3
 8008862:	4416      	add	r6, r2
 8008864:	4ba0      	ldr	r3, [pc, #640]	; (8008ae8 <_strtod_l+0x938>)
 8008866:	3e01      	subs	r6, #1
 8008868:	429e      	cmp	r6, r3
 800886a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800886e:	f280 80c4 	bge.w	80089fa <_strtod_l+0x84a>
 8008872:	1b9b      	subs	r3, r3, r6
 8008874:	2b1f      	cmp	r3, #31
 8008876:	eba2 0203 	sub.w	r2, r2, r3
 800887a:	f04f 0101 	mov.w	r1, #1
 800887e:	f300 80b0 	bgt.w	80089e2 <_strtod_l+0x832>
 8008882:	fa01 f303 	lsl.w	r3, r1, r3
 8008886:	930e      	str	r3, [sp, #56]	; 0x38
 8008888:	2300      	movs	r3, #0
 800888a:	930d      	str	r3, [sp, #52]	; 0x34
 800888c:	eb0a 0602 	add.w	r6, sl, r2
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	45b2      	cmp	sl, r6
 8008894:	4417      	add	r7, r2
 8008896:	441f      	add	r7, r3
 8008898:	4653      	mov	r3, sl
 800889a:	bfa8      	it	ge
 800889c:	4633      	movge	r3, r6
 800889e:	42bb      	cmp	r3, r7
 80088a0:	bfa8      	it	ge
 80088a2:	463b      	movge	r3, r7
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfc2      	ittt	gt
 80088a8:	1af6      	subgt	r6, r6, r3
 80088aa:	1aff      	subgt	r7, r7, r3
 80088ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 80088b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	dd17      	ble.n	80088e6 <_strtod_l+0x736>
 80088b6:	4659      	mov	r1, fp
 80088b8:	461a      	mov	r2, r3
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff f9ae 	bl	8007c1c <__pow5mult>
 80088c0:	4683      	mov	fp, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f43f aeb8 	beq.w	8008638 <_strtod_l+0x488>
 80088c8:	4601      	mov	r1, r0
 80088ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff f8fb 	bl	8007ac8 <__multiply>
 80088d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f43f aeaf 	beq.w	8008638 <_strtod_l+0x488>
 80088da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088dc:	4620      	mov	r0, r4
 80088de:	f7fe ffdd 	bl	800789c <_Bfree>
 80088e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e4:	9316      	str	r3, [sp, #88]	; 0x58
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	f300 808c 	bgt.w	8008a04 <_strtod_l+0x854>
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dd08      	ble.n	8008904 <_strtod_l+0x754>
 80088f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088f4:	9905      	ldr	r1, [sp, #20]
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff f990 	bl	8007c1c <__pow5mult>
 80088fc:	9005      	str	r0, [sp, #20]
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f ae9a 	beq.w	8008638 <_strtod_l+0x488>
 8008904:	2f00      	cmp	r7, #0
 8008906:	dd08      	ble.n	800891a <_strtod_l+0x76a>
 8008908:	9905      	ldr	r1, [sp, #20]
 800890a:	463a      	mov	r2, r7
 800890c:	4620      	mov	r0, r4
 800890e:	f7ff f9df 	bl	8007cd0 <__lshift>
 8008912:	9005      	str	r0, [sp, #20]
 8008914:	2800      	cmp	r0, #0
 8008916:	f43f ae8f 	beq.w	8008638 <_strtod_l+0x488>
 800891a:	f1ba 0f00 	cmp.w	sl, #0
 800891e:	dd08      	ble.n	8008932 <_strtod_l+0x782>
 8008920:	4659      	mov	r1, fp
 8008922:	4652      	mov	r2, sl
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff f9d3 	bl	8007cd0 <__lshift>
 800892a:	4683      	mov	fp, r0
 800892c:	2800      	cmp	r0, #0
 800892e:	f43f ae83 	beq.w	8008638 <_strtod_l+0x488>
 8008932:	9a05      	ldr	r2, [sp, #20]
 8008934:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff fa52 	bl	8007de0 <__mdiff>
 800893c:	4605      	mov	r5, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	f43f ae7a 	beq.w	8008638 <_strtod_l+0x488>
 8008944:	68c3      	ldr	r3, [r0, #12]
 8008946:	930b      	str	r3, [sp, #44]	; 0x2c
 8008948:	2300      	movs	r3, #0
 800894a:	60c3      	str	r3, [r0, #12]
 800894c:	4659      	mov	r1, fp
 800894e:	f7ff fa2b 	bl	8007da8 <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	da60      	bge.n	8008a18 <_strtod_l+0x868>
 8008956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008958:	ea53 0308 	orrs.w	r3, r3, r8
 800895c:	f040 8084 	bne.w	8008a68 <_strtod_l+0x8b8>
 8008960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008964:	2b00      	cmp	r3, #0
 8008966:	d17f      	bne.n	8008a68 <_strtod_l+0x8b8>
 8008968:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800896c:	0d1b      	lsrs	r3, r3, #20
 800896e:	051b      	lsls	r3, r3, #20
 8008970:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008974:	d978      	bls.n	8008a68 <_strtod_l+0x8b8>
 8008976:	696b      	ldr	r3, [r5, #20]
 8008978:	b913      	cbnz	r3, 8008980 <_strtod_l+0x7d0>
 800897a:	692b      	ldr	r3, [r5, #16]
 800897c:	2b01      	cmp	r3, #1
 800897e:	dd73      	ble.n	8008a68 <_strtod_l+0x8b8>
 8008980:	4629      	mov	r1, r5
 8008982:	2201      	movs	r2, #1
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff f9a3 	bl	8007cd0 <__lshift>
 800898a:	4659      	mov	r1, fp
 800898c:	4605      	mov	r5, r0
 800898e:	f7ff fa0b 	bl	8007da8 <__mcmp>
 8008992:	2800      	cmp	r0, #0
 8008994:	dd68      	ble.n	8008a68 <_strtod_l+0x8b8>
 8008996:	9904      	ldr	r1, [sp, #16]
 8008998:	4a54      	ldr	r2, [pc, #336]	; (8008aec <_strtod_l+0x93c>)
 800899a:	464b      	mov	r3, r9
 800899c:	2900      	cmp	r1, #0
 800899e:	f000 8084 	beq.w	8008aaa <_strtod_l+0x8fa>
 80089a2:	ea02 0109 	and.w	r1, r2, r9
 80089a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089aa:	dc7e      	bgt.n	8008aaa <_strtod_l+0x8fa>
 80089ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089b0:	f77f aeb3 	ble.w	800871a <_strtod_l+0x56a>
 80089b4:	4b4e      	ldr	r3, [pc, #312]	; (8008af0 <_strtod_l+0x940>)
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	2200      	movs	r2, #0
 80089bc:	f7f7 fe1c 	bl	80005f8 <__aeabi_dmul>
 80089c0:	4b4a      	ldr	r3, [pc, #296]	; (8008aec <_strtod_l+0x93c>)
 80089c2:	400b      	ands	r3, r1
 80089c4:	4680      	mov	r8, r0
 80089c6:	4689      	mov	r9, r1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f47f ae3f 	bne.w	800864c <_strtod_l+0x49c>
 80089ce:	2322      	movs	r3, #34	; 0x22
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	e63b      	b.n	800864c <_strtod_l+0x49c>
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	ea03 0808 	and.w	r8, r3, r8
 80089e0:	e6e8      	b.n	80087b4 <_strtod_l+0x604>
 80089e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80089e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80089ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80089ee:	36e2      	adds	r6, #226	; 0xe2
 80089f0:	fa01 f306 	lsl.w	r3, r1, r6
 80089f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80089f8:	e748      	b.n	800888c <_strtod_l+0x6dc>
 80089fa:	2100      	movs	r1, #0
 80089fc:	2301      	movs	r3, #1
 80089fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008a02:	e743      	b.n	800888c <_strtod_l+0x6dc>
 8008a04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a06:	4632      	mov	r2, r6
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff f961 	bl	8007cd0 <__lshift>
 8008a0e:	9016      	str	r0, [sp, #88]	; 0x58
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f47f af6b 	bne.w	80088ec <_strtod_l+0x73c>
 8008a16:	e60f      	b.n	8008638 <_strtod_l+0x488>
 8008a18:	46ca      	mov	sl, r9
 8008a1a:	d171      	bne.n	8008b00 <_strtod_l+0x950>
 8008a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a22:	b352      	cbz	r2, 8008a7a <_strtod_l+0x8ca>
 8008a24:	4a33      	ldr	r2, [pc, #204]	; (8008af4 <_strtod_l+0x944>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d12a      	bne.n	8008a80 <_strtod_l+0x8d0>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	b1fb      	cbz	r3, 8008a70 <_strtod_l+0x8c0>
 8008a30:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <_strtod_l+0x93c>)
 8008a32:	ea09 0303 	and.w	r3, r9, r3
 8008a36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	d81a      	bhi.n	8008a76 <_strtod_l+0x8c6>
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	4299      	cmp	r1, r3
 8008a4c:	d118      	bne.n	8008a80 <_strtod_l+0x8d0>
 8008a4e:	4b2a      	ldr	r3, [pc, #168]	; (8008af8 <_strtod_l+0x948>)
 8008a50:	459a      	cmp	sl, r3
 8008a52:	d102      	bne.n	8008a5a <_strtod_l+0x8aa>
 8008a54:	3101      	adds	r1, #1
 8008a56:	f43f adef 	beq.w	8008638 <_strtod_l+0x488>
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <_strtod_l+0x93c>)
 8008a5c:	ea0a 0303 	and.w	r3, sl, r3
 8008a60:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008a64:	f04f 0800 	mov.w	r8, #0
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1a2      	bne.n	80089b4 <_strtod_l+0x804>
 8008a6e:	e5ed      	b.n	800864c <_strtod_l+0x49c>
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	e7e9      	b.n	8008a4a <_strtod_l+0x89a>
 8008a76:	4613      	mov	r3, r2
 8008a78:	e7e7      	b.n	8008a4a <_strtod_l+0x89a>
 8008a7a:	ea53 0308 	orrs.w	r3, r3, r8
 8008a7e:	d08a      	beq.n	8008996 <_strtod_l+0x7e6>
 8008a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a82:	b1e3      	cbz	r3, 8008abe <_strtod_l+0x90e>
 8008a84:	ea13 0f0a 	tst.w	r3, sl
 8008a88:	d0ee      	beq.n	8008a68 <_strtod_l+0x8b8>
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	9a04      	ldr	r2, [sp, #16]
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	b1c3      	cbz	r3, 8008ac6 <_strtod_l+0x916>
 8008a94:	f7ff fb6f 	bl	8008176 <sulp>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	ec51 0b18 	vmov	r0, r1, d8
 8008aa0:	f7f7 fbf4 	bl	800028c <__adddf3>
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	e7de      	b.n	8008a68 <_strtod_l+0x8b8>
 8008aaa:	4013      	ands	r3, r2
 8008aac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ab0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008ab4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ab8:	f04f 38ff 	mov.w	r8, #4294967295
 8008abc:	e7d4      	b.n	8008a68 <_strtod_l+0x8b8>
 8008abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac0:	ea13 0f08 	tst.w	r3, r8
 8008ac4:	e7e0      	b.n	8008a88 <_strtod_l+0x8d8>
 8008ac6:	f7ff fb56 	bl	8008176 <sulp>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	ec51 0b18 	vmov	r0, r1, d8
 8008ad2:	f7f7 fbd9 	bl	8000288 <__aeabi_dsub>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f7f7 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d0c0      	beq.n	8008a68 <_strtod_l+0x8b8>
 8008ae6:	e618      	b.n	800871a <_strtod_l+0x56a>
 8008ae8:	fffffc02 	.word	0xfffffc02
 8008aec:	7ff00000 	.word	0x7ff00000
 8008af0:	39500000 	.word	0x39500000
 8008af4:	000fffff 	.word	0x000fffff
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	0800a620 	.word	0x0800a620
 8008b00:	4659      	mov	r1, fp
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7ff fac0 	bl	8008088 <__ratio>
 8008b08:	ec57 6b10 	vmov	r6, r7, d0
 8008b0c:	ee10 0a10 	vmov	r0, s0
 8008b10:	2200      	movs	r2, #0
 8008b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 ffea 	bl	8000af0 <__aeabi_dcmple>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d071      	beq.n	8008c04 <_strtod_l+0xa54>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d17c      	bne.n	8008c20 <_strtod_l+0xa70>
 8008b26:	f1b8 0f00 	cmp.w	r8, #0
 8008b2a:	d15a      	bne.n	8008be2 <_strtod_l+0xa32>
 8008b2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d15d      	bne.n	8008bf0 <_strtod_l+0xa40>
 8008b34:	4b90      	ldr	r3, [pc, #576]	; (8008d78 <_strtod_l+0xbc8>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 ffce 	bl	8000adc <__aeabi_dcmplt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d15c      	bne.n	8008bfe <_strtod_l+0xa4e>
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	4b8c      	ldr	r3, [pc, #560]	; (8008d7c <_strtod_l+0xbcc>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	4606      	mov	r6, r0
 8008b52:	460f      	mov	r7, r1
 8008b54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b58:	9606      	str	r6, [sp, #24]
 8008b5a:	9307      	str	r3, [sp, #28]
 8008b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b64:	4b86      	ldr	r3, [pc, #536]	; (8008d80 <_strtod_l+0xbd0>)
 8008b66:	ea0a 0303 	and.w	r3, sl, r3
 8008b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b6e:	4b85      	ldr	r3, [pc, #532]	; (8008d84 <_strtod_l+0xbd4>)
 8008b70:	429a      	cmp	r2, r3
 8008b72:	f040 8090 	bne.w	8008c96 <_strtod_l+0xae6>
 8008b76:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008b7a:	ec49 8b10 	vmov	d0, r8, r9
 8008b7e:	f7ff f9b9 	bl	8007ef4 <__ulp>
 8008b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b86:	ec51 0b10 	vmov	r0, r1, d0
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	4642      	mov	r2, r8
 8008b90:	464b      	mov	r3, r9
 8008b92:	f7f7 fb7b 	bl	800028c <__adddf3>
 8008b96:	460b      	mov	r3, r1
 8008b98:	4979      	ldr	r1, [pc, #484]	; (8008d80 <_strtod_l+0xbd0>)
 8008b9a:	4a7b      	ldr	r2, [pc, #492]	; (8008d88 <_strtod_l+0xbd8>)
 8008b9c:	4019      	ands	r1, r3
 8008b9e:	4291      	cmp	r1, r2
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	d944      	bls.n	8008c2e <_strtod_l+0xa7e>
 8008ba4:	ee18 2a90 	vmov	r2, s17
 8008ba8:	4b78      	ldr	r3, [pc, #480]	; (8008d8c <_strtod_l+0xbdc>)
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d104      	bne.n	8008bb8 <_strtod_l+0xa08>
 8008bae:	ee18 3a10 	vmov	r3, s16
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f43f ad40 	beq.w	8008638 <_strtod_l+0x488>
 8008bb8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008d8c <_strtod_l+0xbdc>
 8008bbc:	f04f 38ff 	mov.w	r8, #4294967295
 8008bc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7fe fe6a 	bl	800789c <_Bfree>
 8008bc8:	9905      	ldr	r1, [sp, #20]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7fe fe66 	bl	800789c <_Bfree>
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f7fe fe62 	bl	800789c <_Bfree>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7fe fe5e 	bl	800789c <_Bfree>
 8008be0:	e609      	b.n	80087f6 <_strtod_l+0x646>
 8008be2:	f1b8 0f01 	cmp.w	r8, #1
 8008be6:	d103      	bne.n	8008bf0 <_strtod_l+0xa40>
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	f43f ad95 	beq.w	800871a <_strtod_l+0x56a>
 8008bf0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008d48 <_strtod_l+0xb98>
 8008bf4:	4f60      	ldr	r7, [pc, #384]	; (8008d78 <_strtod_l+0xbc8>)
 8008bf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bfa:	2600      	movs	r6, #0
 8008bfc:	e7ae      	b.n	8008b5c <_strtod_l+0x9ac>
 8008bfe:	4f5f      	ldr	r7, [pc, #380]	; (8008d7c <_strtod_l+0xbcc>)
 8008c00:	2600      	movs	r6, #0
 8008c02:	e7a7      	b.n	8008b54 <_strtod_l+0x9a4>
 8008c04:	4b5d      	ldr	r3, [pc, #372]	; (8008d7c <_strtod_l+0xbcc>)
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fcf4 	bl	80005f8 <__aeabi_dmul>
 8008c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d09c      	beq.n	8008b54 <_strtod_l+0x9a4>
 8008c1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c1e:	e79d      	b.n	8008b5c <_strtod_l+0x9ac>
 8008c20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008d50 <_strtod_l+0xba0>
 8008c24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c28:	ec57 6b17 	vmov	r6, r7, d7
 8008c2c:	e796      	b.n	8008b5c <_strtod_l+0x9ac>
 8008c2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	46ca      	mov	sl, r9
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1c2      	bne.n	8008bc0 <_strtod_l+0xa10>
 8008c3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c40:	0d1b      	lsrs	r3, r3, #20
 8008c42:	051b      	lsls	r3, r3, #20
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d1bb      	bne.n	8008bc0 <_strtod_l+0xa10>
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f8 f834 	bl	8000cb8 <__aeabi_d2lz>
 8008c50:	f7f7 fca4 	bl	800059c <__aeabi_l2d>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fb14 	bl	8000288 <__aeabi_dsub>
 8008c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c66:	ea43 0308 	orr.w	r3, r3, r8
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	460f      	mov	r7, r1
 8008c70:	d054      	beq.n	8008d1c <_strtod_l+0xb6c>
 8008c72:	a339      	add	r3, pc, #228	; (adr r3, 8008d58 <_strtod_l+0xba8>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 ff30 	bl	8000adc <__aeabi_dcmplt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f47f ace5 	bne.w	800864c <_strtod_l+0x49c>
 8008c82:	a337      	add	r3, pc, #220	; (adr r3, 8008d60 <_strtod_l+0xbb0>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d095      	beq.n	8008bc0 <_strtod_l+0xa10>
 8008c94:	e4da      	b.n	800864c <_strtod_l+0x49c>
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	b333      	cbz	r3, 8008ce8 <_strtod_l+0xb38>
 8008c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ca0:	d822      	bhi.n	8008ce8 <_strtod_l+0xb38>
 8008ca2:	a331      	add	r3, pc, #196	; (adr r3, 8008d68 <_strtod_l+0xbb8>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 ff20 	bl	8000af0 <__aeabi_dcmple>
 8008cb0:	b1a0      	cbz	r0, 8008cdc <_strtod_l+0xb2c>
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7f7 ff77 	bl	8000ba8 <__aeabi_d2uiz>
 8008cba:	2801      	cmp	r0, #1
 8008cbc:	bf38      	it	cc
 8008cbe:	2001      	movcc	r0, #1
 8008cc0:	f7f7 fc20 	bl	8000504 <__aeabi_ui2d>
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460f      	mov	r7, r1
 8008cca:	bb23      	cbnz	r3, 8008d16 <_strtod_l+0xb66>
 8008ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd0:	9010      	str	r0, [sp, #64]	; 0x40
 8008cd2:	9311      	str	r3, [sp, #68]	; 0x44
 8008cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ce0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cec:	eeb0 0a48 	vmov.f32	s0, s16
 8008cf0:	eef0 0a68 	vmov.f32	s1, s17
 8008cf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008cf8:	f7ff f8fc 	bl	8007ef4 <__ulp>
 8008cfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d00:	ec53 2b10 	vmov	r2, r3, d0
 8008d04:	f7f7 fc78 	bl	80005f8 <__aeabi_dmul>
 8008d08:	ec53 2b18 	vmov	r2, r3, d8
 8008d0c:	f7f7 fabe 	bl	800028c <__adddf3>
 8008d10:	4680      	mov	r8, r0
 8008d12:	4689      	mov	r9, r1
 8008d14:	e78d      	b.n	8008c32 <_strtod_l+0xa82>
 8008d16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008d1a:	e7db      	b.n	8008cd4 <_strtod_l+0xb24>
 8008d1c:	a314      	add	r3, pc, #80	; (adr r3, 8008d70 <_strtod_l+0xbc0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fedb 	bl	8000adc <__aeabi_dcmplt>
 8008d26:	e7b3      	b.n	8008c90 <_strtod_l+0xae0>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	f7ff ba7c 	b.w	800822e <_strtod_l+0x7e>
 8008d36:	2a65      	cmp	r2, #101	; 0x65
 8008d38:	f43f ab75 	beq.w	8008426 <_strtod_l+0x276>
 8008d3c:	2a45      	cmp	r2, #69	; 0x45
 8008d3e:	f43f ab72 	beq.w	8008426 <_strtod_l+0x276>
 8008d42:	2301      	movs	r3, #1
 8008d44:	f7ff bbaa 	b.w	800849c <_strtod_l+0x2ec>
 8008d48:	00000000 	.word	0x00000000
 8008d4c:	bff00000 	.word	0xbff00000
 8008d50:	00000000 	.word	0x00000000
 8008d54:	3ff00000 	.word	0x3ff00000
 8008d58:	94a03595 	.word	0x94a03595
 8008d5c:	3fdfffff 	.word	0x3fdfffff
 8008d60:	35afe535 	.word	0x35afe535
 8008d64:	3fe00000 	.word	0x3fe00000
 8008d68:	ffc00000 	.word	0xffc00000
 8008d6c:	41dfffff 	.word	0x41dfffff
 8008d70:	94a03595 	.word	0x94a03595
 8008d74:	3fcfffff 	.word	0x3fcfffff
 8008d78:	3ff00000 	.word	0x3ff00000
 8008d7c:	3fe00000 	.word	0x3fe00000
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	7fe00000 	.word	0x7fe00000
 8008d88:	7c9fffff 	.word	0x7c9fffff
 8008d8c:	7fefffff 	.word	0x7fefffff

08008d90 <_strtod_r>:
 8008d90:	4b01      	ldr	r3, [pc, #4]	; (8008d98 <_strtod_r+0x8>)
 8008d92:	f7ff ba0d 	b.w	80081b0 <_strtod_l>
 8008d96:	bf00      	nop
 8008d98:	200000a4 	.word	0x200000a4

08008d9c <_strtol_l.constprop.0>:
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da2:	d001      	beq.n	8008da8 <_strtol_l.constprop.0+0xc>
 8008da4:	2b24      	cmp	r3, #36	; 0x24
 8008da6:	d906      	bls.n	8008db6 <_strtol_l.constprop.0+0x1a>
 8008da8:	f7fd fd88 	bl	80068bc <__errno>
 8008dac:	2316      	movs	r3, #22
 8008dae:	6003      	str	r3, [r0, #0]
 8008db0:	2000      	movs	r0, #0
 8008db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e9c <_strtol_l.constprop.0+0x100>
 8008dba:	460d      	mov	r5, r1
 8008dbc:	462e      	mov	r6, r5
 8008dbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dc2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008dc6:	f017 0708 	ands.w	r7, r7, #8
 8008dca:	d1f7      	bne.n	8008dbc <_strtol_l.constprop.0+0x20>
 8008dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8008dce:	d132      	bne.n	8008e36 <_strtol_l.constprop.0+0x9a>
 8008dd0:	782c      	ldrb	r4, [r5, #0]
 8008dd2:	2701      	movs	r7, #1
 8008dd4:	1cb5      	adds	r5, r6, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d05b      	beq.n	8008e92 <_strtol_l.constprop.0+0xf6>
 8008dda:	2b10      	cmp	r3, #16
 8008ddc:	d109      	bne.n	8008df2 <_strtol_l.constprop.0+0x56>
 8008dde:	2c30      	cmp	r4, #48	; 0x30
 8008de0:	d107      	bne.n	8008df2 <_strtol_l.constprop.0+0x56>
 8008de2:	782c      	ldrb	r4, [r5, #0]
 8008de4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008de8:	2c58      	cmp	r4, #88	; 0x58
 8008dea:	d14d      	bne.n	8008e88 <_strtol_l.constprop.0+0xec>
 8008dec:	786c      	ldrb	r4, [r5, #1]
 8008dee:	2310      	movs	r3, #16
 8008df0:	3502      	adds	r5, #2
 8008df2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008df6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dfa:	f04f 0e00 	mov.w	lr, #0
 8008dfe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e02:	4676      	mov	r6, lr
 8008e04:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e0c:	f1bc 0f09 	cmp.w	ip, #9
 8008e10:	d816      	bhi.n	8008e40 <_strtol_l.constprop.0+0xa4>
 8008e12:	4664      	mov	r4, ip
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	dd24      	ble.n	8008e62 <_strtol_l.constprop.0+0xc6>
 8008e18:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e1c:	d008      	beq.n	8008e30 <_strtol_l.constprop.0+0x94>
 8008e1e:	45b1      	cmp	r9, r6
 8008e20:	d31c      	bcc.n	8008e5c <_strtol_l.constprop.0+0xc0>
 8008e22:	d101      	bne.n	8008e28 <_strtol_l.constprop.0+0x8c>
 8008e24:	45a2      	cmp	sl, r4
 8008e26:	db19      	blt.n	8008e5c <_strtol_l.constprop.0+0xc0>
 8008e28:	fb06 4603 	mla	r6, r6, r3, r4
 8008e2c:	f04f 0e01 	mov.w	lr, #1
 8008e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e34:	e7e8      	b.n	8008e08 <_strtol_l.constprop.0+0x6c>
 8008e36:	2c2b      	cmp	r4, #43	; 0x2b
 8008e38:	bf04      	itt	eq
 8008e3a:	782c      	ldrbeq	r4, [r5, #0]
 8008e3c:	1cb5      	addeq	r5, r6, #2
 8008e3e:	e7ca      	b.n	8008dd6 <_strtol_l.constprop.0+0x3a>
 8008e40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e44:	f1bc 0f19 	cmp.w	ip, #25
 8008e48:	d801      	bhi.n	8008e4e <_strtol_l.constprop.0+0xb2>
 8008e4a:	3c37      	subs	r4, #55	; 0x37
 8008e4c:	e7e2      	b.n	8008e14 <_strtol_l.constprop.0+0x78>
 8008e4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e52:	f1bc 0f19 	cmp.w	ip, #25
 8008e56:	d804      	bhi.n	8008e62 <_strtol_l.constprop.0+0xc6>
 8008e58:	3c57      	subs	r4, #87	; 0x57
 8008e5a:	e7db      	b.n	8008e14 <_strtol_l.constprop.0+0x78>
 8008e5c:	f04f 3eff 	mov.w	lr, #4294967295
 8008e60:	e7e6      	b.n	8008e30 <_strtol_l.constprop.0+0x94>
 8008e62:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e66:	d105      	bne.n	8008e74 <_strtol_l.constprop.0+0xd8>
 8008e68:	2322      	movs	r3, #34	; 0x22
 8008e6a:	6003      	str	r3, [r0, #0]
 8008e6c:	4646      	mov	r6, r8
 8008e6e:	b942      	cbnz	r2, 8008e82 <_strtol_l.constprop.0+0xe6>
 8008e70:	4630      	mov	r0, r6
 8008e72:	e79e      	b.n	8008db2 <_strtol_l.constprop.0+0x16>
 8008e74:	b107      	cbz	r7, 8008e78 <_strtol_l.constprop.0+0xdc>
 8008e76:	4276      	negs	r6, r6
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d0f9      	beq.n	8008e70 <_strtol_l.constprop.0+0xd4>
 8008e7c:	f1be 0f00 	cmp.w	lr, #0
 8008e80:	d000      	beq.n	8008e84 <_strtol_l.constprop.0+0xe8>
 8008e82:	1e69      	subs	r1, r5, #1
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	e7f3      	b.n	8008e70 <_strtol_l.constprop.0+0xd4>
 8008e88:	2430      	movs	r4, #48	; 0x30
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1b1      	bne.n	8008df2 <_strtol_l.constprop.0+0x56>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	e7af      	b.n	8008df2 <_strtol_l.constprop.0+0x56>
 8008e92:	2c30      	cmp	r4, #48	; 0x30
 8008e94:	d0a5      	beq.n	8008de2 <_strtol_l.constprop.0+0x46>
 8008e96:	230a      	movs	r3, #10
 8008e98:	e7ab      	b.n	8008df2 <_strtol_l.constprop.0+0x56>
 8008e9a:	bf00      	nop
 8008e9c:	0800a649 	.word	0x0800a649

08008ea0 <_strtol_r>:
 8008ea0:	f7ff bf7c 	b.w	8008d9c <_strtol_l.constprop.0>

08008ea4 <__ssputs_r>:
 8008ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea8:	688e      	ldr	r6, [r1, #8]
 8008eaa:	461f      	mov	r7, r3
 8008eac:	42be      	cmp	r6, r7
 8008eae:	680b      	ldr	r3, [r1, #0]
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	4690      	mov	r8, r2
 8008eb6:	d82c      	bhi.n	8008f12 <__ssputs_r+0x6e>
 8008eb8:	898a      	ldrh	r2, [r1, #12]
 8008eba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ebe:	d026      	beq.n	8008f0e <__ssputs_r+0x6a>
 8008ec0:	6965      	ldr	r5, [r4, #20]
 8008ec2:	6909      	ldr	r1, [r1, #16]
 8008ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ec8:	eba3 0901 	sub.w	r9, r3, r1
 8008ecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ed0:	1c7b      	adds	r3, r7, #1
 8008ed2:	444b      	add	r3, r9
 8008ed4:	106d      	asrs	r5, r5, #1
 8008ed6:	429d      	cmp	r5, r3
 8008ed8:	bf38      	it	cc
 8008eda:	461d      	movcc	r5, r3
 8008edc:	0553      	lsls	r3, r2, #21
 8008ede:	d527      	bpl.n	8008f30 <__ssputs_r+0x8c>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7fe fc0f 	bl	8007704 <_malloc_r>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	b360      	cbz	r0, 8008f44 <__ssputs_r+0xa0>
 8008eea:	6921      	ldr	r1, [r4, #16]
 8008eec:	464a      	mov	r2, r9
 8008eee:	f000 fbf5 	bl	80096dc <memcpy>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	6126      	str	r6, [r4, #16]
 8008f00:	6165      	str	r5, [r4, #20]
 8008f02:	444e      	add	r6, r9
 8008f04:	eba5 0509 	sub.w	r5, r5, r9
 8008f08:	6026      	str	r6, [r4, #0]
 8008f0a:	60a5      	str	r5, [r4, #8]
 8008f0c:	463e      	mov	r6, r7
 8008f0e:	42be      	cmp	r6, r7
 8008f10:	d900      	bls.n	8008f14 <__ssputs_r+0x70>
 8008f12:	463e      	mov	r6, r7
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	4632      	mov	r2, r6
 8008f18:	4641      	mov	r1, r8
 8008f1a:	f000 fba3 	bl	8009664 <memmove>
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	1b9b      	subs	r3, r3, r6
 8008f22:	60a3      	str	r3, [r4, #8]
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	4433      	add	r3, r6
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f30:	462a      	mov	r2, r5
 8008f32:	f000 ff86 	bl	8009e42 <_realloc_r>
 8008f36:	4606      	mov	r6, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1e0      	bne.n	8008efe <__ssputs_r+0x5a>
 8008f3c:	6921      	ldr	r1, [r4, #16]
 8008f3e:	4650      	mov	r0, sl
 8008f40:	f7fe fb6c 	bl	800761c <_free_r>
 8008f44:	230c      	movs	r3, #12
 8008f46:	f8ca 3000 	str.w	r3, [sl]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
 8008f56:	e7e9      	b.n	8008f2c <__ssputs_r+0x88>

08008f58 <_svfiprintf_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	4698      	mov	r8, r3
 8008f5e:	898b      	ldrh	r3, [r1, #12]
 8008f60:	061b      	lsls	r3, r3, #24
 8008f62:	b09d      	sub	sp, #116	; 0x74
 8008f64:	4607      	mov	r7, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	d50e      	bpl.n	8008f8a <_svfiprintf_r+0x32>
 8008f6c:	690b      	ldr	r3, [r1, #16]
 8008f6e:	b963      	cbnz	r3, 8008f8a <_svfiprintf_r+0x32>
 8008f70:	2140      	movs	r1, #64	; 0x40
 8008f72:	f7fe fbc7 	bl	8007704 <_malloc_r>
 8008f76:	6028      	str	r0, [r5, #0]
 8008f78:	6128      	str	r0, [r5, #16]
 8008f7a:	b920      	cbnz	r0, 8008f86 <_svfiprintf_r+0x2e>
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295
 8008f84:	e0d0      	b.n	8009128 <_svfiprintf_r+0x1d0>
 8008f86:	2340      	movs	r3, #64	; 0x40
 8008f88:	616b      	str	r3, [r5, #20]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8e:	2320      	movs	r3, #32
 8008f90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f98:	2330      	movs	r3, #48	; 0x30
 8008f9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009140 <_svfiprintf_r+0x1e8>
 8008f9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa2:	f04f 0901 	mov.w	r9, #1
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	469a      	mov	sl, r3
 8008faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fae:	b10a      	cbz	r2, 8008fb4 <_svfiprintf_r+0x5c>
 8008fb0:	2a25      	cmp	r2, #37	; 0x25
 8008fb2:	d1f9      	bne.n	8008fa8 <_svfiprintf_r+0x50>
 8008fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb8:	d00b      	beq.n	8008fd2 <_svfiprintf_r+0x7a>
 8008fba:	465b      	mov	r3, fp
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff ff6f 	bl	8008ea4 <__ssputs_r>
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	f000 80a9 	beq.w	800911e <_svfiprintf_r+0x1c6>
 8008fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fce:	445a      	add	r2, fp
 8008fd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 80a1 	beq.w	800911e <_svfiprintf_r+0x1c6>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe6:	f10a 0a01 	add.w	sl, sl, #1
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff4:	4654      	mov	r4, sl
 8008ff6:	2205      	movs	r2, #5
 8008ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffc:	4850      	ldr	r0, [pc, #320]	; (8009140 <_svfiprintf_r+0x1e8>)
 8008ffe:	f7f7 f8e7 	bl	80001d0 <memchr>
 8009002:	9a04      	ldr	r2, [sp, #16]
 8009004:	b9d8      	cbnz	r0, 800903e <_svfiprintf_r+0xe6>
 8009006:	06d0      	lsls	r0, r2, #27
 8009008:	bf44      	itt	mi
 800900a:	2320      	movmi	r3, #32
 800900c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009010:	0711      	lsls	r1, r2, #28
 8009012:	bf44      	itt	mi
 8009014:	232b      	movmi	r3, #43	; 0x2b
 8009016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901a:	f89a 3000 	ldrb.w	r3, [sl]
 800901e:	2b2a      	cmp	r3, #42	; 0x2a
 8009020:	d015      	beq.n	800904e <_svfiprintf_r+0xf6>
 8009022:	9a07      	ldr	r2, [sp, #28]
 8009024:	4654      	mov	r4, sl
 8009026:	2000      	movs	r0, #0
 8009028:	f04f 0c0a 	mov.w	ip, #10
 800902c:	4621      	mov	r1, r4
 800902e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009032:	3b30      	subs	r3, #48	; 0x30
 8009034:	2b09      	cmp	r3, #9
 8009036:	d94d      	bls.n	80090d4 <_svfiprintf_r+0x17c>
 8009038:	b1b0      	cbz	r0, 8009068 <_svfiprintf_r+0x110>
 800903a:	9207      	str	r2, [sp, #28]
 800903c:	e014      	b.n	8009068 <_svfiprintf_r+0x110>
 800903e:	eba0 0308 	sub.w	r3, r0, r8
 8009042:	fa09 f303 	lsl.w	r3, r9, r3
 8009046:	4313      	orrs	r3, r2
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	46a2      	mov	sl, r4
 800904c:	e7d2      	b.n	8008ff4 <_svfiprintf_r+0x9c>
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	1d19      	adds	r1, r3, #4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	9103      	str	r1, [sp, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfbb      	ittet	lt
 800905a:	425b      	neglt	r3, r3
 800905c:	f042 0202 	orrlt.w	r2, r2, #2
 8009060:	9307      	strge	r3, [sp, #28]
 8009062:	9307      	strlt	r3, [sp, #28]
 8009064:	bfb8      	it	lt
 8009066:	9204      	strlt	r2, [sp, #16]
 8009068:	7823      	ldrb	r3, [r4, #0]
 800906a:	2b2e      	cmp	r3, #46	; 0x2e
 800906c:	d10c      	bne.n	8009088 <_svfiprintf_r+0x130>
 800906e:	7863      	ldrb	r3, [r4, #1]
 8009070:	2b2a      	cmp	r3, #42	; 0x2a
 8009072:	d134      	bne.n	80090de <_svfiprintf_r+0x186>
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	9203      	str	r2, [sp, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	bfb8      	it	lt
 8009080:	f04f 33ff 	movlt.w	r3, #4294967295
 8009084:	3402      	adds	r4, #2
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009150 <_svfiprintf_r+0x1f8>
 800908c:	7821      	ldrb	r1, [r4, #0]
 800908e:	2203      	movs	r2, #3
 8009090:	4650      	mov	r0, sl
 8009092:	f7f7 f89d 	bl	80001d0 <memchr>
 8009096:	b138      	cbz	r0, 80090a8 <_svfiprintf_r+0x150>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	eba0 000a 	sub.w	r0, r0, sl
 800909e:	2240      	movs	r2, #64	; 0x40
 80090a0:	4082      	lsls	r2, r0
 80090a2:	4313      	orrs	r3, r2
 80090a4:	3401      	adds	r4, #1
 80090a6:	9304      	str	r3, [sp, #16]
 80090a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ac:	4825      	ldr	r0, [pc, #148]	; (8009144 <_svfiprintf_r+0x1ec>)
 80090ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b2:	2206      	movs	r2, #6
 80090b4:	f7f7 f88c 	bl	80001d0 <memchr>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d038      	beq.n	800912e <_svfiprintf_r+0x1d6>
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <_svfiprintf_r+0x1f0>)
 80090be:	bb1b      	cbnz	r3, 8009108 <_svfiprintf_r+0x1b0>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	3307      	adds	r3, #7
 80090c4:	f023 0307 	bic.w	r3, r3, #7
 80090c8:	3308      	adds	r3, #8
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ce:	4433      	add	r3, r6
 80090d0:	9309      	str	r3, [sp, #36]	; 0x24
 80090d2:	e768      	b.n	8008fa6 <_svfiprintf_r+0x4e>
 80090d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d8:	460c      	mov	r4, r1
 80090da:	2001      	movs	r0, #1
 80090dc:	e7a6      	b.n	800902c <_svfiprintf_r+0xd4>
 80090de:	2300      	movs	r3, #0
 80090e0:	3401      	adds	r4, #1
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	4619      	mov	r1, r3
 80090e6:	f04f 0c0a 	mov.w	ip, #10
 80090ea:	4620      	mov	r0, r4
 80090ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f0:	3a30      	subs	r2, #48	; 0x30
 80090f2:	2a09      	cmp	r2, #9
 80090f4:	d903      	bls.n	80090fe <_svfiprintf_r+0x1a6>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0c6      	beq.n	8009088 <_svfiprintf_r+0x130>
 80090fa:	9105      	str	r1, [sp, #20]
 80090fc:	e7c4      	b.n	8009088 <_svfiprintf_r+0x130>
 80090fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009102:	4604      	mov	r4, r0
 8009104:	2301      	movs	r3, #1
 8009106:	e7f0      	b.n	80090ea <_svfiprintf_r+0x192>
 8009108:	ab03      	add	r3, sp, #12
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	462a      	mov	r2, r5
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <_svfiprintf_r+0x1f4>)
 8009110:	a904      	add	r1, sp, #16
 8009112:	4638      	mov	r0, r7
 8009114:	f7fc fc72 	bl	80059fc <_printf_float>
 8009118:	1c42      	adds	r2, r0, #1
 800911a:	4606      	mov	r6, r0
 800911c:	d1d6      	bne.n	80090cc <_svfiprintf_r+0x174>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	065b      	lsls	r3, r3, #25
 8009122:	f53f af2d 	bmi.w	8008f80 <_svfiprintf_r+0x28>
 8009126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009128:	b01d      	add	sp, #116	; 0x74
 800912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912e:	ab03      	add	r3, sp, #12
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	462a      	mov	r2, r5
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <_svfiprintf_r+0x1f4>)
 8009136:	a904      	add	r1, sp, #16
 8009138:	4638      	mov	r0, r7
 800913a:	f7fc ff03 	bl	8005f44 <_printf_i>
 800913e:	e7eb      	b.n	8009118 <_svfiprintf_r+0x1c0>
 8009140:	0800a749 	.word	0x0800a749
 8009144:	0800a753 	.word	0x0800a753
 8009148:	080059fd 	.word	0x080059fd
 800914c:	08008ea5 	.word	0x08008ea5
 8009150:	0800a74f 	.word	0x0800a74f

08009154 <__sfputc_r>:
 8009154:	6893      	ldr	r3, [r2, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	b410      	push	{r4}
 800915c:	6093      	str	r3, [r2, #8]
 800915e:	da08      	bge.n	8009172 <__sfputc_r+0x1e>
 8009160:	6994      	ldr	r4, [r2, #24]
 8009162:	42a3      	cmp	r3, r4
 8009164:	db01      	blt.n	800916a <__sfputc_r+0x16>
 8009166:	290a      	cmp	r1, #10
 8009168:	d103      	bne.n	8009172 <__sfputc_r+0x1e>
 800916a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800916e:	f000 b9e3 	b.w	8009538 <__swbuf_r>
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	1c58      	adds	r0, r3, #1
 8009176:	6010      	str	r0, [r2, #0]
 8009178:	7019      	strb	r1, [r3, #0]
 800917a:	4608      	mov	r0, r1
 800917c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009180:	4770      	bx	lr

08009182 <__sfputs_r>:
 8009182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	4614      	mov	r4, r2
 800918a:	18d5      	adds	r5, r2, r3
 800918c:	42ac      	cmp	r4, r5
 800918e:	d101      	bne.n	8009194 <__sfputs_r+0x12>
 8009190:	2000      	movs	r0, #0
 8009192:	e007      	b.n	80091a4 <__sfputs_r+0x22>
 8009194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009198:	463a      	mov	r2, r7
 800919a:	4630      	mov	r0, r6
 800919c:	f7ff ffda 	bl	8009154 <__sfputc_r>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d1f3      	bne.n	800918c <__sfputs_r+0xa>
 80091a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091a8 <_vfiprintf_r>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	460d      	mov	r5, r1
 80091ae:	b09d      	sub	sp, #116	; 0x74
 80091b0:	4614      	mov	r4, r2
 80091b2:	4698      	mov	r8, r3
 80091b4:	4606      	mov	r6, r0
 80091b6:	b118      	cbz	r0, 80091c0 <_vfiprintf_r+0x18>
 80091b8:	6a03      	ldr	r3, [r0, #32]
 80091ba:	b90b      	cbnz	r3, 80091c0 <_vfiprintf_r+0x18>
 80091bc:	f7fd fa80 	bl	80066c0 <__sinit>
 80091c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	d405      	bmi.n	80091d2 <_vfiprintf_r+0x2a>
 80091c6:	89ab      	ldrh	r3, [r5, #12]
 80091c8:	059a      	lsls	r2, r3, #22
 80091ca:	d402      	bmi.n	80091d2 <_vfiprintf_r+0x2a>
 80091cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ce:	f7fd fba0 	bl	8006912 <__retarget_lock_acquire_recursive>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	071b      	lsls	r3, r3, #28
 80091d6:	d501      	bpl.n	80091dc <_vfiprintf_r+0x34>
 80091d8:	692b      	ldr	r3, [r5, #16]
 80091da:	b99b      	cbnz	r3, 8009204 <_vfiprintf_r+0x5c>
 80091dc:	4629      	mov	r1, r5
 80091de:	4630      	mov	r0, r6
 80091e0:	f000 f9e8 	bl	80095b4 <__swsetup_r>
 80091e4:	b170      	cbz	r0, 8009204 <_vfiprintf_r+0x5c>
 80091e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e8:	07dc      	lsls	r4, r3, #31
 80091ea:	d504      	bpl.n	80091f6 <_vfiprintf_r+0x4e>
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	b01d      	add	sp, #116	; 0x74
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	0598      	lsls	r0, r3, #22
 80091fa:	d4f7      	bmi.n	80091ec <_vfiprintf_r+0x44>
 80091fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fe:	f7fd fb89 	bl	8006914 <__retarget_lock_release_recursive>
 8009202:	e7f3      	b.n	80091ec <_vfiprintf_r+0x44>
 8009204:	2300      	movs	r3, #0
 8009206:	9309      	str	r3, [sp, #36]	; 0x24
 8009208:	2320      	movs	r3, #32
 800920a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800920e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009212:	2330      	movs	r3, #48	; 0x30
 8009214:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093c8 <_vfiprintf_r+0x220>
 8009218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921c:	f04f 0901 	mov.w	r9, #1
 8009220:	4623      	mov	r3, r4
 8009222:	469a      	mov	sl, r3
 8009224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009228:	b10a      	cbz	r2, 800922e <_vfiprintf_r+0x86>
 800922a:	2a25      	cmp	r2, #37	; 0x25
 800922c:	d1f9      	bne.n	8009222 <_vfiprintf_r+0x7a>
 800922e:	ebba 0b04 	subs.w	fp, sl, r4
 8009232:	d00b      	beq.n	800924c <_vfiprintf_r+0xa4>
 8009234:	465b      	mov	r3, fp
 8009236:	4622      	mov	r2, r4
 8009238:	4629      	mov	r1, r5
 800923a:	4630      	mov	r0, r6
 800923c:	f7ff ffa1 	bl	8009182 <__sfputs_r>
 8009240:	3001      	adds	r0, #1
 8009242:	f000 80a9 	beq.w	8009398 <_vfiprintf_r+0x1f0>
 8009246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009248:	445a      	add	r2, fp
 800924a:	9209      	str	r2, [sp, #36]	; 0x24
 800924c:	f89a 3000 	ldrb.w	r3, [sl]
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 80a1 	beq.w	8009398 <_vfiprintf_r+0x1f0>
 8009256:	2300      	movs	r3, #0
 8009258:	f04f 32ff 	mov.w	r2, #4294967295
 800925c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009260:	f10a 0a01 	add.w	sl, sl, #1
 8009264:	9304      	str	r3, [sp, #16]
 8009266:	9307      	str	r3, [sp, #28]
 8009268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926c:	931a      	str	r3, [sp, #104]	; 0x68
 800926e:	4654      	mov	r4, sl
 8009270:	2205      	movs	r2, #5
 8009272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009276:	4854      	ldr	r0, [pc, #336]	; (80093c8 <_vfiprintf_r+0x220>)
 8009278:	f7f6 ffaa 	bl	80001d0 <memchr>
 800927c:	9a04      	ldr	r2, [sp, #16]
 800927e:	b9d8      	cbnz	r0, 80092b8 <_vfiprintf_r+0x110>
 8009280:	06d1      	lsls	r1, r2, #27
 8009282:	bf44      	itt	mi
 8009284:	2320      	movmi	r3, #32
 8009286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928a:	0713      	lsls	r3, r2, #28
 800928c:	bf44      	itt	mi
 800928e:	232b      	movmi	r3, #43	; 0x2b
 8009290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009294:	f89a 3000 	ldrb.w	r3, [sl]
 8009298:	2b2a      	cmp	r3, #42	; 0x2a
 800929a:	d015      	beq.n	80092c8 <_vfiprintf_r+0x120>
 800929c:	9a07      	ldr	r2, [sp, #28]
 800929e:	4654      	mov	r4, sl
 80092a0:	2000      	movs	r0, #0
 80092a2:	f04f 0c0a 	mov.w	ip, #10
 80092a6:	4621      	mov	r1, r4
 80092a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ac:	3b30      	subs	r3, #48	; 0x30
 80092ae:	2b09      	cmp	r3, #9
 80092b0:	d94d      	bls.n	800934e <_vfiprintf_r+0x1a6>
 80092b2:	b1b0      	cbz	r0, 80092e2 <_vfiprintf_r+0x13a>
 80092b4:	9207      	str	r2, [sp, #28]
 80092b6:	e014      	b.n	80092e2 <_vfiprintf_r+0x13a>
 80092b8:	eba0 0308 	sub.w	r3, r0, r8
 80092bc:	fa09 f303 	lsl.w	r3, r9, r3
 80092c0:	4313      	orrs	r3, r2
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	46a2      	mov	sl, r4
 80092c6:	e7d2      	b.n	800926e <_vfiprintf_r+0xc6>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	1d19      	adds	r1, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	9103      	str	r1, [sp, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bfbb      	ittet	lt
 80092d4:	425b      	neglt	r3, r3
 80092d6:	f042 0202 	orrlt.w	r2, r2, #2
 80092da:	9307      	strge	r3, [sp, #28]
 80092dc:	9307      	strlt	r3, [sp, #28]
 80092de:	bfb8      	it	lt
 80092e0:	9204      	strlt	r2, [sp, #16]
 80092e2:	7823      	ldrb	r3, [r4, #0]
 80092e4:	2b2e      	cmp	r3, #46	; 0x2e
 80092e6:	d10c      	bne.n	8009302 <_vfiprintf_r+0x15a>
 80092e8:	7863      	ldrb	r3, [r4, #1]
 80092ea:	2b2a      	cmp	r3, #42	; 0x2a
 80092ec:	d134      	bne.n	8009358 <_vfiprintf_r+0x1b0>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	1d1a      	adds	r2, r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9203      	str	r2, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfb8      	it	lt
 80092fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fe:	3402      	adds	r4, #2
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80093d8 <_vfiprintf_r+0x230>
 8009306:	7821      	ldrb	r1, [r4, #0]
 8009308:	2203      	movs	r2, #3
 800930a:	4650      	mov	r0, sl
 800930c:	f7f6 ff60 	bl	80001d0 <memchr>
 8009310:	b138      	cbz	r0, 8009322 <_vfiprintf_r+0x17a>
 8009312:	9b04      	ldr	r3, [sp, #16]
 8009314:	eba0 000a 	sub.w	r0, r0, sl
 8009318:	2240      	movs	r2, #64	; 0x40
 800931a:	4082      	lsls	r2, r0
 800931c:	4313      	orrs	r3, r2
 800931e:	3401      	adds	r4, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	4829      	ldr	r0, [pc, #164]	; (80093cc <_vfiprintf_r+0x224>)
 8009328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932c:	2206      	movs	r2, #6
 800932e:	f7f6 ff4f 	bl	80001d0 <memchr>
 8009332:	2800      	cmp	r0, #0
 8009334:	d03f      	beq.n	80093b6 <_vfiprintf_r+0x20e>
 8009336:	4b26      	ldr	r3, [pc, #152]	; (80093d0 <_vfiprintf_r+0x228>)
 8009338:	bb1b      	cbnz	r3, 8009382 <_vfiprintf_r+0x1da>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	3308      	adds	r3, #8
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	443b      	add	r3, r7
 800934a:	9309      	str	r3, [sp, #36]	; 0x24
 800934c:	e768      	b.n	8009220 <_vfiprintf_r+0x78>
 800934e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009352:	460c      	mov	r4, r1
 8009354:	2001      	movs	r0, #1
 8009356:	e7a6      	b.n	80092a6 <_vfiprintf_r+0xfe>
 8009358:	2300      	movs	r3, #0
 800935a:	3401      	adds	r4, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	4619      	mov	r1, r3
 8009360:	f04f 0c0a 	mov.w	ip, #10
 8009364:	4620      	mov	r0, r4
 8009366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936a:	3a30      	subs	r2, #48	; 0x30
 800936c:	2a09      	cmp	r2, #9
 800936e:	d903      	bls.n	8009378 <_vfiprintf_r+0x1d0>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0c6      	beq.n	8009302 <_vfiprintf_r+0x15a>
 8009374:	9105      	str	r1, [sp, #20]
 8009376:	e7c4      	b.n	8009302 <_vfiprintf_r+0x15a>
 8009378:	fb0c 2101 	mla	r1, ip, r1, r2
 800937c:	4604      	mov	r4, r0
 800937e:	2301      	movs	r3, #1
 8009380:	e7f0      	b.n	8009364 <_vfiprintf_r+0x1bc>
 8009382:	ab03      	add	r3, sp, #12
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	462a      	mov	r2, r5
 8009388:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <_vfiprintf_r+0x22c>)
 800938a:	a904      	add	r1, sp, #16
 800938c:	4630      	mov	r0, r6
 800938e:	f7fc fb35 	bl	80059fc <_printf_float>
 8009392:	4607      	mov	r7, r0
 8009394:	1c78      	adds	r0, r7, #1
 8009396:	d1d6      	bne.n	8009346 <_vfiprintf_r+0x19e>
 8009398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800939a:	07d9      	lsls	r1, r3, #31
 800939c:	d405      	bmi.n	80093aa <_vfiprintf_r+0x202>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	059a      	lsls	r2, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_vfiprintf_r+0x202>
 80093a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093a6:	f7fd fab5 	bl	8006914 <__retarget_lock_release_recursive>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	065b      	lsls	r3, r3, #25
 80093ae:	f53f af1d 	bmi.w	80091ec <_vfiprintf_r+0x44>
 80093b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093b4:	e71c      	b.n	80091f0 <_vfiprintf_r+0x48>
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	462a      	mov	r2, r5
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <_vfiprintf_r+0x22c>)
 80093be:	a904      	add	r1, sp, #16
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7fc fdbf 	bl	8005f44 <_printf_i>
 80093c6:	e7e4      	b.n	8009392 <_vfiprintf_r+0x1ea>
 80093c8:	0800a749 	.word	0x0800a749
 80093cc:	0800a753 	.word	0x0800a753
 80093d0:	080059fd 	.word	0x080059fd
 80093d4:	08009183 	.word	0x08009183
 80093d8:	0800a74f 	.word	0x0800a74f

080093dc <__sflush_r>:
 80093dc:	898a      	ldrh	r2, [r1, #12]
 80093de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	0710      	lsls	r0, r2, #28
 80093e6:	460c      	mov	r4, r1
 80093e8:	d458      	bmi.n	800949c <__sflush_r+0xc0>
 80093ea:	684b      	ldr	r3, [r1, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dc05      	bgt.n	80093fc <__sflush_r+0x20>
 80093f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dc02      	bgt.n	80093fc <__sflush_r+0x20>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093fe:	2e00      	cmp	r6, #0
 8009400:	d0f9      	beq.n	80093f6 <__sflush_r+0x1a>
 8009402:	2300      	movs	r3, #0
 8009404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009408:	682f      	ldr	r7, [r5, #0]
 800940a:	6a21      	ldr	r1, [r4, #32]
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	d032      	beq.n	8009476 <__sflush_r+0x9a>
 8009410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	075a      	lsls	r2, r3, #29
 8009416:	d505      	bpl.n	8009424 <__sflush_r+0x48>
 8009418:	6863      	ldr	r3, [r4, #4]
 800941a:	1ac0      	subs	r0, r0, r3
 800941c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800941e:	b10b      	cbz	r3, 8009424 <__sflush_r+0x48>
 8009420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009422:	1ac0      	subs	r0, r0, r3
 8009424:	2300      	movs	r3, #0
 8009426:	4602      	mov	r2, r0
 8009428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800942a:	6a21      	ldr	r1, [r4, #32]
 800942c:	4628      	mov	r0, r5
 800942e:	47b0      	blx	r6
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	d106      	bne.n	8009444 <__sflush_r+0x68>
 8009436:	6829      	ldr	r1, [r5, #0]
 8009438:	291d      	cmp	r1, #29
 800943a:	d82b      	bhi.n	8009494 <__sflush_r+0xb8>
 800943c:	4a29      	ldr	r2, [pc, #164]	; (80094e4 <__sflush_r+0x108>)
 800943e:	410a      	asrs	r2, r1
 8009440:	07d6      	lsls	r6, r2, #31
 8009442:	d427      	bmi.n	8009494 <__sflush_r+0xb8>
 8009444:	2200      	movs	r2, #0
 8009446:	6062      	str	r2, [r4, #4]
 8009448:	04d9      	lsls	r1, r3, #19
 800944a:	6922      	ldr	r2, [r4, #16]
 800944c:	6022      	str	r2, [r4, #0]
 800944e:	d504      	bpl.n	800945a <__sflush_r+0x7e>
 8009450:	1c42      	adds	r2, r0, #1
 8009452:	d101      	bne.n	8009458 <__sflush_r+0x7c>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b903      	cbnz	r3, 800945a <__sflush_r+0x7e>
 8009458:	6560      	str	r0, [r4, #84]	; 0x54
 800945a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800945c:	602f      	str	r7, [r5, #0]
 800945e:	2900      	cmp	r1, #0
 8009460:	d0c9      	beq.n	80093f6 <__sflush_r+0x1a>
 8009462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009466:	4299      	cmp	r1, r3
 8009468:	d002      	beq.n	8009470 <__sflush_r+0x94>
 800946a:	4628      	mov	r0, r5
 800946c:	f7fe f8d6 	bl	800761c <_free_r>
 8009470:	2000      	movs	r0, #0
 8009472:	6360      	str	r0, [r4, #52]	; 0x34
 8009474:	e7c0      	b.n	80093f8 <__sflush_r+0x1c>
 8009476:	2301      	movs	r3, #1
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	1c41      	adds	r1, r0, #1
 800947e:	d1c8      	bne.n	8009412 <__sflush_r+0x36>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0c5      	beq.n	8009412 <__sflush_r+0x36>
 8009486:	2b1d      	cmp	r3, #29
 8009488:	d001      	beq.n	800948e <__sflush_r+0xb2>
 800948a:	2b16      	cmp	r3, #22
 800948c:	d101      	bne.n	8009492 <__sflush_r+0xb6>
 800948e:	602f      	str	r7, [r5, #0]
 8009490:	e7b1      	b.n	80093f6 <__sflush_r+0x1a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	e7ad      	b.n	80093f8 <__sflush_r+0x1c>
 800949c:	690f      	ldr	r7, [r1, #16]
 800949e:	2f00      	cmp	r7, #0
 80094a0:	d0a9      	beq.n	80093f6 <__sflush_r+0x1a>
 80094a2:	0793      	lsls	r3, r2, #30
 80094a4:	680e      	ldr	r6, [r1, #0]
 80094a6:	bf08      	it	eq
 80094a8:	694b      	ldreq	r3, [r1, #20]
 80094aa:	600f      	str	r7, [r1, #0]
 80094ac:	bf18      	it	ne
 80094ae:	2300      	movne	r3, #0
 80094b0:	eba6 0807 	sub.w	r8, r6, r7
 80094b4:	608b      	str	r3, [r1, #8]
 80094b6:	f1b8 0f00 	cmp.w	r8, #0
 80094ba:	dd9c      	ble.n	80093f6 <__sflush_r+0x1a>
 80094bc:	6a21      	ldr	r1, [r4, #32]
 80094be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094c0:	4643      	mov	r3, r8
 80094c2:	463a      	mov	r2, r7
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b0      	blx	r6
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dc06      	bgt.n	80094da <__sflush_r+0xfe>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e78e      	b.n	80093f8 <__sflush_r+0x1c>
 80094da:	4407      	add	r7, r0
 80094dc:	eba8 0800 	sub.w	r8, r8, r0
 80094e0:	e7e9      	b.n	80094b6 <__sflush_r+0xda>
 80094e2:	bf00      	nop
 80094e4:	dfbffffe 	.word	0xdfbffffe

080094e8 <_fflush_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	690b      	ldr	r3, [r1, #16]
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	b913      	cbnz	r3, 80094f8 <_fflush_r+0x10>
 80094f2:	2500      	movs	r5, #0
 80094f4:	4628      	mov	r0, r5
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	b118      	cbz	r0, 8009502 <_fflush_r+0x1a>
 80094fa:	6a03      	ldr	r3, [r0, #32]
 80094fc:	b90b      	cbnz	r3, 8009502 <_fflush_r+0x1a>
 80094fe:	f7fd f8df 	bl	80066c0 <__sinit>
 8009502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0f3      	beq.n	80094f2 <_fflush_r+0xa>
 800950a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800950c:	07d0      	lsls	r0, r2, #31
 800950e:	d404      	bmi.n	800951a <_fflush_r+0x32>
 8009510:	0599      	lsls	r1, r3, #22
 8009512:	d402      	bmi.n	800951a <_fflush_r+0x32>
 8009514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009516:	f7fd f9fc 	bl	8006912 <__retarget_lock_acquire_recursive>
 800951a:	4628      	mov	r0, r5
 800951c:	4621      	mov	r1, r4
 800951e:	f7ff ff5d 	bl	80093dc <__sflush_r>
 8009522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	4605      	mov	r5, r0
 8009528:	d4e4      	bmi.n	80094f4 <_fflush_r+0xc>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	059b      	lsls	r3, r3, #22
 800952e:	d4e1      	bmi.n	80094f4 <_fflush_r+0xc>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f7fd f9ef 	bl	8006914 <__retarget_lock_release_recursive>
 8009536:	e7dd      	b.n	80094f4 <_fflush_r+0xc>

08009538 <__swbuf_r>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	460e      	mov	r6, r1
 800953c:	4614      	mov	r4, r2
 800953e:	4605      	mov	r5, r0
 8009540:	b118      	cbz	r0, 800954a <__swbuf_r+0x12>
 8009542:	6a03      	ldr	r3, [r0, #32]
 8009544:	b90b      	cbnz	r3, 800954a <__swbuf_r+0x12>
 8009546:	f7fd f8bb 	bl	80066c0 <__sinit>
 800954a:	69a3      	ldr	r3, [r4, #24]
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	071a      	lsls	r2, r3, #28
 8009552:	d525      	bpl.n	80095a0 <__swbuf_r+0x68>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	b31b      	cbz	r3, 80095a0 <__swbuf_r+0x68>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	6922      	ldr	r2, [r4, #16]
 800955c:	1a98      	subs	r0, r3, r2
 800955e:	6963      	ldr	r3, [r4, #20]
 8009560:	b2f6      	uxtb	r6, r6
 8009562:	4283      	cmp	r3, r0
 8009564:	4637      	mov	r7, r6
 8009566:	dc04      	bgt.n	8009572 <__swbuf_r+0x3a>
 8009568:	4621      	mov	r1, r4
 800956a:	4628      	mov	r0, r5
 800956c:	f7ff ffbc 	bl	80094e8 <_fflush_r>
 8009570:	b9e0      	cbnz	r0, 80095ac <__swbuf_r+0x74>
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	3b01      	subs	r3, #1
 8009576:	60a3      	str	r3, [r4, #8]
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	6022      	str	r2, [r4, #0]
 800957e:	701e      	strb	r6, [r3, #0]
 8009580:	6962      	ldr	r2, [r4, #20]
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	429a      	cmp	r2, r3
 8009586:	d004      	beq.n	8009592 <__swbuf_r+0x5a>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	07db      	lsls	r3, r3, #31
 800958c:	d506      	bpl.n	800959c <__swbuf_r+0x64>
 800958e:	2e0a      	cmp	r6, #10
 8009590:	d104      	bne.n	800959c <__swbuf_r+0x64>
 8009592:	4621      	mov	r1, r4
 8009594:	4628      	mov	r0, r5
 8009596:	f7ff ffa7 	bl	80094e8 <_fflush_r>
 800959a:	b938      	cbnz	r0, 80095ac <__swbuf_r+0x74>
 800959c:	4638      	mov	r0, r7
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f806 	bl	80095b4 <__swsetup_r>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d0d5      	beq.n	8009558 <__swbuf_r+0x20>
 80095ac:	f04f 37ff 	mov.w	r7, #4294967295
 80095b0:	e7f4      	b.n	800959c <__swbuf_r+0x64>
	...

080095b4 <__swsetup_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <__swsetup_r+0xac>)
 80095b8:	4605      	mov	r5, r0
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	460c      	mov	r4, r1
 80095be:	b118      	cbz	r0, 80095c8 <__swsetup_r+0x14>
 80095c0:	6a03      	ldr	r3, [r0, #32]
 80095c2:	b90b      	cbnz	r3, 80095c8 <__swsetup_r+0x14>
 80095c4:	f7fd f87c 	bl	80066c0 <__sinit>
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ce:	0718      	lsls	r0, r3, #28
 80095d0:	d422      	bmi.n	8009618 <__swsetup_r+0x64>
 80095d2:	06d9      	lsls	r1, r3, #27
 80095d4:	d407      	bmi.n	80095e6 <__swsetup_r+0x32>
 80095d6:	2309      	movs	r3, #9
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e034      	b.n	8009650 <__swsetup_r+0x9c>
 80095e6:	0758      	lsls	r0, r3, #29
 80095e8:	d512      	bpl.n	8009610 <__swsetup_r+0x5c>
 80095ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ec:	b141      	cbz	r1, 8009600 <__swsetup_r+0x4c>
 80095ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d002      	beq.n	80095fc <__swsetup_r+0x48>
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7fe f810 	bl	800761c <_free_r>
 80095fc:	2300      	movs	r3, #0
 80095fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	2300      	movs	r3, #0
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f043 0308 	orr.w	r3, r3, #8
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	b94b      	cbnz	r3, 8009630 <__swsetup_r+0x7c>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009626:	d003      	beq.n	8009630 <__swsetup_r+0x7c>
 8009628:	4621      	mov	r1, r4
 800962a:	4628      	mov	r0, r5
 800962c:	f000 fc7e 	bl	8009f2c <__smakebuf_r>
 8009630:	89a0      	ldrh	r0, [r4, #12]
 8009632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009636:	f010 0301 	ands.w	r3, r0, #1
 800963a:	d00a      	beq.n	8009652 <__swsetup_r+0x9e>
 800963c:	2300      	movs	r3, #0
 800963e:	60a3      	str	r3, [r4, #8]
 8009640:	6963      	ldr	r3, [r4, #20]
 8009642:	425b      	negs	r3, r3
 8009644:	61a3      	str	r3, [r4, #24]
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	b943      	cbnz	r3, 800965c <__swsetup_r+0xa8>
 800964a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800964e:	d1c4      	bne.n	80095da <__swsetup_r+0x26>
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	0781      	lsls	r1, r0, #30
 8009654:	bf58      	it	pl
 8009656:	6963      	ldrpl	r3, [r4, #20]
 8009658:	60a3      	str	r3, [r4, #8]
 800965a:	e7f4      	b.n	8009646 <__swsetup_r+0x92>
 800965c:	2000      	movs	r0, #0
 800965e:	e7f7      	b.n	8009650 <__swsetup_r+0x9c>
 8009660:	200000a0 	.word	0x200000a0

08009664 <memmove>:
 8009664:	4288      	cmp	r0, r1
 8009666:	b510      	push	{r4, lr}
 8009668:	eb01 0402 	add.w	r4, r1, r2
 800966c:	d902      	bls.n	8009674 <memmove+0x10>
 800966e:	4284      	cmp	r4, r0
 8009670:	4623      	mov	r3, r4
 8009672:	d807      	bhi.n	8009684 <memmove+0x20>
 8009674:	1e43      	subs	r3, r0, #1
 8009676:	42a1      	cmp	r1, r4
 8009678:	d008      	beq.n	800968c <memmove+0x28>
 800967a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800967e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009682:	e7f8      	b.n	8009676 <memmove+0x12>
 8009684:	4402      	add	r2, r0
 8009686:	4601      	mov	r1, r0
 8009688:	428a      	cmp	r2, r1
 800968a:	d100      	bne.n	800968e <memmove+0x2a>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009696:	e7f7      	b.n	8009688 <memmove+0x24>

08009698 <strncmp>:
 8009698:	b510      	push	{r4, lr}
 800969a:	b16a      	cbz	r2, 80096b8 <strncmp+0x20>
 800969c:	3901      	subs	r1, #1
 800969e:	1884      	adds	r4, r0, r2
 80096a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d103      	bne.n	80096b4 <strncmp+0x1c>
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d001      	beq.n	80096b4 <strncmp+0x1c>
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	d1f5      	bne.n	80096a0 <strncmp+0x8>
 80096b4:	1ad0      	subs	r0, r2, r3
 80096b6:	bd10      	pop	{r4, pc}
 80096b8:	4610      	mov	r0, r2
 80096ba:	e7fc      	b.n	80096b6 <strncmp+0x1e>

080096bc <_sbrk_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	; (80096d8 <_sbrk_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f8 ffe0 	bl	800268c <_sbrk>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_sbrk_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_sbrk_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20000624 	.word	0x20000624

080096dc <memcpy>:
 80096dc:	440a      	add	r2, r1
 80096de:	4291      	cmp	r1, r2
 80096e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e4:	d100      	bne.n	80096e8 <memcpy+0xc>
 80096e6:	4770      	bx	lr
 80096e8:	b510      	push	{r4, lr}
 80096ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f2:	4291      	cmp	r1, r2
 80096f4:	d1f9      	bne.n	80096ea <memcpy+0xe>
 80096f6:	bd10      	pop	{r4, pc}

080096f8 <nan>:
 80096f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009700 <nan+0x8>
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	00000000 	.word	0x00000000
 8009704:	7ff80000 	.word	0x7ff80000

08009708 <__assert_func>:
 8009708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800970a:	4614      	mov	r4, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <__assert_func+0x2c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4605      	mov	r5, r0
 8009714:	68d8      	ldr	r0, [r3, #12]
 8009716:	b14c      	cbz	r4, 800972c <__assert_func+0x24>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <__assert_func+0x30>)
 800971a:	9100      	str	r1, [sp, #0]
 800971c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009720:	4906      	ldr	r1, [pc, #24]	; (800973c <__assert_func+0x34>)
 8009722:	462b      	mov	r3, r5
 8009724:	f000 fbca 	bl	8009ebc <fiprintf>
 8009728:	f000 fc5e 	bl	8009fe8 <abort>
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <__assert_func+0x38>)
 800972e:	461c      	mov	r4, r3
 8009730:	e7f3      	b.n	800971a <__assert_func+0x12>
 8009732:	bf00      	nop
 8009734:	200000a0 	.word	0x200000a0
 8009738:	0800a762 	.word	0x0800a762
 800973c:	0800a76f 	.word	0x0800a76f
 8009740:	0800a79d 	.word	0x0800a79d

08009744 <_calloc_r>:
 8009744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009746:	fba1 2402 	umull	r2, r4, r1, r2
 800974a:	b94c      	cbnz	r4, 8009760 <_calloc_r+0x1c>
 800974c:	4611      	mov	r1, r2
 800974e:	9201      	str	r2, [sp, #4]
 8009750:	f7fd ffd8 	bl	8007704 <_malloc_r>
 8009754:	9a01      	ldr	r2, [sp, #4]
 8009756:	4605      	mov	r5, r0
 8009758:	b930      	cbnz	r0, 8009768 <_calloc_r+0x24>
 800975a:	4628      	mov	r0, r5
 800975c:	b003      	add	sp, #12
 800975e:	bd30      	pop	{r4, r5, pc}
 8009760:	220c      	movs	r2, #12
 8009762:	6002      	str	r2, [r0, #0]
 8009764:	2500      	movs	r5, #0
 8009766:	e7f8      	b.n	800975a <_calloc_r+0x16>
 8009768:	4621      	mov	r1, r4
 800976a:	f7fd f854 	bl	8006816 <memset>
 800976e:	e7f4      	b.n	800975a <_calloc_r+0x16>

08009770 <rshift>:
 8009770:	6903      	ldr	r3, [r0, #16]
 8009772:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800977a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800977e:	f100 0414 	add.w	r4, r0, #20
 8009782:	dd45      	ble.n	8009810 <rshift+0xa0>
 8009784:	f011 011f 	ands.w	r1, r1, #31
 8009788:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800978c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009790:	d10c      	bne.n	80097ac <rshift+0x3c>
 8009792:	f100 0710 	add.w	r7, r0, #16
 8009796:	4629      	mov	r1, r5
 8009798:	42b1      	cmp	r1, r6
 800979a:	d334      	bcc.n	8009806 <rshift+0x96>
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	1eea      	subs	r2, r5, #3
 80097a2:	4296      	cmp	r6, r2
 80097a4:	bf38      	it	cc
 80097a6:	2300      	movcc	r3, #0
 80097a8:	4423      	add	r3, r4
 80097aa:	e015      	b.n	80097d8 <rshift+0x68>
 80097ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097b0:	f1c1 0820 	rsb	r8, r1, #32
 80097b4:	40cf      	lsrs	r7, r1
 80097b6:	f105 0e04 	add.w	lr, r5, #4
 80097ba:	46a1      	mov	r9, r4
 80097bc:	4576      	cmp	r6, lr
 80097be:	46f4      	mov	ip, lr
 80097c0:	d815      	bhi.n	80097ee <rshift+0x7e>
 80097c2:	1a9a      	subs	r2, r3, r2
 80097c4:	0092      	lsls	r2, r2, #2
 80097c6:	3a04      	subs	r2, #4
 80097c8:	3501      	adds	r5, #1
 80097ca:	42ae      	cmp	r6, r5
 80097cc:	bf38      	it	cc
 80097ce:	2200      	movcc	r2, #0
 80097d0:	18a3      	adds	r3, r4, r2
 80097d2:	50a7      	str	r7, [r4, r2]
 80097d4:	b107      	cbz	r7, 80097d8 <rshift+0x68>
 80097d6:	3304      	adds	r3, #4
 80097d8:	1b1a      	subs	r2, r3, r4
 80097da:	42a3      	cmp	r3, r4
 80097dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097e0:	bf08      	it	eq
 80097e2:	2300      	moveq	r3, #0
 80097e4:	6102      	str	r2, [r0, #16]
 80097e6:	bf08      	it	eq
 80097e8:	6143      	streq	r3, [r0, #20]
 80097ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ee:	f8dc c000 	ldr.w	ip, [ip]
 80097f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80097f6:	ea4c 0707 	orr.w	r7, ip, r7
 80097fa:	f849 7b04 	str.w	r7, [r9], #4
 80097fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009802:	40cf      	lsrs	r7, r1
 8009804:	e7da      	b.n	80097bc <rshift+0x4c>
 8009806:	f851 cb04 	ldr.w	ip, [r1], #4
 800980a:	f847 cf04 	str.w	ip, [r7, #4]!
 800980e:	e7c3      	b.n	8009798 <rshift+0x28>
 8009810:	4623      	mov	r3, r4
 8009812:	e7e1      	b.n	80097d8 <rshift+0x68>

08009814 <__hexdig_fun>:
 8009814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009818:	2b09      	cmp	r3, #9
 800981a:	d802      	bhi.n	8009822 <__hexdig_fun+0xe>
 800981c:	3820      	subs	r0, #32
 800981e:	b2c0      	uxtb	r0, r0
 8009820:	4770      	bx	lr
 8009822:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009826:	2b05      	cmp	r3, #5
 8009828:	d801      	bhi.n	800982e <__hexdig_fun+0x1a>
 800982a:	3847      	subs	r0, #71	; 0x47
 800982c:	e7f7      	b.n	800981e <__hexdig_fun+0xa>
 800982e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009832:	2b05      	cmp	r3, #5
 8009834:	d801      	bhi.n	800983a <__hexdig_fun+0x26>
 8009836:	3827      	subs	r0, #39	; 0x27
 8009838:	e7f1      	b.n	800981e <__hexdig_fun+0xa>
 800983a:	2000      	movs	r0, #0
 800983c:	4770      	bx	lr
	...

08009840 <__gethex>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	4617      	mov	r7, r2
 8009846:	680a      	ldr	r2, [r1, #0]
 8009848:	b085      	sub	sp, #20
 800984a:	f102 0b02 	add.w	fp, r2, #2
 800984e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009852:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009856:	4681      	mov	r9, r0
 8009858:	468a      	mov	sl, r1
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	32fe      	adds	r2, #254	; 0xfe
 800985e:	eb02 030b 	add.w	r3, r2, fp
 8009862:	46d8      	mov	r8, fp
 8009864:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	2830      	cmp	r0, #48	; 0x30
 800986c:	d0f7      	beq.n	800985e <__gethex+0x1e>
 800986e:	f7ff ffd1 	bl	8009814 <__hexdig_fun>
 8009872:	4604      	mov	r4, r0
 8009874:	2800      	cmp	r0, #0
 8009876:	d138      	bne.n	80098ea <__gethex+0xaa>
 8009878:	49a7      	ldr	r1, [pc, #668]	; (8009b18 <__gethex+0x2d8>)
 800987a:	2201      	movs	r2, #1
 800987c:	4640      	mov	r0, r8
 800987e:	f7ff ff0b 	bl	8009698 <strncmp>
 8009882:	4606      	mov	r6, r0
 8009884:	2800      	cmp	r0, #0
 8009886:	d169      	bne.n	800995c <__gethex+0x11c>
 8009888:	f898 0001 	ldrb.w	r0, [r8, #1]
 800988c:	465d      	mov	r5, fp
 800988e:	f7ff ffc1 	bl	8009814 <__hexdig_fun>
 8009892:	2800      	cmp	r0, #0
 8009894:	d064      	beq.n	8009960 <__gethex+0x120>
 8009896:	465a      	mov	r2, fp
 8009898:	7810      	ldrb	r0, [r2, #0]
 800989a:	2830      	cmp	r0, #48	; 0x30
 800989c:	4690      	mov	r8, r2
 800989e:	f102 0201 	add.w	r2, r2, #1
 80098a2:	d0f9      	beq.n	8009898 <__gethex+0x58>
 80098a4:	f7ff ffb6 	bl	8009814 <__hexdig_fun>
 80098a8:	2301      	movs	r3, #1
 80098aa:	fab0 f480 	clz	r4, r0
 80098ae:	0964      	lsrs	r4, r4, #5
 80098b0:	465e      	mov	r6, fp
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	4642      	mov	r2, r8
 80098b6:	4615      	mov	r5, r2
 80098b8:	3201      	adds	r2, #1
 80098ba:	7828      	ldrb	r0, [r5, #0]
 80098bc:	f7ff ffaa 	bl	8009814 <__hexdig_fun>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d1f8      	bne.n	80098b6 <__gethex+0x76>
 80098c4:	4994      	ldr	r1, [pc, #592]	; (8009b18 <__gethex+0x2d8>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7ff fee5 	bl	8009698 <strncmp>
 80098ce:	b978      	cbnz	r0, 80098f0 <__gethex+0xb0>
 80098d0:	b946      	cbnz	r6, 80098e4 <__gethex+0xa4>
 80098d2:	1c6e      	adds	r6, r5, #1
 80098d4:	4632      	mov	r2, r6
 80098d6:	4615      	mov	r5, r2
 80098d8:	3201      	adds	r2, #1
 80098da:	7828      	ldrb	r0, [r5, #0]
 80098dc:	f7ff ff9a 	bl	8009814 <__hexdig_fun>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d1f8      	bne.n	80098d6 <__gethex+0x96>
 80098e4:	1b73      	subs	r3, r6, r5
 80098e6:	009e      	lsls	r6, r3, #2
 80098e8:	e004      	b.n	80098f4 <__gethex+0xb4>
 80098ea:	2400      	movs	r4, #0
 80098ec:	4626      	mov	r6, r4
 80098ee:	e7e1      	b.n	80098b4 <__gethex+0x74>
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	d1f7      	bne.n	80098e4 <__gethex+0xa4>
 80098f4:	782b      	ldrb	r3, [r5, #0]
 80098f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098fa:	2b50      	cmp	r3, #80	; 0x50
 80098fc:	d13d      	bne.n	800997a <__gethex+0x13a>
 80098fe:	786b      	ldrb	r3, [r5, #1]
 8009900:	2b2b      	cmp	r3, #43	; 0x2b
 8009902:	d02f      	beq.n	8009964 <__gethex+0x124>
 8009904:	2b2d      	cmp	r3, #45	; 0x2d
 8009906:	d031      	beq.n	800996c <__gethex+0x12c>
 8009908:	1c69      	adds	r1, r5, #1
 800990a:	f04f 0b00 	mov.w	fp, #0
 800990e:	7808      	ldrb	r0, [r1, #0]
 8009910:	f7ff ff80 	bl	8009814 <__hexdig_fun>
 8009914:	1e42      	subs	r2, r0, #1
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	2a18      	cmp	r2, #24
 800991a:	d82e      	bhi.n	800997a <__gethex+0x13a>
 800991c:	f1a0 0210 	sub.w	r2, r0, #16
 8009920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009924:	f7ff ff76 	bl	8009814 <__hexdig_fun>
 8009928:	f100 3cff 	add.w	ip, r0, #4294967295
 800992c:	fa5f fc8c 	uxtb.w	ip, ip
 8009930:	f1bc 0f18 	cmp.w	ip, #24
 8009934:	d91d      	bls.n	8009972 <__gethex+0x132>
 8009936:	f1bb 0f00 	cmp.w	fp, #0
 800993a:	d000      	beq.n	800993e <__gethex+0xfe>
 800993c:	4252      	negs	r2, r2
 800993e:	4416      	add	r6, r2
 8009940:	f8ca 1000 	str.w	r1, [sl]
 8009944:	b1dc      	cbz	r4, 800997e <__gethex+0x13e>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bf14      	ite	ne
 800994c:	f04f 0800 	movne.w	r8, #0
 8009950:	f04f 0806 	moveq.w	r8, #6
 8009954:	4640      	mov	r0, r8
 8009956:	b005      	add	sp, #20
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	4645      	mov	r5, r8
 800995e:	4626      	mov	r6, r4
 8009960:	2401      	movs	r4, #1
 8009962:	e7c7      	b.n	80098f4 <__gethex+0xb4>
 8009964:	f04f 0b00 	mov.w	fp, #0
 8009968:	1ca9      	adds	r1, r5, #2
 800996a:	e7d0      	b.n	800990e <__gethex+0xce>
 800996c:	f04f 0b01 	mov.w	fp, #1
 8009970:	e7fa      	b.n	8009968 <__gethex+0x128>
 8009972:	230a      	movs	r3, #10
 8009974:	fb03 0002 	mla	r0, r3, r2, r0
 8009978:	e7d0      	b.n	800991c <__gethex+0xdc>
 800997a:	4629      	mov	r1, r5
 800997c:	e7e0      	b.n	8009940 <__gethex+0x100>
 800997e:	eba5 0308 	sub.w	r3, r5, r8
 8009982:	3b01      	subs	r3, #1
 8009984:	4621      	mov	r1, r4
 8009986:	2b07      	cmp	r3, #7
 8009988:	dc0a      	bgt.n	80099a0 <__gethex+0x160>
 800998a:	4648      	mov	r0, r9
 800998c:	f7fd ff46 	bl	800781c <_Balloc>
 8009990:	4604      	mov	r4, r0
 8009992:	b940      	cbnz	r0, 80099a6 <__gethex+0x166>
 8009994:	4b61      	ldr	r3, [pc, #388]	; (8009b1c <__gethex+0x2dc>)
 8009996:	4602      	mov	r2, r0
 8009998:	21e4      	movs	r1, #228	; 0xe4
 800999a:	4861      	ldr	r0, [pc, #388]	; (8009b20 <__gethex+0x2e0>)
 800999c:	f7ff feb4 	bl	8009708 <__assert_func>
 80099a0:	3101      	adds	r1, #1
 80099a2:	105b      	asrs	r3, r3, #1
 80099a4:	e7ef      	b.n	8009986 <__gethex+0x146>
 80099a6:	f100 0a14 	add.w	sl, r0, #20
 80099aa:	2300      	movs	r3, #0
 80099ac:	495a      	ldr	r1, [pc, #360]	; (8009b18 <__gethex+0x2d8>)
 80099ae:	f8cd a004 	str.w	sl, [sp, #4]
 80099b2:	469b      	mov	fp, r3
 80099b4:	45a8      	cmp	r8, r5
 80099b6:	d342      	bcc.n	8009a3e <__gethex+0x1fe>
 80099b8:	9801      	ldr	r0, [sp, #4]
 80099ba:	f840 bb04 	str.w	fp, [r0], #4
 80099be:	eba0 000a 	sub.w	r0, r0, sl
 80099c2:	1080      	asrs	r0, r0, #2
 80099c4:	6120      	str	r0, [r4, #16]
 80099c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80099ca:	4658      	mov	r0, fp
 80099cc:	f7fe f818 	bl	8007a00 <__hi0bits>
 80099d0:	683d      	ldr	r5, [r7, #0]
 80099d2:	eba8 0000 	sub.w	r0, r8, r0
 80099d6:	42a8      	cmp	r0, r5
 80099d8:	dd59      	ble.n	8009a8e <__gethex+0x24e>
 80099da:	eba0 0805 	sub.w	r8, r0, r5
 80099de:	4641      	mov	r1, r8
 80099e0:	4620      	mov	r0, r4
 80099e2:	f7fe fba7 	bl	8008134 <__any_on>
 80099e6:	4683      	mov	fp, r0
 80099e8:	b1b8      	cbz	r0, 8009a1a <__gethex+0x1da>
 80099ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80099ee:	1159      	asrs	r1, r3, #5
 80099f0:	f003 021f 	and.w	r2, r3, #31
 80099f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099f8:	f04f 0b01 	mov.w	fp, #1
 80099fc:	fa0b f202 	lsl.w	r2, fp, r2
 8009a00:	420a      	tst	r2, r1
 8009a02:	d00a      	beq.n	8009a1a <__gethex+0x1da>
 8009a04:	455b      	cmp	r3, fp
 8009a06:	dd06      	ble.n	8009a16 <__gethex+0x1d6>
 8009a08:	f1a8 0102 	sub.w	r1, r8, #2
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f7fe fb91 	bl	8008134 <__any_on>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d138      	bne.n	8009a88 <__gethex+0x248>
 8009a16:	f04f 0b02 	mov.w	fp, #2
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7ff fea7 	bl	8009770 <rshift>
 8009a22:	4446      	add	r6, r8
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	42b3      	cmp	r3, r6
 8009a28:	da41      	bge.n	8009aae <__gethex+0x26e>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4648      	mov	r0, r9
 8009a2e:	f7fd ff35 	bl	800789c <_Bfree>
 8009a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a34:	2300      	movs	r3, #0
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009a3c:	e78a      	b.n	8009954 <__gethex+0x114>
 8009a3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a42:	2a2e      	cmp	r2, #46	; 0x2e
 8009a44:	d014      	beq.n	8009a70 <__gethex+0x230>
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d106      	bne.n	8009a58 <__gethex+0x218>
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	f843 bb04 	str.w	fp, [r3], #4
 8009a50:	f04f 0b00 	mov.w	fp, #0
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	465b      	mov	r3, fp
 8009a58:	7828      	ldrb	r0, [r5, #0]
 8009a5a:	9303      	str	r3, [sp, #12]
 8009a5c:	f7ff feda 	bl	8009814 <__hexdig_fun>
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	f000 000f 	and.w	r0, r0, #15
 8009a66:	4098      	lsls	r0, r3
 8009a68:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	e7a1      	b.n	80099b4 <__gethex+0x174>
 8009a70:	45a8      	cmp	r8, r5
 8009a72:	d8e8      	bhi.n	8009a46 <__gethex+0x206>
 8009a74:	2201      	movs	r2, #1
 8009a76:	4628      	mov	r0, r5
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	f7ff fe0d 	bl	8009698 <strncmp>
 8009a7e:	4926      	ldr	r1, [pc, #152]	; (8009b18 <__gethex+0x2d8>)
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d1df      	bne.n	8009a46 <__gethex+0x206>
 8009a86:	e795      	b.n	80099b4 <__gethex+0x174>
 8009a88:	f04f 0b03 	mov.w	fp, #3
 8009a8c:	e7c5      	b.n	8009a1a <__gethex+0x1da>
 8009a8e:	da0b      	bge.n	8009aa8 <__gethex+0x268>
 8009a90:	eba5 0800 	sub.w	r8, r5, r0
 8009a94:	4621      	mov	r1, r4
 8009a96:	4642      	mov	r2, r8
 8009a98:	4648      	mov	r0, r9
 8009a9a:	f7fe f919 	bl	8007cd0 <__lshift>
 8009a9e:	eba6 0608 	sub.w	r6, r6, r8
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	f100 0a14 	add.w	sl, r0, #20
 8009aa8:	f04f 0b00 	mov.w	fp, #0
 8009aac:	e7ba      	b.n	8009a24 <__gethex+0x1e4>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	42b3      	cmp	r3, r6
 8009ab2:	dd73      	ble.n	8009b9c <__gethex+0x35c>
 8009ab4:	1b9e      	subs	r6, r3, r6
 8009ab6:	42b5      	cmp	r5, r6
 8009ab8:	dc34      	bgt.n	8009b24 <__gethex+0x2e4>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d023      	beq.n	8009b08 <__gethex+0x2c8>
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d025      	beq.n	8009b10 <__gethex+0x2d0>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d115      	bne.n	8009af4 <__gethex+0x2b4>
 8009ac8:	42b5      	cmp	r5, r6
 8009aca:	d113      	bne.n	8009af4 <__gethex+0x2b4>
 8009acc:	2d01      	cmp	r5, #1
 8009ace:	d10b      	bne.n	8009ae8 <__gethex+0x2a8>
 8009ad0:	9a02      	ldr	r2, [sp, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	6123      	str	r3, [r4, #16]
 8009ada:	f8ca 3000 	str.w	r3, [sl]
 8009ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009ae4:	601c      	str	r4, [r3, #0]
 8009ae6:	e735      	b.n	8009954 <__gethex+0x114>
 8009ae8:	1e69      	subs	r1, r5, #1
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7fe fb22 	bl	8008134 <__any_on>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1ed      	bne.n	8009ad0 <__gethex+0x290>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4648      	mov	r0, r9
 8009af8:	f7fd fed0 	bl	800789c <_Bfree>
 8009afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afe:	2300      	movs	r3, #0
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b06:	e725      	b.n	8009954 <__gethex+0x114>
 8009b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f2      	bne.n	8009af4 <__gethex+0x2b4>
 8009b0e:	e7df      	b.n	8009ad0 <__gethex+0x290>
 8009b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1dc      	bne.n	8009ad0 <__gethex+0x290>
 8009b16:	e7ed      	b.n	8009af4 <__gethex+0x2b4>
 8009b18:	0800a5f4 	.word	0x0800a5f4
 8009b1c:	0800a48c 	.word	0x0800a48c
 8009b20:	0800a79e 	.word	0x0800a79e
 8009b24:	f106 38ff 	add.w	r8, r6, #4294967295
 8009b28:	f1bb 0f00 	cmp.w	fp, #0
 8009b2c:	d133      	bne.n	8009b96 <__gethex+0x356>
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	d004      	beq.n	8009b3e <__gethex+0x2fe>
 8009b34:	4641      	mov	r1, r8
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7fe fafc 	bl	8008134 <__any_on>
 8009b3c:	4683      	mov	fp, r0
 8009b3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b42:	2301      	movs	r3, #1
 8009b44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b48:	f008 081f 	and.w	r8, r8, #31
 8009b4c:	fa03 f308 	lsl.w	r3, r3, r8
 8009b50:	4213      	tst	r3, r2
 8009b52:	4631      	mov	r1, r6
 8009b54:	4620      	mov	r0, r4
 8009b56:	bf18      	it	ne
 8009b58:	f04b 0b02 	orrne.w	fp, fp, #2
 8009b5c:	1bad      	subs	r5, r5, r6
 8009b5e:	f7ff fe07 	bl	8009770 <rshift>
 8009b62:	687e      	ldr	r6, [r7, #4]
 8009b64:	f04f 0802 	mov.w	r8, #2
 8009b68:	f1bb 0f00 	cmp.w	fp, #0
 8009b6c:	d04a      	beq.n	8009c04 <__gethex+0x3c4>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d016      	beq.n	8009ba2 <__gethex+0x362>
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d018      	beq.n	8009baa <__gethex+0x36a>
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d109      	bne.n	8009b90 <__gethex+0x350>
 8009b7c:	f01b 0f02 	tst.w	fp, #2
 8009b80:	d006      	beq.n	8009b90 <__gethex+0x350>
 8009b82:	f8da 3000 	ldr.w	r3, [sl]
 8009b86:	ea4b 0b03 	orr.w	fp, fp, r3
 8009b8a:	f01b 0f01 	tst.w	fp, #1
 8009b8e:	d10f      	bne.n	8009bb0 <__gethex+0x370>
 8009b90:	f048 0810 	orr.w	r8, r8, #16
 8009b94:	e036      	b.n	8009c04 <__gethex+0x3c4>
 8009b96:	f04f 0b01 	mov.w	fp, #1
 8009b9a:	e7d0      	b.n	8009b3e <__gethex+0x2fe>
 8009b9c:	f04f 0801 	mov.w	r8, #1
 8009ba0:	e7e2      	b.n	8009b68 <__gethex+0x328>
 8009ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba4:	f1c3 0301 	rsb	r3, r3, #1
 8009ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0ef      	beq.n	8009b90 <__gethex+0x350>
 8009bb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bb4:	f104 0214 	add.w	r2, r4, #20
 8009bb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4694      	mov	ip, r2
 8009bc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8009bca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009bce:	d01e      	beq.n	8009c0e <__gethex+0x3ce>
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	f8cc 1000 	str.w	r1, [ip]
 8009bd6:	f1b8 0f02 	cmp.w	r8, #2
 8009bda:	f104 0214 	add.w	r2, r4, #20
 8009bde:	d13d      	bne.n	8009c5c <__gethex+0x41c>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	d10b      	bne.n	8009c00 <__gethex+0x3c0>
 8009be8:	1169      	asrs	r1, r5, #5
 8009bea:	2301      	movs	r3, #1
 8009bec:	f005 051f 	and.w	r5, r5, #31
 8009bf0:	fa03 f505 	lsl.w	r5, r3, r5
 8009bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf8:	421d      	tst	r5, r3
 8009bfa:	bf18      	it	ne
 8009bfc:	f04f 0801 	movne.w	r8, #1
 8009c00:	f048 0820 	orr.w	r8, r8, #32
 8009c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c06:	601c      	str	r4, [r3, #0]
 8009c08:	9b02      	ldr	r3, [sp, #8]
 8009c0a:	601e      	str	r6, [r3, #0]
 8009c0c:	e6a2      	b.n	8009954 <__gethex+0x114>
 8009c0e:	4290      	cmp	r0, r2
 8009c10:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c14:	d8d6      	bhi.n	8009bc4 <__gethex+0x384>
 8009c16:	68a2      	ldr	r2, [r4, #8]
 8009c18:	4593      	cmp	fp, r2
 8009c1a:	db17      	blt.n	8009c4c <__gethex+0x40c>
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4648      	mov	r0, r9
 8009c20:	3101      	adds	r1, #1
 8009c22:	f7fd fdfb 	bl	800781c <_Balloc>
 8009c26:	4682      	mov	sl, r0
 8009c28:	b918      	cbnz	r0, 8009c32 <__gethex+0x3f2>
 8009c2a:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <__gethex+0x458>)
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	2184      	movs	r1, #132	; 0x84
 8009c30:	e6b3      	b.n	800999a <__gethex+0x15a>
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	3202      	adds	r2, #2
 8009c36:	f104 010c 	add.w	r1, r4, #12
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7ff fd4d 	bl	80096dc <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4648      	mov	r0, r9
 8009c46:	f7fd fe29 	bl	800789c <_Bfree>
 8009c4a:	4654      	mov	r4, sl
 8009c4c:	6922      	ldr	r2, [r4, #16]
 8009c4e:	1c51      	adds	r1, r2, #1
 8009c50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c54:	6121      	str	r1, [r4, #16]
 8009c56:	2101      	movs	r1, #1
 8009c58:	6151      	str	r1, [r2, #20]
 8009c5a:	e7bc      	b.n	8009bd6 <__gethex+0x396>
 8009c5c:	6921      	ldr	r1, [r4, #16]
 8009c5e:	4559      	cmp	r1, fp
 8009c60:	dd0b      	ble.n	8009c7a <__gethex+0x43a>
 8009c62:	2101      	movs	r1, #1
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff fd83 	bl	8009770 <rshift>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	42b3      	cmp	r3, r6
 8009c70:	f6ff aedb 	blt.w	8009a2a <__gethex+0x1ea>
 8009c74:	f04f 0801 	mov.w	r8, #1
 8009c78:	e7c2      	b.n	8009c00 <__gethex+0x3c0>
 8009c7a:	f015 051f 	ands.w	r5, r5, #31
 8009c7e:	d0f9      	beq.n	8009c74 <__gethex+0x434>
 8009c80:	9b01      	ldr	r3, [sp, #4]
 8009c82:	441a      	add	r2, r3
 8009c84:	f1c5 0520 	rsb	r5, r5, #32
 8009c88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009c8c:	f7fd feb8 	bl	8007a00 <__hi0bits>
 8009c90:	42a8      	cmp	r0, r5
 8009c92:	dbe6      	blt.n	8009c62 <__gethex+0x422>
 8009c94:	e7ee      	b.n	8009c74 <__gethex+0x434>
 8009c96:	bf00      	nop
 8009c98:	0800a48c 	.word	0x0800a48c

08009c9c <L_shift>:
 8009c9c:	f1c2 0208 	rsb	r2, r2, #8
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	b570      	push	{r4, r5, r6, lr}
 8009ca4:	f1c2 0620 	rsb	r6, r2, #32
 8009ca8:	6843      	ldr	r3, [r0, #4]
 8009caa:	6804      	ldr	r4, [r0, #0]
 8009cac:	fa03 f506 	lsl.w	r5, r3, r6
 8009cb0:	432c      	orrs	r4, r5
 8009cb2:	40d3      	lsrs	r3, r2
 8009cb4:	6004      	str	r4, [r0, #0]
 8009cb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	d3f4      	bcc.n	8009ca8 <L_shift+0xc>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}

08009cc0 <__match>:
 8009cc0:	b530      	push	{r4, r5, lr}
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cca:	b914      	cbnz	r4, 8009cd2 <__match+0x12>
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	bd30      	pop	{r4, r5, pc}
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cda:	2d19      	cmp	r5, #25
 8009cdc:	bf98      	it	ls
 8009cde:	3220      	addls	r2, #32
 8009ce0:	42a2      	cmp	r2, r4
 8009ce2:	d0f0      	beq.n	8009cc6 <__match+0x6>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e7f3      	b.n	8009cd0 <__match+0x10>

08009ce8 <__hexnan>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	680b      	ldr	r3, [r1, #0]
 8009cee:	6801      	ldr	r1, [r0, #0]
 8009cf0:	115e      	asrs	r6, r3, #5
 8009cf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cf6:	f013 031f 	ands.w	r3, r3, #31
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	bf18      	it	ne
 8009cfe:	3604      	addne	r6, #4
 8009d00:	2500      	movs	r5, #0
 8009d02:	1f37      	subs	r7, r6, #4
 8009d04:	4682      	mov	sl, r0
 8009d06:	4690      	mov	r8, r2
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d0e:	46b9      	mov	r9, r7
 8009d10:	463c      	mov	r4, r7
 8009d12:	9502      	str	r5, [sp, #8]
 8009d14:	46ab      	mov	fp, r5
 8009d16:	784a      	ldrb	r2, [r1, #1]
 8009d18:	1c4b      	adds	r3, r1, #1
 8009d1a:	9303      	str	r3, [sp, #12]
 8009d1c:	b342      	cbz	r2, 8009d70 <__hexnan+0x88>
 8009d1e:	4610      	mov	r0, r2
 8009d20:	9105      	str	r1, [sp, #20]
 8009d22:	9204      	str	r2, [sp, #16]
 8009d24:	f7ff fd76 	bl	8009814 <__hexdig_fun>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d14f      	bne.n	8009dcc <__hexnan+0xe4>
 8009d2c:	9a04      	ldr	r2, [sp, #16]
 8009d2e:	9905      	ldr	r1, [sp, #20]
 8009d30:	2a20      	cmp	r2, #32
 8009d32:	d818      	bhi.n	8009d66 <__hexnan+0x7e>
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	459b      	cmp	fp, r3
 8009d38:	dd13      	ble.n	8009d62 <__hexnan+0x7a>
 8009d3a:	454c      	cmp	r4, r9
 8009d3c:	d206      	bcs.n	8009d4c <__hexnan+0x64>
 8009d3e:	2d07      	cmp	r5, #7
 8009d40:	dc04      	bgt.n	8009d4c <__hexnan+0x64>
 8009d42:	462a      	mov	r2, r5
 8009d44:	4649      	mov	r1, r9
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff ffa8 	bl	8009c9c <L_shift>
 8009d4c:	4544      	cmp	r4, r8
 8009d4e:	d950      	bls.n	8009df2 <__hexnan+0x10a>
 8009d50:	2300      	movs	r3, #0
 8009d52:	f1a4 0904 	sub.w	r9, r4, #4
 8009d56:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d5e:	464c      	mov	r4, r9
 8009d60:	461d      	mov	r5, r3
 8009d62:	9903      	ldr	r1, [sp, #12]
 8009d64:	e7d7      	b.n	8009d16 <__hexnan+0x2e>
 8009d66:	2a29      	cmp	r2, #41	; 0x29
 8009d68:	d155      	bne.n	8009e16 <__hexnan+0x12e>
 8009d6a:	3102      	adds	r1, #2
 8009d6c:	f8ca 1000 	str.w	r1, [sl]
 8009d70:	f1bb 0f00 	cmp.w	fp, #0
 8009d74:	d04f      	beq.n	8009e16 <__hexnan+0x12e>
 8009d76:	454c      	cmp	r4, r9
 8009d78:	d206      	bcs.n	8009d88 <__hexnan+0xa0>
 8009d7a:	2d07      	cmp	r5, #7
 8009d7c:	dc04      	bgt.n	8009d88 <__hexnan+0xa0>
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4649      	mov	r1, r9
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7ff ff8a 	bl	8009c9c <L_shift>
 8009d88:	4544      	cmp	r4, r8
 8009d8a:	d934      	bls.n	8009df6 <__hexnan+0x10e>
 8009d8c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d90:	4623      	mov	r3, r4
 8009d92:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d96:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d9a:	429f      	cmp	r7, r3
 8009d9c:	d2f9      	bcs.n	8009d92 <__hexnan+0xaa>
 8009d9e:	1b3b      	subs	r3, r7, r4
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	3304      	adds	r3, #4
 8009da6:	3e03      	subs	r6, #3
 8009da8:	3401      	adds	r4, #1
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	bf38      	it	cc
 8009dae:	2304      	movcc	r3, #4
 8009db0:	4443      	add	r3, r8
 8009db2:	2200      	movs	r2, #0
 8009db4:	f843 2b04 	str.w	r2, [r3], #4
 8009db8:	429f      	cmp	r7, r3
 8009dba:	d2fb      	bcs.n	8009db4 <__hexnan+0xcc>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	b91b      	cbnz	r3, 8009dc8 <__hexnan+0xe0>
 8009dc0:	4547      	cmp	r7, r8
 8009dc2:	d126      	bne.n	8009e12 <__hexnan+0x12a>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	2005      	movs	r0, #5
 8009dca:	e025      	b.n	8009e18 <__hexnan+0x130>
 8009dcc:	3501      	adds	r5, #1
 8009dce:	2d08      	cmp	r5, #8
 8009dd0:	f10b 0b01 	add.w	fp, fp, #1
 8009dd4:	dd06      	ble.n	8009de4 <__hexnan+0xfc>
 8009dd6:	4544      	cmp	r4, r8
 8009dd8:	d9c3      	bls.n	8009d62 <__hexnan+0x7a>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de0:	2501      	movs	r5, #1
 8009de2:	3c04      	subs	r4, #4
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	f000 000f 	and.w	r0, r0, #15
 8009dea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	e7b7      	b.n	8009d62 <__hexnan+0x7a>
 8009df2:	2508      	movs	r5, #8
 8009df4:	e7b5      	b.n	8009d62 <__hexnan+0x7a>
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0df      	beq.n	8009dbc <__hexnan+0xd4>
 8009dfc:	f1c3 0320 	rsb	r3, r3, #32
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	40da      	lsrs	r2, r3
 8009e06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e10:	e7d4      	b.n	8009dbc <__hexnan+0xd4>
 8009e12:	3f04      	subs	r7, #4
 8009e14:	e7d2      	b.n	8009dbc <__hexnan+0xd4>
 8009e16:	2004      	movs	r0, #4
 8009e18:	b007      	add	sp, #28
 8009e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e1e <__ascii_mbtowc>:
 8009e1e:	b082      	sub	sp, #8
 8009e20:	b901      	cbnz	r1, 8009e24 <__ascii_mbtowc+0x6>
 8009e22:	a901      	add	r1, sp, #4
 8009e24:	b142      	cbz	r2, 8009e38 <__ascii_mbtowc+0x1a>
 8009e26:	b14b      	cbz	r3, 8009e3c <__ascii_mbtowc+0x1e>
 8009e28:	7813      	ldrb	r3, [r2, #0]
 8009e2a:	600b      	str	r3, [r1, #0]
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	1e10      	subs	r0, r2, #0
 8009e30:	bf18      	it	ne
 8009e32:	2001      	movne	r0, #1
 8009e34:	b002      	add	sp, #8
 8009e36:	4770      	bx	lr
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e7fb      	b.n	8009e34 <__ascii_mbtowc+0x16>
 8009e3c:	f06f 0001 	mvn.w	r0, #1
 8009e40:	e7f8      	b.n	8009e34 <__ascii_mbtowc+0x16>

08009e42 <_realloc_r>:
 8009e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	4680      	mov	r8, r0
 8009e48:	4614      	mov	r4, r2
 8009e4a:	460e      	mov	r6, r1
 8009e4c:	b921      	cbnz	r1, 8009e58 <_realloc_r+0x16>
 8009e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	4611      	mov	r1, r2
 8009e54:	f7fd bc56 	b.w	8007704 <_malloc_r>
 8009e58:	b92a      	cbnz	r2, 8009e66 <_realloc_r+0x24>
 8009e5a:	f7fd fbdf 	bl	800761c <_free_r>
 8009e5e:	4625      	mov	r5, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e66:	f000 f8c6 	bl	8009ff6 <_malloc_usable_size_r>
 8009e6a:	4284      	cmp	r4, r0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	d802      	bhi.n	8009e76 <_realloc_r+0x34>
 8009e70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e74:	d812      	bhi.n	8009e9c <_realloc_r+0x5a>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4640      	mov	r0, r8
 8009e7a:	f7fd fc43 	bl	8007704 <_malloc_r>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0ed      	beq.n	8009e60 <_realloc_r+0x1e>
 8009e84:	42bc      	cmp	r4, r7
 8009e86:	4622      	mov	r2, r4
 8009e88:	4631      	mov	r1, r6
 8009e8a:	bf28      	it	cs
 8009e8c:	463a      	movcs	r2, r7
 8009e8e:	f7ff fc25 	bl	80096dc <memcpy>
 8009e92:	4631      	mov	r1, r6
 8009e94:	4640      	mov	r0, r8
 8009e96:	f7fd fbc1 	bl	800761c <_free_r>
 8009e9a:	e7e1      	b.n	8009e60 <_realloc_r+0x1e>
 8009e9c:	4635      	mov	r5, r6
 8009e9e:	e7df      	b.n	8009e60 <_realloc_r+0x1e>

08009ea0 <__ascii_wctomb>:
 8009ea0:	b149      	cbz	r1, 8009eb6 <__ascii_wctomb+0x16>
 8009ea2:	2aff      	cmp	r2, #255	; 0xff
 8009ea4:	bf85      	ittet	hi
 8009ea6:	238a      	movhi	r3, #138	; 0x8a
 8009ea8:	6003      	strhi	r3, [r0, #0]
 8009eaa:	700a      	strbls	r2, [r1, #0]
 8009eac:	f04f 30ff 	movhi.w	r0, #4294967295
 8009eb0:	bf98      	it	ls
 8009eb2:	2001      	movls	r0, #1
 8009eb4:	4770      	bx	lr
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	4770      	bx	lr
	...

08009ebc <fiprintf>:
 8009ebc:	b40e      	push	{r1, r2, r3}
 8009ebe:	b503      	push	{r0, r1, lr}
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <fiprintf+0x20>)
 8009ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eca:	6800      	ldr	r0, [r0, #0]
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f7ff f96b 	bl	80091a8 <_vfiprintf_r>
 8009ed2:	b002      	add	sp, #8
 8009ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed8:	b003      	add	sp, #12
 8009eda:	4770      	bx	lr
 8009edc:	200000a0 	.word	0x200000a0

08009ee0 <__swhatbuf_r>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	b096      	sub	sp, #88	; 0x58
 8009eec:	4615      	mov	r5, r2
 8009eee:	461e      	mov	r6, r3
 8009ef0:	da0d      	bge.n	8009f0e <__swhatbuf_r+0x2e>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ef8:	f04f 0100 	mov.w	r1, #0
 8009efc:	bf0c      	ite	eq
 8009efe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f02:	2340      	movne	r3, #64	; 0x40
 8009f04:	2000      	movs	r0, #0
 8009f06:	6031      	str	r1, [r6, #0]
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	b016      	add	sp, #88	; 0x58
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	466a      	mov	r2, sp
 8009f10:	f000 f848 	bl	8009fa4 <_fstat_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	dbec      	blt.n	8009ef2 <__swhatbuf_r+0x12>
 8009f18:	9901      	ldr	r1, [sp, #4]
 8009f1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f22:	4259      	negs	r1, r3
 8009f24:	4159      	adcs	r1, r3
 8009f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2a:	e7eb      	b.n	8009f04 <__swhatbuf_r+0x24>

08009f2c <__smakebuf_r>:
 8009f2c:	898b      	ldrh	r3, [r1, #12]
 8009f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f30:	079d      	lsls	r5, r3, #30
 8009f32:	4606      	mov	r6, r0
 8009f34:	460c      	mov	r4, r1
 8009f36:	d507      	bpl.n	8009f48 <__smakebuf_r+0x1c>
 8009f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	6123      	str	r3, [r4, #16]
 8009f40:	2301      	movs	r3, #1
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	b002      	add	sp, #8
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	ab01      	add	r3, sp, #4
 8009f4a:	466a      	mov	r2, sp
 8009f4c:	f7ff ffc8 	bl	8009ee0 <__swhatbuf_r>
 8009f50:	9900      	ldr	r1, [sp, #0]
 8009f52:	4605      	mov	r5, r0
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7fd fbd5 	bl	8007704 <_malloc_r>
 8009f5a:	b948      	cbnz	r0, 8009f70 <__smakebuf_r+0x44>
 8009f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f60:	059a      	lsls	r2, r3, #22
 8009f62:	d4ef      	bmi.n	8009f44 <__smakebuf_r+0x18>
 8009f64:	f023 0303 	bic.w	r3, r3, #3
 8009f68:	f043 0302 	orr.w	r3, r3, #2
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	e7e3      	b.n	8009f38 <__smakebuf_r+0xc>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	6020      	str	r0, [r4, #0]
 8009f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	6163      	str	r3, [r4, #20]
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	6120      	str	r0, [r4, #16]
 8009f82:	b15b      	cbz	r3, 8009f9c <__smakebuf_r+0x70>
 8009f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f000 f81d 	bl	8009fc8 <_isatty_r>
 8009f8e:	b128      	cbz	r0, 8009f9c <__smakebuf_r+0x70>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	431d      	orrs	r5, r3
 8009fa0:	81a5      	strh	r5, [r4, #12]
 8009fa2:	e7cf      	b.n	8009f44 <__smakebuf_r+0x18>

08009fa4 <_fstat_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_fstat_r+0x20>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	f7f8 fb62 	bl	800267a <_fstat>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d102      	bne.n	8009fc0 <_fstat_r+0x1c>
 8009fba:	682b      	ldr	r3, [r5, #0]
 8009fbc:	b103      	cbz	r3, 8009fc0 <_fstat_r+0x1c>
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000624 	.word	0x20000624

08009fc8 <_isatty_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	; (8009fe4 <_isatty_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7f8 fb56 	bl	8002684 <_isatty>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_isatty_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_isatty_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	20000624 	.word	0x20000624

08009fe8 <abort>:
 8009fe8:	b508      	push	{r3, lr}
 8009fea:	2006      	movs	r0, #6
 8009fec:	f000 f834 	bl	800a058 <raise>
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7f8 fb1f 	bl	8002634 <_exit>

08009ff6 <_malloc_usable_size_r>:
 8009ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffa:	1f18      	subs	r0, r3, #4
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfbc      	itt	lt
 800a000:	580b      	ldrlt	r3, [r1, r0]
 800a002:	18c0      	addlt	r0, r0, r3
 800a004:	4770      	bx	lr

0800a006 <_raise_r>:
 800a006:	291f      	cmp	r1, #31
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	d904      	bls.n	800a01a <_raise_r+0x14>
 800a010:	2316      	movs	r3, #22
 800a012:	6003      	str	r3, [r0, #0]
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a01c:	b112      	cbz	r2, 800a024 <_raise_r+0x1e>
 800a01e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a022:	b94b      	cbnz	r3, 800a038 <_raise_r+0x32>
 800a024:	4620      	mov	r0, r4
 800a026:	f000 f831 	bl	800a08c <_getpid_r>
 800a02a:	462a      	mov	r2, r5
 800a02c:	4601      	mov	r1, r0
 800a02e:	4620      	mov	r0, r4
 800a030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a034:	f000 b818 	b.w	800a068 <_kill_r>
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d00a      	beq.n	800a052 <_raise_r+0x4c>
 800a03c:	1c59      	adds	r1, r3, #1
 800a03e:	d103      	bne.n	800a048 <_raise_r+0x42>
 800a040:	2316      	movs	r3, #22
 800a042:	6003      	str	r3, [r0, #0]
 800a044:	2001      	movs	r0, #1
 800a046:	e7e7      	b.n	800a018 <_raise_r+0x12>
 800a048:	2400      	movs	r4, #0
 800a04a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a04e:	4628      	mov	r0, r5
 800a050:	4798      	blx	r3
 800a052:	2000      	movs	r0, #0
 800a054:	e7e0      	b.n	800a018 <_raise_r+0x12>
	...

0800a058 <raise>:
 800a058:	4b02      	ldr	r3, [pc, #8]	; (800a064 <raise+0xc>)
 800a05a:	4601      	mov	r1, r0
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	f7ff bfd2 	b.w	800a006 <_raise_r>
 800a062:	bf00      	nop
 800a064:	200000a0 	.word	0x200000a0

0800a068 <_kill_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	; (800a088 <_kill_r+0x20>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	f7f8 fad5 	bl	8002624 <_kill>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	d102      	bne.n	800a084 <_kill_r+0x1c>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	b103      	cbz	r3, 800a084 <_kill_r+0x1c>
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	20000624 	.word	0x20000624

0800a08c <_getpid_r>:
 800a08c:	f7f8 bac8 	b.w	8002620 <_getpid>

0800a090 <_init>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	bf00      	nop
 800a094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a096:	bc08      	pop	{r3}
 800a098:	469e      	mov	lr, r3
 800a09a:	4770      	bx	lr

0800a09c <_fini>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	bf00      	nop
 800a0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a2:	bc08      	pop	{r3}
 800a0a4:	469e      	mov	lr, r3
 800a0a6:	4770      	bx	lr
